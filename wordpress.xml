<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->


<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>泛叶江湖</title>
	<link>http://www.aemiot.com</link>
	<description>泛一叶扁舟，游一世江湖。</description>
	<pubDate>Thu, 26 Nov 2015 16:40:08 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://www.aemiot.com</wp:base_site_url>
	<wp:base_blog_url>http://www.aemiot.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>Eluckv</wp:author_login><wp:author_email>aem3372@163.com</wp:author_email><wp:author_display_name><![CDATA[泛叶]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>66</wp:term_id><wp:category_nicename>zp</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[作品]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>60</wp:term_id><wp:category_nicename>qrs</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[应用开发]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[未分类]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>65</wp:term_id><wp:category_nicename>gamepro</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[游戏开发]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>64</wp:term_id><wp:category_nicename>yrz</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[生活杂记]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>16</wp:term_id><wp:category_nicename>calc</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[算法/数据结构]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>61</wp:term_id><wp:category_nicename>jyzt</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[经验之谈]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>59</wp:term_id><wp:category_nicename>mgzl</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[美工之路]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>92</wp:term_id><wp:category_nicename>shape</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[资源分享]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>169</wp:term_id><wp:tag_slug>10055</wp:tag_slug><wp:tag_name><![CDATA[10055]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>165</wp:term_id><wp:tag_slug>1006</wp:tag_slug><wp:tag_name><![CDATA[1006]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>170</wp:term_id><wp:tag_slug>10071</wp:tag_slug><wp:tag_name><![CDATA[10071]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>171</wp:term_id><wp:tag_slug>10300</wp:tag_slug><wp:tag_name><![CDATA[10300]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>191</wp:term_id><wp:tag_slug>10330</wp:tag_slug><wp:tag_name><![CDATA[10330]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>175</wp:term_id><wp:tag_slug>11292</wp:tag_slug><wp:tag_name><![CDATA[11292]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>183</wp:term_id><wp:tag_slug>1285</wp:tag_slug><wp:tag_name><![CDATA[1285]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>97</wp:term_id><wp:tag_slug>163%ef%bc%8c%e7%99%bb%e5%bd%95%e5%99%a8</wp:tag_slug><wp:tag_name><![CDATA[163，登录器]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>79</wp:term_id><wp:tag_slug>2011</wp:tag_slug><wp:tag_name><![CDATA[2011]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>81</wp:term_id><wp:tag_slug>2013</wp:tag_slug><wp:tag_name><![CDATA[2013]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>196</wp:term_id><wp:tag_slug>2014</wp:tag_slug><wp:tag_name><![CDATA[2014]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>148</wp:term_id><wp:tag_slug>4092</wp:tag_slug><wp:tag_name><![CDATA[4092]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>152</wp:term_id><wp:tag_slug>4502</wp:tag_slug><wp:tag_name><![CDATA[4502]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>174</wp:term_id><wp:tag_slug>4510</wp:tag_slug><wp:tag_name><![CDATA[4510]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>172</wp:term_id><wp:tag_slug>458</wp:tag_slug><wp:tag_name><![CDATA[458]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>154</wp:term_id><wp:tag_slug>4707</wp:tag_slug><wp:tag_name><![CDATA[4707]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>157</wp:term_id><wp:tag_slug>4716</wp:tag_slug><wp:tag_name><![CDATA[4716]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>166</wp:term_id><wp:tag_slug>4764</wp:tag_slug><wp:tag_name><![CDATA[4764]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>118</wp:term_id><wp:tag_slug>94</wp:tag_slug><wp:tag_name><![CDATA[94]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>27</wp:term_id><wp:tag_slug>acm</wp:tag_slug><wp:tag_name><![CDATA[ACM]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>94</wp:term_id><wp:tag_slug>aem</wp:tag_slug><wp:tag_name><![CDATA[Aem]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>28</wp:term_id><wp:tag_slug>aemcity</wp:tag_slug><wp:tag_name><![CDATA[AemCity]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>29</wp:term_id><wp:tag_slug>ansi</wp:tag_slug><wp:tag_name><![CDATA[ANSI]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>150</wp:term_id><wp:tag_slug>bfs</wp:tag_slug><wp:tag_name><![CDATA[BFS]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>204</wp:term_id><wp:tag_slug>bug</wp:tag_slug><wp:tag_name><![CDATA[Bug]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>30</wp:term_id><wp:tag_slug>c</wp:tag_slug><wp:tag_name><![CDATA[c]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug>c89</wp:tag_slug><wp:tag_name><![CDATA[C89]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>32</wp:term_id><wp:tag_slug>c99</wp:tag_slug><wp:tag_name><![CDATA[C99]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>199</wp:term_id><wp:tag_slug>ccobject</wp:tag_slug><wp:tag_name><![CDATA[CCObject]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>197</wp:term_id><wp:tag_slug>cocos2dx</wp:tag_slug><wp:tag_name><![CDATA[cocos2dx]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>203</wp:term_id><wp:tag_slug>cocosstudio</wp:tag_slug><wp:tag_name><![CDATA[CocosStudio]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug>const</wp:tag_slug><wp:tag_name><![CDATA[const]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>34</wp:term_id><wp:tag_slug>cpp</wp:tag_slug><wp:tag_name><![CDATA[cpp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>108</wp:term_id><wp:tag_slug>cth670</wp:tag_slug><wp:tag_name><![CDATA[cth670]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>100</wp:term_id><wp:tag_slug>c%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e8%af%ad%e8%a8%80</wp:tag_slug><wp:tag_name><![CDATA[C程序设计语言]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>123</wp:term_id><wp:tag_slug>dcap</wp:tag_slug><wp:tag_name><![CDATA[DCAP]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>209</wp:term_id><wp:tag_slug>debian</wp:tag_slug><wp:tag_name><![CDATA[debian]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>35</wp:term_id><wp:tag_slug>dp</wp:tag_slug><wp:tag_name><![CDATA[DP]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>70</wp:term_id><wp:tag_slug>getchar</wp:tag_slug><wp:tag_name><![CDATA[getchar]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>188</wp:term_id><wp:tag_slug>graphivz</wp:tag_slug><wp:tag_name><![CDATA[Graphivz]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>147</wp:term_id><wp:tag_slug>hdu</wp:tag_slug><wp:tag_name><![CDATA[hdu]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>149</wp:term_id><wp:tag_slug>hdu-problem-1429</wp:tag_slug><wp:tag_name><![CDATA[HDU-Problem-1429]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>207</wp:term_id><wp:tag_slug>icu</wp:tag_slug><wp:tag_name><![CDATA[icu]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>214</wp:term_id><wp:tag_slug>java</wp:tag_slug><wp:tag_name><![CDATA[Java]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>212</wp:term_id><wp:tag_slug>jessie</wp:tag_slug><wp:tag_name><![CDATA[jessie]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>133</wp:term_id><wp:tag_slug>kmp</wp:tag_slug><wp:tag_name><![CDATA[KMP]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>192</wp:term_id><wp:tag_slug>lcs</wp:tag_slug><wp:tag_name><![CDATA[LCS]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>213</wp:term_id><wp:tag_slug>linux</wp:tag_slug><wp:tag_name><![CDATA[linux]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug>max</wp:tag_slug><wp:tag_name><![CDATA[Max]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>137</wp:term_id><wp:tag_slug>mit</wp:tag_slug><wp:tag_name><![CDATA[MIT]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>119</wp:term_id><wp:tag_slug>noi</wp:tag_slug><wp:tag_name><![CDATA[noi]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>139</wp:term_id><wp:tag_slug>primer</wp:tag_slug><wp:tag_name><![CDATA[primer]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>37</wp:term_id><wp:tag_slug>python</wp:tag_slug><wp:tag_name><![CDATA[python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>206</wp:term_id><wp:tag_slug>qt</wp:tag_slug><wp:tag_name><![CDATA[QT]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>200</wp:term_id><wp:tag_slug>ref</wp:tag_slug><wp:tag_name><![CDATA[Ref]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>71</wp:term_id><wp:tag_slug>scanf</wp:tag_slug><wp:tag_name><![CDATA[scanf]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>145</wp:term_id><wp:tag_slug>shanghai</wp:tag_slug><wp:tag_name><![CDATA[Shanghai]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>190</wp:term_id><wp:tag_slug>sicily</wp:tag_slug><wp:tag_name><![CDATA[sicily]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>143</wp:term_id><wp:tag_slug>sierpinski</wp:tag_slug><wp:tag_name><![CDATA[Sierpinski]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>38</wp:term_id><wp:tag_slug>test</wp:tag_slug><wp:tag_name><![CDATA[test]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>160</wp:term_id><wp:tag_slug>unity3d</wp:tag_slug><wp:tag_name><![CDATA[Unity3D]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>211</wp:term_id><wp:tag_slug>update</wp:tag_slug><wp:tag_name><![CDATA[update]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>168</wp:term_id><wp:tag_slug>uvaoj</wp:tag_slug><wp:tag_name><![CDATA[UVaOJ]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>161</wp:term_id><wp:tag_slug>web</wp:tag_slug><wp:tag_name><![CDATA[Web]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>210</wp:term_id><wp:tag_slug>wheezy</wp:tag_slug><wp:tag_name><![CDATA[wheezy]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>107</wp:term_id><wp:tag_slug>wocom</wp:tag_slug><wp:tag_name><![CDATA[Wocom]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>180</wp:term_id><wp:tag_slug>%e4%b8%8a%e8%89%b2%e6%b3%95</wp:tag_slug><wp:tag_name><![CDATA[上色法]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>69</wp:term_id><wp:tag_slug>%e4%b8%8b%e8%bd%bd</wp:tag_slug><wp:tag_name><![CDATA[下载]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>39</wp:term_id><wp:tag_slug>%e4%b8%aa%e4%ba%ba</wp:tag_slug><wp:tag_name><![CDATA[个人]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>189</wp:term_id><wp:tag_slug>%e4%b8%ad%e6%96%87%e4%b9%b1%e7%a0%81</wp:tag_slug><wp:tag_name><![CDATA[中文乱码]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>85</wp:term_id><wp:tag_slug>%e4%b8%ad%e9%97%b4%e5%8f%98%e9%87%8f</wp:tag_slug><wp:tag_name><![CDATA[中间变量]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>122</wp:term_id><wp:tag_slug>%e4%b9%9d%e5%ae%ab%e6%a0%bc</wp:tag_slug><wp:tag_name><![CDATA[九宫格]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>86</wp:term_id><wp:tag_slug>%e4%ba%a4%e6%8d%a2</wp:tag_slug><wp:tag_name><![CDATA[交换]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>88</wp:term_id><wp:tag_slug>%e4%bb%99%e4%ba%94%e5%89%8d%e4%bc%a0</wp:tag_slug><wp:tag_name><![CDATA[仙五前传]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>91</wp:term_id><wp:tag_slug>%e4%bb%99%e5%89%91%e4%ba%94%ef%bc%8c%e4%bb%99%e5%89%91%e4%ba%94%e5%89%8d%e4%bc%a0%ef%bc%8c%e9%9f%b3%e4%b9%90</wp:tag_slug><wp:tag_name><![CDATA[仙剑五，仙剑五前传，音乐]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>87</wp:term_id><wp:tag_slug>%e4%bb%99%e5%89%91%e5%a5%87%e4%be%a0%e4%bc%a0%e4%ba%94%e5%89%8d%e4%bc%a0</wp:tag_slug><wp:tag_name><![CDATA[仙剑奇侠传五前传]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>120</wp:term_id><wp:tag_slug>%e4%bf%84%e7%bd%97%e6%96%af%e6%96%b9%e5%9d%97</wp:tag_slug><wp:tag_name><![CDATA[俄罗斯方块]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>40</wp:term_id><wp:tag_slug>%e5%85%a8%e5%b1%80</wp:tag_slug><wp:tag_name><![CDATA[全局]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>202</wp:term_id><wp:tag_slug>%e5%85%ac%e5%85%b1%e5%9f%ba%e7%b1%bb</wp:tag_slug><wp:tag_name><![CDATA[公共基类]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>138</wp:term_id><wp:tag_slug>%e5%85%ac%e5%bc%80%e8%af%be</wp:tag_slug><wp:tag_name><![CDATA[公开课]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>99</wp:term_id><wp:tag_slug>%e5%87%8f%e6%b3%95</wp:tag_slug><wp:tag_name><![CDATA[减法]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>144</wp:term_id><wp:tag_slug>%e5%88%86%e5%bd%a2%e4%b8%89%e8%a7%92%e5%bd%a2</wp:tag_slug><wp:tag_name><![CDATA[分形三角形]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>125</wp:term_id><wp:tag_slug>%e5%88%86%e6%95%b0</wp:tag_slug><wp:tag_name><![CDATA[分数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>78</wp:term_id><wp:tag_slug>%e5%88%9d%e8%b5%9b</wp:tag_slug><wp:tag_name><![CDATA[初赛]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>73</wp:term_id><wp:tag_slug>%e5%8a%a0%e6%b3%95</wp:tag_slug><wp:tag_name><![CDATA[加法]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>178</wp:term_id><wp:tag_slug>%e5%8a%a0%e9%80%9f%e4%b8%96%e7%95%8c</wp:tag_slug><wp:tag_name><![CDATA[加速世界]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>41</wp:term_id><wp:tag_slug>%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92</wp:tag_slug><wp:tag_name><![CDATA[动态规划]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>146</wp:term_id><wp:tag_slug>%e5%8c%ba%e5%9f%9f%e8%b5%9b</wp:tag_slug><wp:tag_name><![CDATA[区域赛]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>42</wp:term_id><wp:tag_slug>%e5%8d%9a%e5%ae%a2</wp:tag_slug><wp:tag_name><![CDATA[博客]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>185</wp:term_id><wp:tag_slug>%e5%8e%86%e5%b1%8a%e8%af%95%e9%a2%98</wp:tag_slug><wp:tag_name><![CDATA[历届试题]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>112</wp:term_id><wp:tag_slug>%e5%8e%8b%e7%bc%a9</wp:tag_slug><wp:tag_name><![CDATA[压缩]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>43</wp:term_id><wp:tag_slug>%e5%8f%98%e9%87%8f</wp:tag_slug><wp:tag_name><![CDATA[变量]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>128</wp:term_id><wp:tag_slug>%e5%90%83%e7%b3%96%e6%9e%9c</wp:tag_slug><wp:tag_name><![CDATA[吃糖果]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>117</wp:term_id><wp:tag_slug>%e5%9b%9b%e5%88%99%e8%bf%90%e7%ae%97</wp:tag_slug><wp:tag_name><![CDATA[四则运算]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>195</wp:term_id><wp:tag_slug>%e5%9c%a8%e7%ba%bf</wp:tag_slug><wp:tag_name><![CDATA[在线]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>44</wp:term_id><wp:tag_slug>%e5%a3%b0%e6%98%8e</wp:tag_slug><wp:tag_name><![CDATA[声明]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>106</wp:term_id><wp:tag_slug>%e5%a4%8f%e4%be%af%e7%91%be%e8%bd%a9</wp:tag_slug><wp:tag_name><![CDATA[夏侯瑾轩]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>101</wp:term_id><wp:tag_slug>%e5%a5%bd%e4%b9%a6</wp:tag_slug><wp:tag_name><![CDATA[好书]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>135</wp:term_id><wp:tag_slug>%e5%ad%97%e7%ac%a6%e4%b8%b2</wp:tag_slug><wp:tag_name><![CDATA[字符串]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>95</wp:term_id><wp:tag_slug>%e5%af%86%e7%a0%81</wp:tag_slug><wp:tag_name><![CDATA[密码]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>198</wp:term_id><wp:tag_slug>%e5%b7%a5%e7%a8%8b%e5%88%9b%e5%bb%ba</wp:tag_slug><wp:tag_name><![CDATA[工程创建]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>184</wp:term_id><wp:tag_slug>%e6%8b%93%e6%89%91%e6%8e%92%e5%ba%8f</wp:tag_slug><wp:tag_name><![CDATA[拓扑排序]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>116</wp:term_id><wp:tag_slug>%e6%8b%ac%e5%8f%b7</wp:tag_slug><wp:tag_name><![CDATA[括号]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>201</wp:term_id><wp:tag_slug>%e6%8b%b7%e8%b4%9d%e6%9c%ba%e5%88%b6</wp:tag_slug><wp:tag_name><![CDATA[拷贝机制]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>45</wp:term_id><wp:tag_slug>%e6%8e%92%e5%90%8d</wp:tag_slug><wp:tag_name><![CDATA[排名]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>105</wp:term_id><wp:tag_slug>%e6%95%b0%e4%bd%8d%e6%9d%bf</wp:tag_slug><wp:tag_name><![CDATA[数位板]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>115</wp:term_id><wp:tag_slug>%e6%95%b0%e5%ad%97%e6%a0%b9</wp:tag_slug><wp:tag_name><![CDATA[数字根]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>162</wp:term_id><wp:tag_slug>%e6%95%b0%e5%ad%a6%e5%bb%ba%e6%a8%a1</wp:tag_slug><wp:tag_name><![CDATA[数学建模]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>179</wp:term_id><wp:tag_slug>%e6%95%b0%e7%a0%81%e7%bb%98</wp:tag_slug><wp:tag_name><![CDATA[数码绘]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>114</wp:term_id><wp:tag_slug>%e6%95%b0%e8%ae%ba</wp:tag_slug><wp:tag_name><![CDATA[数论]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>121</wp:term_id><wp:tag_slug>%e6%96%b9%e5%9d%97%e4%b8%8b%e8%90%bd</wp:tag_slug><wp:tag_name><![CDATA[方块下落]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>176</wp:term_id><wp:tag_slug>%e6%98%a5%e9%9b%aa</wp:tag_slug><wp:tag_name><![CDATA[春雪]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>109</wp:term_id><wp:tag_slug>%e6%9c%80%e5%a4%a7%e5%85%ac%e7%ba%a6%e6%95%b0</wp:tag_slug><wp:tag_name><![CDATA[最大公约数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>110</wp:term_id><wp:tag_slug>%e6%9c%80%e5%b0%8f%e5%85%ac%e5%80%8d%e6%95%b0</wp:tag_slug><wp:tag_name><![CDATA[最小公倍数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>46</wp:term_id><wp:tag_slug>%e6%9d%bf%e5%9d%97</wp:tag_slug><wp:tag_name><![CDATA[板块]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>215</wp:term_id><wp:tag_slug>%e6%a0%b8%e5%bf%83%e6%8a%80%e6%9c%af</wp:tag_slug><wp:tag_name><![CDATA[核心技术]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>134</wp:term_id><wp:tag_slug>%e6%a8%a1%e5%bc%8f%e5%8c%b9%e9%85%8d</wp:tag_slug><wp:tag_name><![CDATA[模式匹配]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>83</wp:term_id><wp:tag_slug>%e6%a8%a1%e6%8b%9f</wp:tag_slug><wp:tag_name><![CDATA[模拟]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>47</wp:term_id><wp:tag_slug>%e6%ac%a2%e8%bf%8e</wp:tag_slug><wp:tag_name><![CDATA[欢迎]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>111</wp:term_id><wp:tag_slug>%e6%ac%a7%e5%87%a0%e9%87%8c%e5%be%97%e7%ae%97%e6%b3%95</wp:tag_slug><wp:tag_name><![CDATA[欧几里得算法]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>155</wp:term_id><wp:tag_slug>%e6%b0%b4%e9%a2%98</wp:tag_slug><wp:tag_name><![CDATA[水题]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>129</wp:term_id><wp:tag_slug>%e6%b1%9f%e8%a5%bf%e5%b8%88%e5%a4%a7</wp:tag_slug><wp:tag_name><![CDATA[江西师大]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>153</wp:term_id><wp:tag_slug>%e6%b5%b7%e6%8a%a5</wp:tag_slug><wp:tag_name><![CDATA[海报]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>67</wp:term_id><wp:tag_slug>%e6%b8%b8%e6%88%8f</wp:tag_slug><wp:tag_name><![CDATA[游戏]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>151</wp:term_id><wp:tag_slug>%e7%8a%b6%e6%80%81%e5%8e%8b%e7%bc%a9</wp:tag_slug><wp:tag_name><![CDATA[状态压缩]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>68</wp:term_id><wp:tag_slug>%e7%8c%9c%e6%95%b0%e5%ad%97</wp:tag_slug><wp:tag_name><![CDATA[猜数字]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>124</wp:term_id><wp:tag_slug>%e7%94%b5%e8%b7%af</wp:tag_slug><wp:tag_name><![CDATA[电路]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>84</wp:term_id><wp:tag_slug>%e7%99%be%e5%ba%a6%e4%b9%8b%e6%98%9f</wp:tag_slug><wp:tag_name><![CDATA[百度之星]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>193</wp:term_id><wp:tag_slug>%e7%9c%9f%e5%80%bc%e8%a1%a8</wp:tag_slug><wp:tag_name><![CDATA[真值表]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>158</wp:term_id><wp:tag_slug>%e7%ab%9e%e8%b5%9b</wp:tag_slug><wp:tag_name><![CDATA[竞赛]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>131</wp:term_id><wp:tag_slug>%e7%ac%ac%e5%9b%9b%e5%b1%8a</wp:tag_slug><wp:tag_name><![CDATA[第四届]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>48</wp:term_id><wp:tag_slug>%e7%ae%97%e6%b3%95</wp:tag_slug><wp:tag_name><![CDATA[算法]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>167</wp:term_id><wp:tag_slug>%e7%ae%97%e6%b3%95%e7%ab%9e%e8%b5%9b%e5%85%a5%e9%97%a8%e4%b9%a0%e9%a2%98</wp:tag_slug><wp:tag_name><![CDATA[算法竞赛入门习题]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>96</wp:term_id><wp:tag_slug>%e7%ae%a1%e7%90%86%e5%99%a8</wp:tag_slug><wp:tag_name><![CDATA[管理器]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>103</wp:term_id><wp:tag_slug>%e7%b1%bb</wp:tag_slug><wp:tag_name><![CDATA[类]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>136</wp:term_id><wp:tag_slug>%e7%ba%bf%e6%80%a7%e4%bb%a3%e6%95%b0</wp:tag_slug><wp:tag_name><![CDATA[线性代数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>140</wp:term_id><wp:tag_slug>%e7%ba%bf%e6%ae%b5%e6%a0%91</wp:tag_slug><wp:tag_name><![CDATA[线段树]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>186</wp:term_id><wp:tag_slug>%e7%bb%83%e4%b9%a0%e7%b3%bb%e7%bb%9f</wp:tag_slug><wp:tag_name><![CDATA[练习系统]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>159</wp:term_id><wp:tag_slug>%e7%bc%96%e7%a8%8b</wp:tag_slug><wp:tag_name><![CDATA[编程]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>102</wp:term_id><wp:tag_slug>%e7%bc%96%e7%a8%8b%e4%b9%a6%e7%b1%8d</wp:tag_slug><wp:tag_name><![CDATA[编程书籍]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>163</wp:term_id><wp:tag_slug>%e7%bd%91%e7%bb%9c%e9%80%89%e6%8b%94%e8%b5%9b</wp:tag_slug><wp:tag_name><![CDATA[网络选拔赛]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>126</wp:term_id><wp:tag_slug>%e8%85%be%e8%ae%af%e7%bc%96%e7%a8%8b%e9%a9%ac%e6%8b%89%e6%9d%be</wp:tag_slug><wp:tag_name><![CDATA[腾讯编程马拉松]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>82</wp:term_id><wp:tag_slug>%e8%8b%b1%e8%af%ad</wp:tag_slug><wp:tag_name><![CDATA[英语]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>77</wp:term_id><wp:tag_slug>%e8%93%9d%e6%a1%a5%e6%9d%af</wp:tag_slug><wp:tag_name><![CDATA[蓝桥杯]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>205</wp:term_id><wp:tag_slug>%e8%a1%a5%e9%97%b4%e5%8a%a8%e7%94%bb</wp:tag_slug><wp:tag_name><![CDATA[补间动画]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>208</wp:term_id><wp:tag_slug>%e8%a3%81%e5%89%aa</wp:tag_slug><wp:tag_name><![CDATA[裁剪]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>113</wp:term_id><wp:tag_slug>%e8%a7%a3%e5%8e%8b%e7%bc%a9</wp:tag_slug><wp:tag_name><![CDATA[解压缩]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>187</wp:term_id><wp:tag_slug>%e8%a7%a3%e9%a2%98%e6%8a%a5%e5%91%8a</wp:tag_slug><wp:tag_name><![CDATA[解题报告]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>194</wp:term_id><wp:tag_slug>%e8%ae%a1%e7%ae%97</wp:tag_slug><wp:tag_name><![CDATA[计算]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>173</wp:term_id><wp:tag_slug>%e8%af%81%e6%98%8e</wp:tag_slug><wp:tag_name><![CDATA[证明]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>132</wp:term_id><wp:tag_slug>%e8%af%95%e9%a2%98</wp:tag_slug><wp:tag_name><![CDATA[试题]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>49</wp:term_id><wp:tag_slug>%e8%af%ad%e6%b3%95</wp:tag_slug><wp:tag_name><![CDATA[语法]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>50</wp:term_id><wp:tag_slug>%e8%af%af%e4%bc%9a</wp:tag_slug><wp:tag_name><![CDATA[误会]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>142</wp:term_id><wp:tag_slug>%e8%b0%a2%e5%ae%be%e6%96%af%e5%9f%ba</wp:tag_slug><wp:tag_name><![CDATA[谢宾斯基]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>51</wp:term_id><wp:tag_slug>%e8%b5%8b%e5%80%bc</wp:tag_slug><wp:tag_name><![CDATA[赋值]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>104</wp:term_id><wp:tag_slug>%e8%bd%ac%e6%8d%a2</wp:tag_slug><wp:tag_name><![CDATA[转换]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>93</wp:term_id><wp:tag_slug>%e8%bd%af%e4%bb%b6</wp:tag_slug><wp:tag_name><![CDATA[软件]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>156</wp:term_id><wp:tag_slug>%e8%be%93%e5%85%a5%e8%be%93%e5%87%ba</wp:tag_slug><wp:tag_name><![CDATA[输入输出]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>52</wp:term_id><wp:tag_slug>%e8%bf%90%e7%ae%97%e7%ac%a6</wp:tag_slug><wp:tag_name><![CDATA[运算符]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>89</wp:term_id><wp:tag_slug>%e9%80%9a%e5%85%b3</wp:tag_slug><wp:tag_name><![CDATA[通关]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>164</wp:term_id><wp:tag_slug>%e9%95%bf%e6%98%a5</wp:tag_slug><wp:tag_name><![CDATA[长春]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>216</wp:term_id><wp:tag_slug>%e9%98%85%e8%af%bb%e7%ac%94%e8%ae%b0</wp:tag_slug><wp:tag_name><![CDATA[阅读笔记]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>127</wp:term_id><wp:tag_slug>%e9%98%b6%e4%b9%98</wp:tag_slug><wp:tag_name><![CDATA[阶乘]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>80</wp:term_id><wp:tag_slug>%e9%9b%aa</wp:tag_slug><wp:tag_name><![CDATA[雪]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>53</wp:term_id><wp:tag_slug>%e9%9d%a2%e5%90%91%e5%af%b9%e8%b1%a1</wp:tag_slug><wp:tag_name><![CDATA[面向对象]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>130</wp:term_id><wp:tag_slug>%e9%a2%98%e8%a7%a3</wp:tag_slug><wp:tag_name><![CDATA[题解]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>72</wp:term_id><wp:tag_slug>%e9%ab%98%e7%b2%be%e5%ba%a6</wp:tag_slug><wp:tag_name><![CDATA[高精度]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>141</wp:term_id><wp:tag_slug>%e9%ab%98%e8%80%83</wp:tag_slug><wp:tag_name><![CDATA[高考]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>177</wp:term_id><wp:tag_slug>%e9%bb%91%e9%9b%aa%e5%a7%ac</wp:tag_slug><wp:tag_name><![CDATA[黑雪姬]]></wp:tag_name></wp:tag>
	<wp:term><wp:term_id>54</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>%e8%8f%9c%e5%8d%95</wp:term_slug><wp:term_name><![CDATA[菜单]]></wp:term_name></wp:term>
	<wp:term><wp:term_id>55</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>%e5%88%86%e7%b1%bb</wp:term_slug><wp:term_name><![CDATA[分类]]></wp:term_name></wp:term>
	<wp:term><wp:term_id>56</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>%e5%8f%8b%e6%83%85%e9%93%be%e6%8e%a5</wp:term_slug><wp:term_name><![CDATA[友情链接]]></wp:term_name></wp:term>
	<wp:term><wp:term_id>58</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>footer-menu</wp:term_slug><wp:term_name><![CDATA[Footer Menu]]></wp:term_name></wp:term>
	<wp:term><wp:term_id>57</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>navigation</wp:term_slug><wp:term_name><![CDATA[Navigation]]></wp:term_name></wp:term>

	

	<item>
		<title>Untitled-1</title>
		<link>http://www.aemiot.com/?attachment_id=195</link>
		<pubDate>Thu, 27 Dec 2012 07:54:55 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2012/12/Untitled-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>195</wp:post_id>
		<wp:post_date>2012-12-27 15:54:55</wp:post_date>
		<wp:post_date_gmt>2012-12-27 07:54:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>untitled-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2012/12/Untitled-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/12/Untitled-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:256;s:6:"height";i:256;s:4:"file";s:22:"2012/12/Untitled-1.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"Untitled-1-96x96.png";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:22:"Untitled-1-236x146.png";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:9:"image/png";}s:4:"huge";a:4:{s:4:"file";s:22:"Untitled-1-256x220.png";s:5:"width";i:256;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:6:"little";a:4:{s:4:"file";s:20:"Untitled-1-38x38.png";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>3f8211bab38fbaa8a4d966c25f0d4557</title>
		<link>http://www.aemiot.com/?attachment_id=206</link>
		<pubDate>Thu, 27 Dec 2012 15:20:42 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2012/12/3f8211bab38fbaa8a4d966c25f0d4557.ico</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date>2012-12-27 23:20:42</wp:post_date>
		<wp:post_date_gmt>2012-12-27 15:20:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>3f8211bab38fbaa8a4d966c25f0d4557</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2012/12/3f8211bab38fbaa8a4d966c25f0d4557.ico</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/12/3f8211bab38fbaa8a4d966c25f0d4557.ico]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1</title>
		<link>http://www.aemiot.com/char-int.html/attachment/1</link>
		<pubDate>Sat, 29 Dec 2012 11:39:57 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2012/12/1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>335</wp:post_id>
		<wp:post_date>2012-12-29 19:39:57</wp:post_date>
		<wp:post_date_gmt>2012-12-29 11:39:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>322</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2012/12/1.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/12/1.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:209;s:6:"height";i:178;s:4:"file";s:13:"2012/12/1.gif";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:11:"1-96x96.gif";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:13:"1-209x146.gif";s:5:"width";i:209;s:6:"height";i:146;s:9:"mime-type";s:9:"image/gif";}s:6:"little";a:4:{s:4:"file";s:11:"1-38x38.gif";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2</title>
		<link>http://www.aemiot.com/char-int.html/attachment/2</link>
		<pubDate>Sat, 29 Dec 2012 11:39:59 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2012/12/2.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>336</wp:post_id>
		<wp:post_date>2012-12-29 19:39:59</wp:post_date>
		<wp:post_date_gmt>2012-12-29 11:39:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>322</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2012/12/2.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/12/2.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:209;s:6:"height";i:178;s:4:"file";s:13:"2012/12/2.gif";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:11:"2-96x96.gif";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:13:"2-209x146.gif";s:5:"width";i:209;s:6:"height";i:146;s:9:"mime-type";s:9:"image/gif";}s:6:"little";a:4:{s:4:"file";s:11:"2-38x38.gif";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>3</title>
		<link>http://www.aemiot.com/char-int.html/attachment/3</link>
		<pubDate>Sat, 29 Dec 2012 11:40:00 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2012/12/3.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>337</wp:post_id>
		<wp:post_date>2012-12-29 19:40:00</wp:post_date>
		<wp:post_date_gmt>2012-12-29 11:40:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>322</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2012/12/3.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/12/3.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:209;s:6:"height";i:178;s:4:"file";s:13:"2012/12/3.gif";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:11:"3-96x96.gif";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:13:"3-209x146.gif";s:5:"width";i:209;s:6:"height";i:146;s:9:"mime-type";s:9:"image/gif";}s:6:"little";a:4:{s:4:"file";s:11:"3-38x38.gif";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>4</title>
		<link>http://www.aemiot.com/char-int.html/attachment/4</link>
		<pubDate>Sat, 29 Dec 2012 11:40:01 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2012/12/4.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>338</wp:post_id>
		<wp:post_date>2012-12-29 19:40:01</wp:post_date>
		<wp:post_date_gmt>2012-12-29 11:40:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>322</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2012/12/4.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/12/4.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:209;s:6:"height";i:178;s:4:"file";s:13:"2012/12/4.gif";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:11:"4-96x96.gif";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:13:"4-209x146.gif";s:5:"width";i:209;s:6:"height";i:146;s:9:"mime-type";s:9:"image/gif";}s:6:"little";a:4:{s:4:"file";s:11:"4-38x38.gif";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>snow1b</title>
		<link>http://www.aemiot.com/2013acm.html/snow1b</link>
		<pubDate>Fri, 04 Jan 2013 06:31:39 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/snow1b.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>389</wp:post_id>
		<wp:post_date>2013-01-04 14:31:39</wp:post_date>
		<wp:post_date_gmt>2013-01-04 06:31:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>snow1b</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>391</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/snow1b.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/snow1b.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:526;s:4:"file";s:18:"2013/01/snow1b.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"snow1b-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"snow1b-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:18:"snow1b-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:16:"snow1b-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";d:9;s:6:"credit";s:0:"";s:6:"camera";s:8:"DSC-W530";s:7:"caption";s:0:"";s:17:"created_timestamp";i:1357305998;s:9:"copyright";s:0:"";s:12:"focal_length";s:4:"6.74";s:3:"iso";s:2:"80";s:13:"shutter_speed";s:5:"0.008";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>snow2b</title>
		<link>http://www.aemiot.com/2013acm.html/snow2b</link>
		<pubDate>Fri, 04 Jan 2013 06:33:43 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/snow2b.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>390</wp:post_id>
		<wp:post_date>2013-01-04 14:33:43</wp:post_date>
		<wp:post_date_gmt>2013-01-04 06:33:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>snow2b</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>391</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/snow2b.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/snow2b.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:768;s:4:"file";s:18:"2013/01/snow2b.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"snow2b-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"snow2b-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:18:"snow2b-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:16:"snow2b-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";d:4.5;s:6:"credit";s:0:"";s:6:"camera";s:8:"DSC-W530";s:7:"caption";s:0:"";s:17:"created_timestamp";i:1357305879;s:9:"copyright";s:0:"";s:12:"focal_length";s:4:"11.2";s:3:"iso";s:2:"80";s:13:"shutter_speed";s:5:"0.002";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DSC01581</title>
		<link>http://www.aemiot.com/2013acm.html/dsc01581</link>
		<pubDate>Fri, 04 Jan 2013 06:58:26 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/DSC01581.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>393</wp:post_id>
		<wp:post_date>2013-01-04 14:58:26</wp:post_date>
		<wp:post_date_gmt>2013-01-04 06:58:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dsc01581</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>391</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/DSC01581.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/DSC01581.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:768;s:4:"file";s:20:"2013/01/DSC01581.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"DSC01581-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"DSC01581-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:20:"DSC01581-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:18:"DSC01581-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";d:2.70000000000000017763568394002504646778106689453125;s:6:"credit";s:0:"";s:6:"camera";s:8:"DSC-W530";s:7:"caption";s:0:"";s:17:"created_timestamp";i:1350494061;s:9:"copyright";s:0:"";s:12:"focal_length";s:3:"4.7";s:3:"iso";s:2:"80";s:13:"shutter_speed";s:6:"0.0125";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DSC01642</title>
		<link>http://www.aemiot.com/2013acm.html/dsc01642</link>
		<pubDate>Fri, 04 Jan 2013 06:59:16 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/DSC01642.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>394</wp:post_id>
		<wp:post_date>2013-01-04 14:59:16</wp:post_date>
		<wp:post_date_gmt>2013-01-04 06:59:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dsc01642</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>391</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/DSC01642.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/DSC01642.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1024;s:6:"height";i:768;s:4:"file";s:20:"2013/01/DSC01642.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"DSC01642-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"DSC01642-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:20:"DSC01642-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:18:"DSC01642-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";d:2.70000000000000017763568394002504646778106689453125;s:6:"credit";s:0:"";s:6:"camera";s:8:"DSC-W530";s:7:"caption";s:0:"";s:17:"created_timestamp";i:1353310087;s:9:"copyright";s:0:"";s:12:"focal_length";s:3:"4.7";s:3:"iso";s:3:"400";s:13:"shutter_speed";s:5:"0.125";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen2013_1_14_16_20_32</title>
		<link>http://www.aemiot.com/xj5bf.html/screen2013_1_14_16_20_32</link>
		<pubDate>Fri, 18 Jan 2013 19:07:11 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_14_16_20_32.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>441</wp:post_id>
		<wp:post_date>2013-01-19 03:07:11</wp:post_date>
		<wp:post_date_gmt>2013-01-18 19:07:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screen2013_1_14_16_20_32</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>451</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_14_16_20_32.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/screen2013_1_14_16_20_32.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:711;s:6:"height";i:400;s:4:"file";s:36:"2013/01/screen2013_1_14_16_20_32.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"screen2013_1_14_16_20_32-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:36:"screen2013_1_14_16_20_32-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:36:"screen2013_1_14_16_20_32-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:34:"screen2013_1_14_16_20_32-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen2013_1_14_17_40_5</title>
		<link>http://www.aemiot.com/xj5bf.html/screen2013_1_14_17_40_5</link>
		<pubDate>Fri, 18 Jan 2013 19:13:24 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_14_17_40_5.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>442</wp:post_id>
		<wp:post_date>2013-01-19 03:13:24</wp:post_date>
		<wp:post_date_gmt>2013-01-18 19:13:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screen2013_1_14_17_40_5</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>451</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_14_17_40_5.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/screen2013_1_14_17_40_5.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:711;s:6:"height";i:400;s:4:"file";s:35:"2013/01/screen2013_1_14_17_40_5.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:33:"screen2013_1_14_17_40_5-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:35:"screen2013_1_14_17_40_5-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:35:"screen2013_1_14_17_40_5-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:33:"screen2013_1_14_17_40_5-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen2013_1_15_6_10_32</title>
		<link>http://www.aemiot.com/xj5bf.html/screen2013_1_15_6_10_32</link>
		<pubDate>Fri, 18 Jan 2013 19:13:30 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_6_10_32.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>443</wp:post_id>
		<wp:post_date>2013-01-19 03:13:30</wp:post_date>
		<wp:post_date_gmt>2013-01-18 19:13:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screen2013_1_15_6_10_32</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>451</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_6_10_32.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/screen2013_1_15_6_10_32.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:711;s:6:"height";i:400;s:4:"file";s:35:"2013/01/screen2013_1_15_6_10_32.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:33:"screen2013_1_15_6_10_32-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:35:"screen2013_1_15_6_10_32-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:35:"screen2013_1_15_6_10_32-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:33:"screen2013_1_15_6_10_32-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen2013_1_15_11_23_42</title>
		<link>http://www.aemiot.com/xj5bf.html/screen2013_1_15_11_23_42</link>
		<pubDate>Fri, 18 Jan 2013 19:13:53 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_11_23_42.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>444</wp:post_id>
		<wp:post_date>2013-01-19 03:13:53</wp:post_date>
		<wp:post_date_gmt>2013-01-18 19:13:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screen2013_1_15_11_23_42</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>451</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_11_23_42.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/screen2013_1_15_11_23_42.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:711;s:6:"height";i:400;s:4:"file";s:36:"2013/01/screen2013_1_15_11_23_42.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"screen2013_1_15_11_23_42-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:36:"screen2013_1_15_11_23_42-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:36:"screen2013_1_15_11_23_42-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:34:"screen2013_1_15_11_23_42-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen2013_1_15_11_38_15</title>
		<link>http://www.aemiot.com/xj5bf.html/screen2013_1_15_11_38_15</link>
		<pubDate>Fri, 18 Jan 2013 19:14:00 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_11_38_15.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>445</wp:post_id>
		<wp:post_date>2013-01-19 03:14:00</wp:post_date>
		<wp:post_date_gmt>2013-01-18 19:14:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screen2013_1_15_11_38_15</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>451</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_11_38_15.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/screen2013_1_15_11_38_15.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:711;s:6:"height";i:400;s:4:"file";s:36:"2013/01/screen2013_1_15_11_38_15.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"screen2013_1_15_11_38_15-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:36:"screen2013_1_15_11_38_15-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:36:"screen2013_1_15_11_38_15-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:34:"screen2013_1_15_11_38_15-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen2013_1_16_14_27_40</title>
		<link>http://www.aemiot.com/xj5bf.html/screen2013_1_16_14_27_40</link>
		<pubDate>Fri, 18 Jan 2013 19:14:07 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_16_14_27_40.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>446</wp:post_id>
		<wp:post_date>2013-01-19 03:14:07</wp:post_date>
		<wp:post_date_gmt>2013-01-18 19:14:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screen2013_1_16_14_27_40</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>451</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_16_14_27_40.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/screen2013_1_16_14_27_40.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:711;s:6:"height";i:400;s:4:"file";s:36:"2013/01/screen2013_1_16_14_27_40.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"screen2013_1_16_14_27_40-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:36:"screen2013_1_16_14_27_40-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:36:"screen2013_1_16_14_27_40-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:34:"screen2013_1_16_14_27_40-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen2013_1_15_13_17_19</title>
		<link>http://www.aemiot.com/xj5bf.html/screen2013_1_15_13_17_19</link>
		<pubDate>Fri, 18 Jan 2013 19:14:07 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_13_17_19.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>447</wp:post_id>
		<wp:post_date>2013-01-19 03:14:07</wp:post_date>
		<wp:post_date_gmt>2013-01-18 19:14:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screen2013_1_15_13_17_19</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>451</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_13_17_19.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/screen2013_1_15_13_17_19.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:711;s:6:"height";i:400;s:4:"file";s:36:"2013/01/screen2013_1_15_13_17_19.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"screen2013_1_15_13_17_19-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:36:"screen2013_1_15_13_17_19-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:36:"screen2013_1_15_13_17_19-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:34:"screen2013_1_15_13_17_19-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen2013_1_17_11_56_42</title>
		<link>http://www.aemiot.com/xj5bf.html/screen2013_1_17_11_56_42</link>
		<pubDate>Fri, 18 Jan 2013 19:14:11 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_17_11_56_42.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>448</wp:post_id>
		<wp:post_date>2013-01-19 03:14:11</wp:post_date>
		<wp:post_date_gmt>2013-01-18 19:14:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screen2013_1_17_11_56_42</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>451</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_17_11_56_42.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/screen2013_1_17_11_56_42.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:711;s:6:"height";i:400;s:4:"file";s:36:"2013/01/screen2013_1_17_11_56_42.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"screen2013_1_17_11_56_42-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:36:"screen2013_1_17_11_56_42-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:36:"screen2013_1_17_11_56_42-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:34:"screen2013_1_17_11_56_42-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen2013_1_15_12_44_38</title>
		<link>http://www.aemiot.com/xj5bf.html/screen2013_1_15_12_44_38</link>
		<pubDate>Fri, 18 Jan 2013 19:17:15 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_12_44_38.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>450</wp:post_id>
		<wp:post_date>2013-01-19 03:17:15</wp:post_date>
		<wp:post_date_gmt>2013-01-18 19:17:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screen2013_1_15_12_44_38</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>451</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_12_44_38.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/screen2013_1_15_12_44_38.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:711;s:6:"height";i:400;s:4:"file";s:36:"2013/01/screen2013_1_15_12_44_38.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"screen2013_1_15_12_44_38-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:36:"screen2013_1_15_12_44_38-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:36:"screen2013_1_15_12_44_38-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:34:"screen2013_1_15_12_44_38-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen2013_1_17_16_35_44</title>
		<link>http://www.aemiot.com/xj5bf.html/screen2013_1_17_16_35_44</link>
		<pubDate>Fri, 18 Jan 2013 21:11:29 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_17_16_35_44.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>462</wp:post_id>
		<wp:post_date>2013-01-19 05:11:29</wp:post_date>
		<wp:post_date_gmt>2013-01-18 21:11:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screen2013_1_17_16_35_44</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>451</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_17_16_35_44.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/screen2013_1_17_16_35_44.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:711;s:6:"height";i:400;s:4:"file";s:36:"2013/01/screen2013_1_17_16_35_44.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:34:"screen2013_1_17_16_35_44-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:36:"screen2013_1_17_16_35_44-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:36:"screen2013_1_17_16_35_44-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:34:"screen2013_1_17_16_35_44-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen2013_1_15_11_50_2</title>
		<link>http://www.aemiot.com/xj5bf.html/screen2013_1_15_11_50_2</link>
		<pubDate>Sat, 19 Jan 2013 03:37:32 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_11_50_2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>477</wp:post_id>
		<wp:post_date>2013-01-19 11:37:32</wp:post_date>
		<wp:post_date_gmt>2013-01-19 03:37:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screen2013_1_15_11_50_2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>451</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_11_50_2.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/screen2013_1_15_11_50_2.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:711;s:6:"height";i:400;s:4:"file";s:35:"2013/01/screen2013_1_15_11_50_2.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:33:"screen2013_1_15_11_50_2-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:35:"screen2013_1_15_11_50_2-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:35:"screen2013_1_15_11_50_2-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:33:"screen2013_1_15_11_50_2-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>211px x 115px</title>
		<link>http://www.aemiot.com/?attachment_id=483</link>
		<pubDate>Tue, 22 Jan 2013 16:21:43 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/211px-x-115px.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>483</wp:post_id>
		<wp:post_date>2013-01-23 00:21:43</wp:post_date>
		<wp:post_date_gmt>2013-01-22 16:21:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>211px-x-115px</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/211px-x-115px.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:211;s:6:"height";i:115;s:4:"file";s:25:"2013/01/211px-x-115px.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:23:"211px-x-115px-96x96.png";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/png";}s:6:"little";a:4:{s:4:"file";s:23:"211px-x-115px-38x38.png";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/211px-x-115px.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>4</title>
		<link>http://www.aemiot.com/?attachment_id=488</link>
		<pubDate>Tue, 22 Jan 2013 17:08:18 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/4.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>488</wp:post_id>
		<wp:post_date>2013-01-23 01:08:18</wp:post_date>
		<wp:post_date_gmt>2013-01-22 17:08:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>4-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/4.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/4.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:848;s:6:"height";i:670;s:4:"file";s:13:"2013/01/4.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:11:"4-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:13:"4-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:13:"4-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:11:"4-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1</title>
		<link>http://www.aemiot.com/?attachment_id=489</link>
		<pubDate>Tue, 22 Jan 2013 17:08:21 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>489</wp:post_id>
		<wp:post_date>2013-01-23 01:08:21</wp:post_date>
		<wp:post_date_gmt>2013-01-22 17:08:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>1-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:848;s:6:"height";i:670;s:4:"file";s:13:"2013/01/1.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:11:"1-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:13:"1-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:13:"1-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:11:"1-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>3</title>
		<link>http://www.aemiot.com/?attachment_id=490</link>
		<pubDate>Tue, 22 Jan 2013 17:08:24 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/3.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>490</wp:post_id>
		<wp:post_date>2013-01-23 01:08:24</wp:post_date>
		<wp:post_date_gmt>2013-01-22 17:08:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>3-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/3.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:848;s:6:"height";i:670;s:4:"file";s:13:"2013/01/3.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:11:"3-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:13:"3-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:13:"3-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:11:"3-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/3.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2</title>
		<link>http://www.aemiot.com/?attachment_id=491</link>
		<pubDate>Tue, 22 Jan 2013 17:08:28 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>491</wp:post_id>
		<wp:post_date>2013-01-23 01:08:28</wp:post_date>
		<wp:post_date_gmt>2013-01-22 17:08:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>2-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/2.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/2.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:848;s:6:"height";i:670;s:4:"file";s:13:"2013/01/2.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:11:"2-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:13:"2-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:13:"2-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:11:"2-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>5</title>
		<link>http://www.aemiot.com/?attachment_id=492</link>
		<pubDate>Tue, 22 Jan 2013 17:08:31 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/5.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>492</wp:post_id>
		<wp:post_date>2013-01-23 01:08:31</wp:post_date>
		<wp:post_date_gmt>2013-01-22 17:08:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>5</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/5.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/5.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:848;s:6:"height";i:670;s:4:"file";s:13:"2013/01/5.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:11:"5-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:13:"5-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:13:"5-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:11:"5-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>x5logo</title>
		<link>http://www.aemiot.com/?attachment_id=531</link>
		<pubDate>Fri, 25 Jan 2013 12:08:17 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/x5logo.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>531</wp:post_id>
		<wp:post_date>2013-01-25 20:08:17</wp:post_date>
		<wp:post_date_gmt>2013-01-25 12:08:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>x5logo</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/x5logo.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/x5logo.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:423;s:6:"height";i:263;s:4:"file";s:18:"2013/01/x5logo.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"x5logo-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"x5logo-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:18:"x5logo-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:16:"x5logo-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mail</title>
		<link>http://www.aemiot.com/163mail.html/mail</link>
		<pubDate>Sat, 26 Jan 2013 23:08:10 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/01/mail.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>556</wp:post_id>
		<wp:post_date>2013-01-27 07:08:10</wp:post_date>
		<wp:post_date_gmt>2013-01-26 23:08:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mail</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>554</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/01/mail.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/01/mail.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:237;s:6:"height";i:147;s:4:"file";s:16:"2013/01/mail.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:14:"mail-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:16:"mail-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:14:"mail-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>book1_1</title>
		<link>http://www.aemiot.com/book1.html/book1_1</link>
		<pubDate>Fri, 08 Feb 2013 09:52:54 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/02/book1_1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>608</wp:post_id>
		<wp:post_date>2013-02-08 17:52:54</wp:post_date>
		<wp:post_date_gmt>2013-02-08 09:52:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>book1_1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>596</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/02/book1_1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/book1_1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:527;s:6:"height";i:768;s:4:"file";s:19:"2013/02/book1_1.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:17:"book1_1-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:19:"book1_1-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:19:"book1_1-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:17:"book1_1-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>001_bak</title>
		<link>http://www.aemiot.com/cth670.html/%e6%9c%aa%e6%a0%87%e9%a2%98-7_001_bak</link>
		<pubDate>Fri, 22 Feb 2013 14:30:40 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/02/未标题-7_001_bak.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>649</wp:post_id>
		<wp:post_date>2013-02-22 22:30:40</wp:post_date>
		<wp:post_date_gmt>2013-02-22 14:30:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%9c%aa%e6%a0%87%e9%a2%98-7_001_bak</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>647</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/02/未标题-7_001_bak.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/未标题-7_001_bak.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:369;s:6:"height";i:303;s:4:"file";s:31:"2013/02/未标题-7_001_bak.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"未标题-7_001_bak-96x96.png";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:31:"未标题-7_001_bak-236x146.png";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:9:"image/png";}s:4:"huge";a:4:{s:4:"file";s:31:"未标题-7_001_bak-369x220.png";s:5:"width";i:369;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:6:"little";a:4:{s:4:"file";s:29:"未标题-7_001_bak-38x38.png";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1</title>
		<link>http://www.aemiot.com/cth670.html/1-3</link>
		<pubDate>Fri, 22 Feb 2013 14:38:52 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/02/1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>654</wp:post_id>
		<wp:post_date>2013-02-22 22:38:52</wp:post_date>
		<wp:post_date_gmt>2013-02-22 14:38:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>1-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>647</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/02/1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:659;s:6:"height";i:451;s:4:"file";s:13:"2013/02/1.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:11:"1-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:13:"1-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:13:"1-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:11:"1-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2</title>
		<link>http://www.aemiot.com/cth670.html/2-3</link>
		<pubDate>Fri, 22 Feb 2013 14:42:59 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/02/2.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>658</wp:post_id>
		<wp:post_date>2013-02-22 22:42:59</wp:post_date>
		<wp:post_date_gmt>2013-02-22 14:42:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>2-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>647</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/02/2.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/2.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:376;s:6:"height";i:601;s:4:"file";s:13:"2013/02/2.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:11:"2-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:13:"2-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:13:"2-376x220.jpg";s:5:"width";i:376;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:11:"2-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>20130227001149</title>
		<link>http://www.aemiot.com/94noi-guote.html/attachment/20130227001149</link>
		<pubDate>Tue, 26 Feb 2013 16:12:34 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/02/20130227001149.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>687</wp:post_id>
		<wp:post_date>2013-02-27 00:12:34</wp:post_date>
		<wp:post_date_gmt>2013-02-26 16:12:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>20130227001149</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>686</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/02/20130227001149.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/20130227001149.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:521;s:6:"height";i:288;s:4:"file";s:26:"2013/02/20130227001149.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"20130227001149-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:26:"20130227001149-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:26:"20130227001149-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:24:"20130227001149-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>20130227005252</title>
		<link>http://www.aemiot.com/94noi-guote.html/attachment/20130227005252</link>
		<pubDate>Tue, 26 Feb 2013 16:55:46 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/02/20130227005252.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>689</wp:post_id>
		<wp:post_date>2013-02-27 00:55:46</wp:post_date>
		<wp:post_date_gmt>2013-02-26 16:55:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>20130227005252</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>686</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/02/20130227005252.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/20130227005252.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:571;s:6:"height";i:296;s:4:"file";s:26:"2013/02/20130227005252.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"20130227005252-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:26:"20130227005252-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:26:"20130227005252-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:24:"20130227005252-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>20130228223225</title>
		<link>http://www.aemiot.com/bardrop.html/attachment/20130228223225</link>
		<pubDate>Thu, 28 Feb 2013 14:58:23 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/02/20130228223225.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>714</wp:post_id>
		<wp:post_date>2013-02-28 22:58:23</wp:post_date>
		<wp:post_date_gmt>2013-02-28 14:58:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>20130228223225</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>694</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/02/20130228223225.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/02/20130228223225.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:297;s:6:"height";i:292;s:4:"file";s:26:"2013/02/20130228223225.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"20130228223225-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:26:"20130228223225-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:26:"20130228223225-297x220.jpg";s:5:"width";i:297;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:24:"20130228223225-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>20130316143025</title>
		<link>http://www.aemiot.com/simple-dcap.html/attachment/20130316143025</link>
		<pubDate>Sat, 16 Mar 2013 06:45:57 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/03/20130316143025.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>733</wp:post_id>
		<wp:post_date>2013-03-16 14:45:57</wp:post_date>
		<wp:post_date_gmt>2013-03-16 06:45:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>20130316143025</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>729</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/03/20130316143025.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/03/20130316143025.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:596;s:6:"height";i:388;s:4:"file";s:26:"2013/03/20130316143025.gif";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"20130316143025-96x96.gif";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:26:"20130316143025-236x146.gif";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:9:"image/gif";}s:4:"huge";a:4:{s:4:"file";s:26:"20130316143025-392x220.gif";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:9:"image/gif";}s:6:"little";a:4:{s:4:"file";s:24:"20130316143025-38x38.gif";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>acmother</title>
		<link>http://www.aemiot.com/acm-other1.html/acmother</link>
		<pubDate>Tue, 02 Apr 2013 18:50:56 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/04/acmother.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>770</wp:post_id>
		<wp:post_date>2013-04-03 02:50:56</wp:post_date>
		<wp:post_date_gmt>2013-04-02 18:50:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>acmother</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>766</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/04/acmother.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/acmother.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1055;s:6:"height";i:39;s:4:"file";s:20:"2013/04/acmother.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"acmother-96x39.jpg";s:5:"width";i:96;s:6:"height";i:39;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:19:"acmother-236x39.jpg";s:5:"width";i:236;s:6:"height";i:39;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:20:"acmother-1024x37.jpg";s:5:"width";i:1024;s:6:"height";i:37;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:19:"acmother-392x39.jpg";s:5:"width";i:392;s:6:"height";i:39;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:18:"acmother-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1012-1</title>
		<link>http://www.aemiot.com/acm-other1.html/1012-1</link>
		<pubDate>Wed, 03 Apr 2013 16:30:36 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/04/1012-1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>782</wp:post_id>
		<wp:post_date>2013-04-04 00:30:36</wp:post_date>
		<wp:post_date_gmt>2013-04-03 16:30:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>1012-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>766</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/04/1012-1.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/1012-1.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:72;s:6:"height";i:52;s:4:"file";s:18:"2013/04/1012-1.gif";s:5:"sizes";a:1:{s:6:"little";a:4:{s:4:"file";s:16:"1012-1-38x38.gif";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1056-1</title>
		<link>http://www.aemiot.com/acm-other1.html/1056-1</link>
		<pubDate>Wed, 03 Apr 2013 16:48:41 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/04/1056-1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>784</wp:post_id>
		<wp:post_date>2013-04-04 00:48:41</wp:post_date>
		<wp:post_date_gmt>2013-04-03 16:48:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>1056-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>766</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/04/1056-1.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/04/1056-1.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:513;s:6:"height";i:144;s:4:"file";s:18:"2013/04/1056-1.gif";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"1056-1-96x96.gif";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:18:"1056-1-236x144.gif";s:5:"width";i:236;s:6:"height";i:144;s:9:"mime-type";s:9:"image/gif";}s:4:"huge";a:4:{s:4:"file";s:18:"1056-1-392x144.gif";s:5:"width";i:392;s:6:"height";i:144;s:9:"mime-type";s:9:"image/gif";}s:6:"little";a:4:{s:4:"file";s:16:"1056-1-38x38.gif";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>primer</title>
		<link>http://www.aemiot.com/fx-cplusplusprimer.html/primer</link>
		<pubDate>Thu, 30 May 2013 14:22:50 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/05/primer.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>847</wp:post_id>
		<wp:post_date>2013-05-30 22:22:50</wp:post_date>
		<wp:post_date_gmt>2013-05-30 14:22:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>primer</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>846</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/05/primer.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/05/primer.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:494;s:6:"height";i:607;s:4:"file";s:18:"2013/05/primer.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:16:"primer-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:18:"primer-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:18:"primer-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:16:"primer-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>xds-1</title>
		<link>http://www.aemiot.com/xds-6-1.html/xds-1</link>
		<pubDate>Fri, 31 May 2013 16:39:47 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/06/xds-1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>858</wp:post_id>
		<wp:post_date>2013-06-01 00:39:47</wp:post_date>
		<wp:post_date_gmt>2013-05-31 16:39:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xds-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>851</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/06/xds-1.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/xds-1.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:318;s:4:"file";s:17:"2013/06/xds-1.gif";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"xds-1-96x96.gif";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:17:"xds-1-236x146.gif";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:9:"image/gif";}s:4:"huge";a:4:{s:4:"file";s:17:"xds-1-392x220.gif";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:9:"image/gif";}s:6:"little";a:4:{s:4:"file";s:15:"xds-1-38x38.gif";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>xds-2</title>
		<link>http://www.aemiot.com/xds-6-1.html/xds-2</link>
		<pubDate>Fri, 31 May 2013 16:44:18 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/06/xds-2.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>859</wp:post_id>
		<wp:post_date>2013-06-01 00:44:18</wp:post_date>
		<wp:post_date_gmt>2013-05-31 16:44:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xds-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>851</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/06/xds-2.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/xds-2.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:318;s:4:"file";s:17:"2013/06/xds-2.gif";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"xds-2-96x96.gif";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:17:"xds-2-236x146.gif";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:9:"image/gif";}s:4:"huge";a:4:{s:4:"file";s:17:"xds-2-392x220.gif";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:9:"image/gif";}s:6:"little";a:4:{s:4:"file";s:15:"xds-2-38x38.gif";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>xds-3</title>
		<link>http://www.aemiot.com/xds-6-1.html/xds-3</link>
		<pubDate>Fri, 31 May 2013 16:44:45 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/06/xds-3.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>860</wp:post_id>
		<wp:post_date>2013-06-01 00:44:45</wp:post_date>
		<wp:post_date_gmt>2013-05-31 16:44:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xds-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>851</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/06/xds-3.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/xds-3.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:318;s:4:"file";s:17:"2013/06/xds-3.gif";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"xds-3-96x96.gif";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:17:"xds-3-236x146.gif";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:9:"image/gif";}s:4:"huge";a:4:{s:4:"file";s:17:"xds-3-392x220.gif";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:9:"image/gif";}s:6:"little";a:4:{s:4:"file";s:15:"xds-3-38x38.gif";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>xds-4</title>
		<link>http://www.aemiot.com/xds-6-1.html/xds-4</link>
		<pubDate>Fri, 31 May 2013 16:44:56 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/06/xds-4.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>861</wp:post_id>
		<wp:post_date>2013-06-01 00:44:56</wp:post_date>
		<wp:post_date_gmt>2013-05-31 16:44:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xds-4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>851</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/06/xds-4.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/xds-4.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:400;s:6:"height";i:318;s:4:"file";s:17:"2013/06/xds-4.gif";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:15:"xds-4-96x96.gif";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:17:"xds-4-236x146.gif";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:9:"image/gif";}s:4:"huge";a:4:{s:4:"file";s:17:"xds-4-392x220.gif";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:9:"image/gif";}s:6:"little";a:4:{s:4:"file";s:15:"xds-4-38x38.gif";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dcap-sample</title>
		<link>http://www.aemiot.com/dcap-2b-sub.html/dcap-sample</link>
		<pubDate>Fri, 07 Jun 2013 15:47:14 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/06/dcap-sample.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>888</wp:post_id>
		<wp:post_date>2013-06-07 23:47:14</wp:post_date>
		<wp:post_date_gmt>2013-06-07 15:47:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dcap-sample</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>887</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/06/dcap-sample.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/dcap-sample.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:578;s:6:"height";i:310;s:4:"file";s:23:"2013/06/dcap-sample.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"dcap-sample-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:23:"dcap-sample-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:23:"dcap-sample-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:21:"dcap-sample-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dcap-shu</title>
		<link>http://www.aemiot.com/dcap-2b-sub.html/dcap-shu</link>
		<pubDate>Sat, 08 Jun 2013 17:07:44 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/06/dcap-shu.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>927</wp:post_id>
		<wp:post_date>2013-06-09 01:07:44</wp:post_date>
		<wp:post_date_gmt>2013-06-08 17:07:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dcap-shu</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>887</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/06/dcap-shu.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/dcap-shu.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:578;s:6:"height";i:310;s:4:"file";s:20:"2013/06/dcap-shu.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:18:"dcap-shu-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:20:"dcap-shu-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:20:"dcap-shu-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:18:"dcap-shu-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dcap-yushu</title>
		<link>http://www.aemiot.com/dcap-2b-sub.html/dcap-yushu</link>
		<pubDate>Sat, 08 Jun 2013 17:08:44 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/06/dcap-yushu.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>928</wp:post_id>
		<wp:post_date>2013-06-09 01:08:44</wp:post_date>
		<wp:post_date_gmt>2013-06-08 17:08:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dcap-yushu</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>887</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/06/dcap-yushu.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/dcap-yushu.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:578;s:6:"height";i:310;s:4:"file";s:22:"2013/06/dcap-yushu.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:20:"dcap-yushu-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:22:"dcap-yushu-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:22:"dcap-yushu-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:20:"dcap-yushu-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dcap-tshu</title>
		<link>http://www.aemiot.com/dcap-2b-sub.html/dcap-tshu</link>
		<pubDate>Sat, 08 Jun 2013 17:35:37 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/06/dcap-tshu.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>932</wp:post_id>
		<wp:post_date>2013-06-09 01:35:37</wp:post_date>
		<wp:post_date_gmt>2013-06-08 17:35:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dcap-tshu</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>887</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/06/dcap-tshu.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/dcap-tshu.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:578;s:6:"height";i:310;s:4:"file";s:21:"2013/06/dcap-tshu.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"dcap-tshu-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:21:"dcap-tshu-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:21:"dcap-tshu-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:19:"dcap-tshu-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dcap-tyushu</title>
		<link>http://www.aemiot.com/dcap-2b-sub.html/dcap-tyushu</link>
		<pubDate>Sat, 08 Jun 2013 17:36:03 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/06/dcap-tyushu.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>933</wp:post_id>
		<wp:post_date>2013-06-09 01:36:03</wp:post_date>
		<wp:post_date_gmt>2013-06-08 17:36:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dcap-tyushu</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>887</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/06/dcap-tyushu.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/dcap-tyushu.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:578;s:6:"height";i:310;s:4:"file";s:23:"2013/06/dcap-tyushu.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"dcap-tyushu-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:23:"dcap-tyushu-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:23:"dcap-tyushu-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:21:"dcap-tyushu-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sierpinski-dot-1</title>
		<link>http://www.aemiot.com/sierpinski-1.html/sierpinski-dot-1</link>
		<pubDate>Wed, 26 Jun 2013 12:40:57 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/06/Sierpinski-dot-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>946</wp:post_id>
		<wp:post_date>2013-06-26 20:40:57</wp:post_date>
		<wp:post_date_gmt>2013-06-26 12:40:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sierpinski-dot-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>943</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/06/Sierpinski-dot-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/Sierpinski-dot-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:808;s:6:"height";i:634;s:4:"file";s:28:"2013/06/Sierpinski-dot-1.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"Sierpinski-dot-1-96x96.png";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"Sierpinski-dot-1-236x146.png";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:9:"image/png";}s:4:"huge";a:4:{s:4:"file";s:28:"Sierpinski-dot-1-392x220.png";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:6:"little";a:4:{s:4:"file";s:26:"Sierpinski-dot-1-38x38.png";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sierpinski-dot-2</title>
		<link>http://www.aemiot.com/sierpinski-1.html/sierpinski-dot-2</link>
		<pubDate>Wed, 26 Jun 2013 12:40:58 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/06/Sierpinski-dot-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>947</wp:post_id>
		<wp:post_date>2013-06-26 20:40:58</wp:post_date>
		<wp:post_date_gmt>2013-06-26 12:40:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sierpinski-dot-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>943</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/06/Sierpinski-dot-2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/Sierpinski-dot-2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:808;s:6:"height";i:634;s:4:"file";s:28:"2013/06/Sierpinski-dot-2.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"Sierpinski-dot-2-96x96.png";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"Sierpinski-dot-2-236x146.png";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:9:"image/png";}s:4:"huge";a:4:{s:4:"file";s:28:"Sierpinski-dot-2-392x220.png";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:6:"little";a:4:{s:4:"file";s:26:"Sierpinski-dot-2-38x38.png";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sierpinski-dot-3</title>
		<link>http://www.aemiot.com/sierpinski-1.html/sierpinski-dot-3</link>
		<pubDate>Wed, 26 Jun 2013 12:43:39 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/06/Sierpinski-dot-3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>949</wp:post_id>
		<wp:post_date>2013-06-26 20:43:39</wp:post_date>
		<wp:post_date_gmt>2013-06-26 12:43:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sierpinski-dot-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>943</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/06/Sierpinski-dot-3.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/06/Sierpinski-dot-3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:808;s:6:"height";i:634;s:4:"file";s:28:"2013/06/Sierpinski-dot-3.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:26:"Sierpinski-dot-3-96x96.png";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:28:"Sierpinski-dot-3-236x146.png";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:9:"image/png";}s:4:"huge";a:4:{s:4:"file";s:28:"Sierpinski-dot-3-392x220.png";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:6:"little";a:4:{s:4:"file";s:26:"Sierpinski-dot-3-38x38.png";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hdu-4092-1</title>
		<link>http://www.aemiot.com/hdu-problem-4092.html/hdu-4092-1</link>
		<pubDate>Tue, 09 Jul 2013 08:02:08 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-1.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>985</wp:post_id>
		<wp:post_date>2013-07-09 16:02:08</wp:post_date>
		<wp:post_date_gmt>2013-07-09 08:02:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hdu-4092-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>972</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-1.bmp</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/hdu-4092-1.bmp]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hdu-4092-2</title>
		<link>http://www.aemiot.com/hdu-problem-4092.html/hdu-4092-2</link>
		<pubDate>Tue, 09 Jul 2013 09:15:02 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-2.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>992</wp:post_id>
		<wp:post_date>2013-07-09 17:15:02</wp:post_date>
		<wp:post_date_gmt>2013-07-09 09:15:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hdu-4092-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>972</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-2.bmp</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/hdu-4092-2.bmp]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hdu-4092-3</title>
		<link>http://www.aemiot.com/hdu-problem-4092.html/hdu-4092-3</link>
		<pubDate>Tue, 09 Jul 2013 09:15:18 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-3.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>993</wp:post_id>
		<wp:post_date>2013-07-09 17:15:18</wp:post_date>
		<wp:post_date_gmt>2013-07-09 09:15:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hdu-4092-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>972</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-3.bmp</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/hdu-4092-3.bmp]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hdu-4092-4</title>
		<link>http://www.aemiot.com/hdu-problem-4092.html/hdu-4092-4</link>
		<pubDate>Tue, 09 Jul 2013 09:17:34 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-4.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>994</wp:post_id>
		<wp:post_date>2013-07-09 17:17:34</wp:post_date>
		<wp:post_date_gmt>2013-07-09 09:17:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hdu-4092-4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>972</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-4.bmp</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/hdu-4092-4.bmp]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hdu-4092-5</title>
		<link>http://www.aemiot.com/hdu-problem-4092.html/hdu-4092-5</link>
		<pubDate>Tue, 09 Jul 2013 09:24:03 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-5.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>996</wp:post_id>
		<wp:post_date>2013-07-09 17:24:03</wp:post_date>
		<wp:post_date_gmt>2013-07-09 09:24:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hdu-4092-5</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>972</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-5.bmp</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/hdu-4092-5.bmp]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hdu-4092-6</title>
		<link>http://www.aemiot.com/hdu-problem-4092.html/hdu-4092-6</link>
		<pubDate>Tue, 09 Jul 2013 11:48:55 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-6.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1000</wp:post_id>
		<wp:post_date>2013-07-09 19:48:55</wp:post_date>
		<wp:post_date_gmt>2013-07-09 11:48:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hdu-4092-6</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>972</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-6.bmp</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/hdu-4092-6.bmp]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hdu-4092-7</title>
		<link>http://www.aemiot.com/hdu-problem-4092.html/hdu-4092-7</link>
		<pubDate>Tue, 09 Jul 2013 11:55:34 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-7.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1001</wp:post_id>
		<wp:post_date>2013-07-09 19:55:34</wp:post_date>
		<wp:post_date_gmt>2013-07-09 11:55:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hdu-4092-7</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>972</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-7.bmp</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/07/hdu-4092-7.bmp]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>主页</title>
		<link>http://www.aemiot.com/%e4%b8%bb%e9%a1%b5.html</link>
		<pubDate>Wed, 26 Dec 2012 10:01:57 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=8</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2012-12-26 18:01:57</wp:post_date>
		<wp:post_date_gmt>2012-12-26 10:01:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%b8%bb%e9%a1%b5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95"><![CDATA[菜单]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[http://blog.aemcity.com/]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.aemiot.com/49.html</link>
		<pubDate>Wed, 26 Dec 2012 10:01:58 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=49</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date>2012-12-26 18:01:58</wp:post_date>
		<wp:post_date_gmt>2012-12-26 10:01:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>49</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>13</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="%e5%88%86%e7%b1%bb"><![CDATA[分类]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>江西师大12网络工程(物联网)</title>
		<link>http://www.aemiot.com/%e6%b1%9f%e8%a5%bf%e5%b8%88%e5%a4%a712%e7%bd%91%e7%bb%9c%e5%b7%a5%e7%a8%8b%e7%89%a9%e8%81%94%e7%bd%91.html</link>
		<pubDate>Wed, 26 Dec 2012 10:01:58 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=51</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date>2012-12-26 18:01:58</wp:post_date>
		<wp:post_date_gmt>2012-12-26 10:01:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%b1%9f%e8%a5%bf%e5%b8%88%e5%a4%a712%e7%bd%91%e7%bb%9c%e5%b7%a5%e7%a8%8b%e7%89%a9%e8%81%94%e7%bd%91</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="%e5%8f%8b%e6%83%85%e9%93%be%e6%8e%a5"><![CDATA[友情链接]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[51]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.siot.org]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>kdwycz&#039;s blog</title>
		<link>http://www.aemiot.com/kdwyczs-blog.html</link>
		<pubDate>Wed, 26 Dec 2012 10:01:58 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=52</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date>2012-12-26 18:01:58</wp:post_date>
		<wp:post_date_gmt>2012-12-26 10:01:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>kdwyczs-blog</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="%e5%8f%8b%e6%83%85%e9%93%be%e6%8e%a5"><![CDATA[友情链接]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[52]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[http://kdwycz.com/]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>支持我们-使用2345网站导航</title>
		<link>http://www.aemiot.com/%e6%94%af%e6%8c%81%e6%88%91%e4%bb%ac-%e4%bd%bf%e7%94%a82345%e7%bd%91%e7%ab%99%e5%af%bc%e8%88%aa.html</link>
		<pubDate>Wed, 26 Dec 2012 10:01:58 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=53</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date>2012-12-26 18:01:58</wp:post_date>
		<wp:post_date_gmt>2012-12-26 10:01:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%94%af%e6%8c%81%e6%88%91%e4%bb%ac-%e4%bd%bf%e7%94%a82345%e7%bd%91%e7%ab%99%e5%af%bc%e8%88%aa</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="%e5%8f%8b%e6%83%85%e9%93%be%e6%8e%a5"><![CDATA[友情链接]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[53]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.2345.com/?kaemc]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于</title>
		<link>http://www.aemiot.com/179.html</link>
		<pubDate>Wed, 26 Dec 2012 10:01:58 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=179</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>179</wp:post_id>
		<wp:post_date>2012-12-26 18:01:58</wp:post_date>
		<wp:post_date_gmt>2012-12-26 10:01:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>179</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95"><![CDATA[菜单]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.aemiot.com/180.html</link>
		<pubDate>Wed, 26 Dec 2012 10:01:58 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=180</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date>2012-12-26 18:01:58</wp:post_date>
		<wp:post_date_gmt>2012-12-26 10:01:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>180</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="%e8%8f%9c%e5%8d%95"><![CDATA[菜单]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[38]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>主页</title>
		<link>http://www.aemiot.com/%e4%b8%bb%e9%a1%b5-2.html</link>
		<pubDate>Thu, 27 Dec 2012 08:47:38 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=198</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date>2012-12-27 16:47:38</wp:post_date>
		<wp:post_date_gmt>2012-12-27 08:47:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%b8%bb%e9%a1%b5-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="navigation"><![CDATA[Navigation]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[198]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[/]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.aemiot.com/207.html</link>
		<pubDate>Fri, 28 Dec 2012 10:51:47 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=207</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>207</wp:post_id>
		<wp:post_date>2012-12-28 18:51:47</wp:post_date>
		<wp:post_date_gmt>2012-12-28 10:51:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>207</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>13</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="navigation"><![CDATA[Navigation]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.aemiot.com/220.html</link>
		<pubDate>Fri, 28 Dec 2012 11:37:45 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=220</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date>2012-12-28 19:37:45</wp:post_date>
		<wp:post_date_gmt>2012-12-28 11:37:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>220</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="navigation"><![CDATA[Navigation]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[213]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ACM-LRJ-1</title>
		<link>http://www.aemiot.com/acm-lrj-01.html/acm-lrj-1</link>
		<pubDate>Mon, 09 Sep 2013 04:45:14 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/09/ACM-LRJ-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1062</wp:post_id>
		<wp:post_date>2013-09-09 12:45:14</wp:post_date>
		<wp:post_date_gmt>2013-09-09 04:45:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>acm-lrj-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>1058</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/09/ACM-LRJ-1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/09/ACM-LRJ-1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:419;s:6:"height";i:575;s:4:"file";s:21:"2013/09/ACM-LRJ-1.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"ACM-LRJ-1-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:21:"ACM-LRJ-1-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:21:"ACM-LRJ-1-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:19:"ACM-LRJ-1-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>acm-haibao-1</title>
		<link>http://www.aemiot.com/acm-haibao-1.html/acm-haibao-1</link>
		<pubDate>Wed, 25 Sep 2013 02:45:19 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/09/acm-haibao-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1076</wp:post_id>
		<wp:post_date>2013-09-25 10:45:19</wp:post_date>
		<wp:post_date_gmt>2013-09-25 02:45:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>acm-haibao-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>1075</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/09/acm-haibao-1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/09/acm-haibao-1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:555;s:6:"height";i:767;s:4:"file";s:24:"2013/09/acm-haibao-1.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"acm-haibao-1-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:24:"acm-haibao-1-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:24:"acm-haibao-1-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:22:"acm-haibao-1-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>UvaOj-10071</title>
		<link>http://www.aemiot.com/uvaoj-10071.html/uvaoj-10071</link>
		<pubDate>Tue, 22 Oct 2013 05:49:32 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2013/10/UvaOj-10071.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1107</wp:post_id>
		<wp:post_date>2013-10-22 13:49:32</wp:post_date>
		<wp:post_date_gmt>2013-10-22 05:49:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>uvaoj-10071</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>1106</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2013/10/UvaOj-10071.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2013/10/UvaOj-10071.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:565;s:6:"height";i:260;s:4:"file";s:23:"2013/10/UvaOj-10071.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:21:"UvaOj-10071-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:23:"UvaOj-10071-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:23:"UvaOj-10071-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:21:"UvaOj-10071-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>黑雪姬、春雪--动画上色法</title>
		<link>http://www.aemiot.com/smh-jssj-1.html/jssj-xjcx-last</link>
		<pubDate>Fri, 24 Jan 2014 20:01:37 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2014/01/jssj-xjcx-last.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[黑雪姬、春雪--动画上色法]]></content:encoded>
		<excerpt:encoded><![CDATA[黑雪姬、春雪--动画上色法]]></excerpt:encoded>
		<wp:post_id>1211</wp:post_id>
		<wp:post_date>2014-01-25 04:01:37</wp:post_date>
		<wp:post_date_gmt>2014-01-24 20:01:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jssj-xjcx-last</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>1177</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2014/01/jssj-xjcx-last.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1053;s:6:"height";i:744;s:4:"file";s:26:"2014/01/jssj-xjcx-last.jpg";s:5:"sizes";a:5:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"jssj-xjcx-last-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:26:"jssj-xjcx-last-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:5:"large";a:4:{s:4:"file";s:27:"jssj-xjcx-last-1024x723.jpg";s:5:"width";i:1024;s:6:"height";i:723;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:26:"jssj-xjcx-last-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:24:"jssj-xjcx-last-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[黑雪姬、春雪--动画上色法]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/01/jssj-xjcx-last.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>以管理员身份进入命令行模式</title>
		<link>http://www.aemiot.com/win8-1-program-kill-1.html/attachment/20140130001927</link>
		<pubDate>Wed, 29 Jan 2014 16:23:58 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2014/01/20140130001927.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[以管理员身份进入命令行模式]]></content:encoded>
		<excerpt:encoded><![CDATA[以管理员身份进入命令行模式]]></excerpt:encoded>
		<wp:post_id>1219</wp:post_id>
		<wp:post_date>2014-01-30 00:23:58</wp:post_date>
		<wp:post_date_gmt>2014-01-29 16:23:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>20140130001927</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>1218</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2014/01/20140130001927.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/01/20140130001927.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:427;s:6:"height";i:262;s:4:"file";s:26:"2014/01/20140130001927.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:24:"20140130001927-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:26:"20140130001927-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:26:"20140130001927-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:24:"20140130001927-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[以管理员身份进入命令行模式]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>raspi-001</title>
		<link>http://www.aemiot.com/raspberry-pi-001.html/raspi-001</link>
		<pubDate>Wed, 19 Feb 2014 14:46:44 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2014/02/raspi-001.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1230</wp:post_id>
		<wp:post_date>2014-02-19 22:46:44</wp:post_date>
		<wp:post_date_gmt>2014-02-19 14:46:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>raspi-001</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>1229</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2014/02/raspi-001.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:648;s:6:"height";i:486;s:4:"file";s:21:"2014/02/raspi-001.jpg";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:19:"raspi-001-96x96.jpg";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:10:"image/jpeg";}s:6:"medium";a:4:{s:4:"file";s:21:"raspi-001-236x146.jpg";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:10:"image/jpeg";}s:4:"huge";a:4:{s:4:"file";s:21:"raspi-001-392x220.jpg";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:10:"image/jpeg";}s:6:"little";a:4:{s:4:"file";s:19:"raspi-001-38x38.jpg";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:10:"image/jpeg";}}s:10:"image_meta";a:10:{s:8:"aperture";d:2.70000000000000017763568394002504646778106689453125;s:6:"credit";s:0:"";s:6:"camera";s:8:"DSC-W530";s:7:"caption";s:0:"";s:17:"created_timestamp";i:1392040086;s:9:"copyright";s:0:"";s:12:"focal_length";s:3:"4.7";s:3:"iso";s:3:"400";s:13:"shutter_speed";s:4:"0.04";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/02/raspi-001.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>graphivz-001</title>
		<link>http://www.aemiot.com/graphivz-001.html/graphivz-001-2</link>
		<pubDate>Wed, 05 Mar 2014 13:02:31 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2014/03/graphivz-001.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Graphivz显示中文示例图]]></excerpt:encoded>
		<wp:post_id>1288</wp:post_id>
		<wp:post_date>2014-03-05 21:02:31</wp:post_date>
		<wp:post_date_gmt>2014-03-05 13:02:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>graphivz-001-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>1279</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2014/03/graphivz-001.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:383;s:6:"height";i:155;s:4:"file";s:24:"2014/03/graphivz-001.gif";s:5:"sizes";a:3:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"graphivz-001-96x96.gif";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:24:"graphivz-001-236x146.gif";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:9:"image/gif";}s:6:"little";a:4:{s:4:"file";s:22:"graphivz-001-38x38.gif";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/graphivz-001.gif]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sicily-10330</title>
		<link>http://www.aemiot.com/sicily-10330.html/sicily-10330-2</link>
		<pubDate>Tue, 11 Mar 2014 05:44:19 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2014/03/sicily-10330.gif</guid>
		<description></description>
		<content:encoded><![CDATA[西西里岛10330解题示意图]]></content:encoded>
		<excerpt:encoded><![CDATA[西西里岛10330解题示意图]]></excerpt:encoded>
		<wp:post_id>1309</wp:post_id>
		<wp:post_date>2014-03-11 13:44:19</wp:post_date>
		<wp:post_date_gmt>2014-03-11 05:44:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sicily-10330-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>1303</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2014/03/sicily-10330.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/sicily-10330.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:549;s:6:"height";i:277;s:4:"file";s:24:"2014/03/sicily-10330.gif";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:22:"sicily-10330-96x96.gif";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:24:"sicily-10330-236x146.gif";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:9:"image/gif";}s:4:"huge";a:4:{s:4:"file";s:24:"sicily-10330-392x220.gif";s:5:"width";i:392;s:6:"height";i:220;s:9:"mime-type";s:9:"image/gif";}s:6:"little";a:4:{s:4:"file";s:22:"sicily-10330-38x38.gif";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
			<wp:meta_value><![CDATA[西西里岛10330解题示意图]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>truth-table-online-calculator</title>
		<link>http://www.aemiot.com/?attachment_id=1339</link>
		<pubDate>Tue, 01 Apr 2014 07:26:49 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2014/04/truth-table-online-calculator.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1339</wp:post_id>
		<wp:post_date>2014-04-01 15:26:49</wp:post_date>
		<wp:post_date_gmt>2014-04-01 07:26:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>truth-table-online-calculator</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2014/04/truth-table-online-calculator.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/04/truth-table-online-calculator.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:501;s:6:"height";i:216;s:4:"file";s:41:"2014/04/truth-table-online-calculator.gif";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:39:"truth-table-online-calculator-96x96.gif";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/gif";}s:6:"medium";a:4:{s:4:"file";s:41:"truth-table-online-calculator-236x146.gif";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:9:"image/gif";}s:4:"huge";a:4:{s:4:"file";s:41:"truth-table-online-calculator-392x216.gif";s:5:"width";i:392;s:6:"height";i:216;s:9:"mime-type";s:9:"image/gif";}s:6:"little";a:4:{s:4:"file";s:39:"truth-table-online-calculator-38x38.gif";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/gif";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CocosStudio-001</title>
		<link>http://www.aemiot.com/cocos-studio-bugfix-001.html/cocosstudio-001</link>
		<pubDate>Fri, 29 Aug 2014 19:23:03 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/wp-content/uploads/2014/08/CocosStudio-001.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1426</wp:post_id>
		<wp:post_date>2014-08-30 03:23:03</wp:post_date>
		<wp:post_date_gmt>2014-08-29 19:23:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cocosstudio-001</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>1422</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.aemiot.com/wp-content/uploads/2014/08/CocosStudio-001.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2014/08/CocosStudio-001.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:346;s:6:"height";i:234;s:4:"file";s:27:"2014/08/CocosStudio-001.png";s:5:"sizes";a:4:{s:9:"thumbnail";a:4:{s:4:"file";s:25:"CocosStudio-001-96x96.png";s:5:"width";i:96;s:6:"height";i:96;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:27:"CocosStudio-001-236x146.png";s:5:"width";i:236;s:6:"height";i:146;s:9:"mime-type";s:9:"image/png";}s:4:"huge";a:4:{s:4:"file";s:27:"CocosStudio-001-346x220.png";s:5:"width";i:346;s:6:"height";i:220;s:9:"mime-type";s:9:"image/png";}s:6:"little";a:4:{s:4:"file";s:25:"CocosStudio-001-38x38.png";s:5:"width";i:38;s:6:"height";i:38;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于</title>
		<link>http://www.aemiot.com/about</link>
		<pubDate>Sun, 23 Dec 2012 02:07:25 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://blog.aemiot.com/?page_id=20</guid>
		<description></description>
		<content:encoded><![CDATA[<h1><span style="color: #ff6600;"><strong>泛叶江湖 --- </strong></span></h1>
&nbsp;
<h1><strong>作者简介</strong></h1>

网名：
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 泛叶&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 泛一叶扁舟，游一世江湖
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 黄半仙&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 问情问道，故弄玄虚，煌如火炎

一枚移动互联网开发者~

欢迎交流。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2012-12-23 10:07:25</wp:post_date>
		<wp:post_date_gmt>2012-12-23 02:07:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869121]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>留言</title>
		<link>http://www.aemiot.com/ly</link>
		<pubDate>Sun, 23 Dec 2012 03:15:28 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://blog.aemiot.com/?page_id=38</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date>2012-12-23 11:15:28</wp:post_date>
		<wp:post_date_gmt>2012-12-23 03:15:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>ly</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[guestbook.php]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869122]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>77</wp:comment_id>
			<wp:comment_author><![CDATA[给老人买什么礼物好]]></wp:comment_author>
			<wp:comment_author_email>1148045106@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.yeyenainai.net</wp:comment_author_url>
			<wp:comment_author_IP>60.190.13.39</wp:comment_author_IP>
			<wp:comment_date>2013-02-12 16:15:17</wp:comment_date>
			<wp:comment_date_gmt>2013-02-12 08:15:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[美国空间不错啊，速度挺快。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_parent_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869120]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869164]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>67</wp:comment_id>
			<wp:comment_author><![CDATA[Vet]]></wp:comment_author>
			<wp:comment_author_email>328111131@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://网址（选填）</wp:comment_author_url>
			<wp:comment_author_IP>211.100.230.146</wp:comment_author_IP>
			<wp:comment_date>2013-01-25 14:24:13</wp:comment_date>
			<wp:comment_date_gmt>2013-01-25 06:24:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你好，请问你用的是什么空间？国外的吗？期待您的答复！]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1359095053.4299869537353515625;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>68</wp:comment_id>
			<wp:comment_author><![CDATA[Aem]]></wp:comment_author>
			<wp:comment_author_email>550939143@qq.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>111.76.174.176</wp:comment_author_IP>
			<wp:comment_date>2013-01-25 14:49:32</wp:comment_date>
			<wp:comment_date_gmt>2013-01-25 06:49:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="#comment-67" rel="nofollow">@Vet </a>SugarHosts的美国空间]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>67</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1359096572.303536891937255859375;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:3:"Aem";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>158</wp:comment_id>
			<wp:comment_author><![CDATA[追寻那逝去的心灵]]></wp:comment_author>
			<wp:comment_author_email>thatis1024@163.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.linfora.com</wp:comment_author_url>
			<wp:comment_author_IP>115.156.238.25</wp:comment_author_IP>
			<wp:comment_date>2014-01-16 18:36:07</wp:comment_date>
			<wp:comment_date_gmt>2014-01-16 10:36:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[支持一下搞技术的]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_parent_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869120]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869271]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>153</wp:comment_id>
			<wp:comment_author><![CDATA[Aem]]></wp:comment_author>
			<wp:comment_author_email>aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url>http://t.qq.com/yxx3372</wp:comment_author_url>
			<wp:comment_author_IP>171.34.104.144</wp:comment_author_IP>
			<wp:comment_date>2013-11-27 00:35:48</wp:comment_date>
			<wp:comment_date_gmt>2013-11-26 16:35:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[什么问题呢？不是有个说明么]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_parent_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869268]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869269]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>97</wp:comment_id>
			<wp:comment_author><![CDATA[山高水长]]></wp:comment_author>
			<wp:comment_author_email>124368758@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.teacher6.com</wp:comment_author_url>
			<wp:comment_author_IP>124.131.147.66</wp:comment_author_IP>
			<wp:comment_date>2013-04-17 22:27:50</wp:comment_date>
			<wp:comment_date_gmt>2013-04-17 14:27:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[美国空间速度不错啊]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_parent_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869120]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869206]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1411124468.3023779392242431640625;s:7:"message";s:31:"Eluckv 认定这是垃圾评论";s:5:"event";s:11:"report-spam";s:4:"user";s:6:"Eluckv";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[Eluckv]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1411124470.6810939311981201171875;s:7:"message";s:34:"Eluckv 认定这不是垃圾评论";s:5:"event";s:10:"report-ham";s:4:"user";s:6:"Eluckv";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>126</wp:comment_id>
			<wp:comment_author><![CDATA[程容和]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://t.qq.com/meilinga1314521</wp:comment_author_url>
			<wp:comment_author_IP>171.35.53.63</wp:comment_author_IP>
			<wp:comment_date>2013-06-09 09:19:02</wp:comment_date>
			<wp:comment_date_gmt>2013-06-09 01:19:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[这个博客是在哪注册的？]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_parent_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869120]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869247]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>127</wp:comment_id>
			<wp:comment_author><![CDATA[Aem]]></wp:comment_author>
			<wp:comment_author_email>aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url>http://t.qq.com/yxx3372</wp:comment_author_url>
			<wp:comment_author_IP>171.34.109.27</wp:comment_author_IP>
			<wp:comment_date>2013-06-10 23:14:24</wp:comment_date>
			<wp:comment_date_gmt>2013-06-10 15:14:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[这是独立博客 = =...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>126</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_parent_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869247]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869248]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>159</wp:comment_id>
			<wp:comment_author><![CDATA[Aem]]></wp:comment_author>
			<wp:comment_author_email>aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url>http://t.qq.com/yxx3372</wp:comment_author_url>
			<wp:comment_author_IP>117.170.200.70</wp:comment_author_IP>
			<wp:comment_date>2014-01-16 23:46:55</wp:comment_date>
			<wp:comment_date_gmt>2014-01-16 15:46:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[谢谢]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>158</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_parent_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869271]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869272]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>160</wp:comment_id>
			<wp:comment_author><![CDATA[ILOFI]]></wp:comment_author>
			<wp:comment_author_email>289364855@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://ILOFI.org</wp:comment_author_url>
			<wp:comment_author_IP>122.91.193.147</wp:comment_author_IP>
			<wp:comment_date>2014-01-31 23:31:46</wp:comment_date>
			<wp:comment_date_gmt>2014-01-31 15:31:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[支持一下ACMer，曾经是个OIer呵呵~]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_parent_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869120]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869273]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>161</wp:comment_id>
			<wp:comment_author><![CDATA[浮生若梦_meng丶]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://weibo.com/1836896452</wp:comment_author_url>
			<wp:comment_author_IP>118.247.116.91</wp:comment_author_IP>
			<wp:comment_date>2014-02-01 15:23:30</wp:comment_date>
			<wp:comment_date_gmt>2014-02-01 07:23:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[0.0   来踩踩你的博客，电脑达人+程序猿~]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_parent_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869120]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869274]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>162</wp:comment_id>
			<wp:comment_author><![CDATA[Aem]]></wp:comment_author>
			<wp:comment_author_email>aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url>http://t.qq.com/yxx3372</wp:comment_author_url>
			<wp:comment_author_IP>183.219.143.13</wp:comment_author_IP>
			<wp:comment_date>2014-02-01 19:37:53</wp:comment_date>
			<wp:comment_date_gmt>2014-02-01 11:37:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[曾经也是OIer  新年快乐~]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>160</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_parent_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869273]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869275]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>163</wp:comment_id>
			<wp:comment_author><![CDATA[Aem]]></wp:comment_author>
			<wp:comment_author_email>aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url>http://t.qq.com/yxx3372</wp:comment_author_url>
			<wp:comment_author_IP>183.219.143.13</wp:comment_author_IP>
			<wp:comment_date>2014-02-01 19:38:27</wp:comment_date>
			<wp:comment_date_gmt>2014-02-01 11:38:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[  嘿嘿~]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>161</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_parent_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869274]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869276]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>608</wp:comment_id>
			<wp:comment_author><![CDATA[豪哥]]></wp:comment_author>
			<wp:comment_author_email>1170722145@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.baidu.com</wp:comment_author_url>
			<wp:comment_author_IP>171.34.247.141</wp:comment_author_IP>
			<wp:comment_date>2015-05-06 17:56:40</wp:comment_date>
			<wp:comment_date_gmt>2015-05-06 09:56:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[博客怎么做的]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1430906200.7775249481201171875;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>584</wp:comment_id>
			<wp:comment_author><![CDATA[昵称（必填）]]></wp:comment_author>
			<wp:comment_author_email>1170722145@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://网址（选填）</wp:comment_author_url>
			<wp:comment_author_IP>171.34.247.134</wp:comment_author_IP>
			<wp:comment_date>2015-04-08 22:57:37</wp:comment_date>
			<wp:comment_date_gmt>2015-04-08 14:57:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[黄大神就是牛逼]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1428505058.067501068115234375;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>610</wp:comment_id>
			<wp:comment_author><![CDATA[aem]]></wp:comment_author>
			<wp:comment_author_email>aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.aemiot.com</wp:comment_author_url>
			<wp:comment_author_IP>171.34.112.167</wp:comment_author_IP>
			<wp:comment_date>2015-05-07 23:04:05</wp:comment_date>
			<wp:comment_date_gmt>2015-05-07 15:04:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="#comment-608" rel="nofollow">@豪哥 </a>wordpress...你百度这个]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>608</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1431011045.6977798938751220703125;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>日志</title>
		<link>http://www.aemiot.com/rz</link>
		<pubDate>Fri, 28 Dec 2012 11:16:45 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?page_id=213</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>213</wp:post_id>
		<wp:post_date>2012-12-28 19:16:45</wp:post_date>
		<wp:post_date_gmt>2012-12-28 11:16:45</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>rz</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[logs.php]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869125]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>应用开发</title>
		<link>http://www.aemiot.com/223.html</link>
		<pubDate>Fri, 28 Dec 2012 11:56:35 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=223</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>223</wp:post_id>
		<wp:post_date>2012-12-28 19:56:35</wp:post_date>
		<wp:post_date_gmt>2012-12-28 11:56:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>223</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="navigation"><![CDATA[Navigation]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[220]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.aemiot.com/224.html</link>
		<pubDate>Fri, 28 Dec 2012 11:56:35 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=224</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>224</wp:post_id>
		<wp:post_date>2012-12-28 19:56:35</wp:post_date>
		<wp:post_date_gmt>2012-12-28 11:56:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>224</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="navigation"><![CDATA[Navigation]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[220]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.aemiot.com/225.html</link>
		<pubDate>Fri, 28 Dec 2012 11:56:35 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=225</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date>2012-12-28 19:56:35</wp:post_date>
		<wp:post_date_gmt>2012-12-28 11:56:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>225</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>6</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="navigation"><![CDATA[Navigation]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[61]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[220]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.aemiot.com/227.html</link>
		<pubDate>Fri, 28 Dec 2012 11:56:35 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=227</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>227</wp:post_id>
		<wp:post_date>2012-12-28 19:56:35</wp:post_date>
		<wp:post_date_gmt>2012-12-28 11:56:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>227</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>7</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="navigation"><![CDATA[Navigation]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[220]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[59]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>友链</title>
		<link>http://www.aemiot.com/yl</link>
		<pubDate>Fri, 28 Dec 2012 12:01:46 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?page_id=228</guid>
		<description></description>
		<content:encoded><![CDATA[本站对在留言页面留言的每一位都会回访，如果发现感兴趣站点

我将会加入友链 如果有长期互动的站点，那么你的站点链接将会显示在我的首页上

这里拒绝“非友情”的链接

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date>2012-12-28 20:01:46</wp:post_date>
		<wp:post_date_gmt>2012-12-28 12:01:46</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>yl</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[links.php]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869126]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.aemiot.com/229.html</link>
		<pubDate>Fri, 28 Dec 2012 12:06:40 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=229</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>229</wp:post_id>
		<wp:post_date>2012-12-28 20:06:40</wp:post_date>
		<wp:post_date_gmt>2012-12-28 12:06:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>229</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>12</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="navigation"><![CDATA[Navigation]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[228]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>作品</title>
		<link>http://www.aemiot.com/zp</link>
		<pubDate>Fri, 28 Dec 2012 12:10:08 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?page_id=230</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>230</wp:post_id>
		<wp:post_date>2012-12-28 20:10:08</wp:post_date>
		<wp:post_date_gmt>2012-12-28 12:10:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>zp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869127]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.aemiot.com/254.html</link>
		<pubDate>Fri, 28 Dec 2012 13:04:17 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=254</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date>2012-12-28 21:04:17</wp:post_date>
		<wp:post_date_gmt>2012-12-28 13:04:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>254</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>9</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="navigation"><![CDATA[Navigation]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[220]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[64]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.aemiot.com/300.html</link>
		<pubDate>Fri, 28 Dec 2012 20:04:51 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=300</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>300</wp:post_id>
		<wp:post_date>2012-12-29 04:04:51</wp:post_date>
		<wp:post_date_gmt>2012-12-28 20:04:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>300</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>10</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="navigation"><![CDATA[Navigation]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[66]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>网站首页</title>
		<link>http://www.aemiot.com/%e9%a6%96%e9%a1%b5.html</link>
		<pubDate>Sat, 29 Dec 2012 06:34:19 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=310</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>310</wp:post_id>
		<wp:post_date>2012-12-29 14:34:19</wp:post_date>
		<wp:post_date_gmt>2012-12-29 06:34:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%a6%96%e9%a1%b5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="footer-menu"><![CDATA[Footer Menu]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[310]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.aemiot.com/]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>作品发布</title>
		<link>http://www.aemiot.com/311.html</link>
		<pubDate>Sat, 29 Dec 2012 06:34:19 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=311</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>311</wp:post_id>
		<wp:post_date>2012-12-29 14:34:19</wp:post_date>
		<wp:post_date_gmt>2012-12-29 06:34:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>311</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="footer-menu"><![CDATA[Footer Menu]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[230]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SiteMap_Google</title>
		<link>http://www.aemiot.com/sitemap.html</link>
		<pubDate>Sat, 29 Dec 2012 06:40:10 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=316</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date>2012-12-29 14:40:10</wp:post_date>
		<wp:post_date_gmt>2012-12-29 06:40:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sitemap</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="footer-menu"><![CDATA[Footer Menu]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[316]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.aemiot.com/sitemap.xml]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.aemiot.com/350.html</link>
		<pubDate>Sun, 30 Dec 2012 03:33:26 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=350</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>350</wp:post_id>
		<wp:post_date>2012-12-30 11:33:26</wp:post_date>
		<wp:post_date_gmt>2012-12-30 03:33:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>350</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>11</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="navigation"><![CDATA[Navigation]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[38]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SiteMap_Baidu</title>
		<link>http://www.aemiot.com/sitemap_baidu.html</link>
		<pubDate>Tue, 22 Jan 2013 21:27:46 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=509</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>509</wp:post_id>
		<wp:post_date>2013-01-23 05:27:46</wp:post_date>
		<wp:post_date_gmt>2013-01-22 21:27:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sitemap_baidu</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="footer-menu"><![CDATA[Footer Menu]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[509]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[http://www.aemiot.com/sitemap.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[custom]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.aemiot.com/534.html</link>
		<pubDate>Fri, 25 Jan 2013 14:43:16 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=534</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>534</wp:post_id>
		<wp:post_date>2013-01-25 22:43:16</wp:post_date>
		<wp:post_date_gmt>2013-01-25 14:43:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>534</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>8</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="navigation"><![CDATA[Navigation]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[220]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[92]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>游戏开发</title>
		<link>http://www.aemiot.com/536.html</link>
		<pubDate>Fri, 25 Jan 2013 15:07:10 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=536</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>536</wp:post_id>
		<wp:post_date>2013-01-25 23:07:10</wp:post_date>
		<wp:post_date_gmt>2013-01-25 15:07:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>536</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="navigation"><![CDATA[Navigation]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[220]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[65]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>C语言小技巧，调整结构体对齐方式简化数据读取</title>
		<link>http://www.aemiot.com/?p=641</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=641</guid>
		<description></description>
		<content:encoded><![CDATA[C语言中默认对齐方式：偏移量必须是自身对齐值的倍数。其中内置类型的自身对齐值是它的大小，结构体的自身对齐值等于结构体内自身对齐值最大的成员的自身对齐值。
[code lang="cpp"]
#include &lt;stdio.h&gt;

struct d{
double r;
int s;
};
/* size = 16 */

struct v{
    char x;
    struct d g;
};
/* size = 24 */

struct x{
    char x;
    struct v g;
};
/* size = 32 */

[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>641</wp:post_id>
		<wp:post_date>2013-02-16 14:58:36</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>c-dq</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Max Sum--DP解法&#124;HDU-Problem-1003</title>
		<link>http://www.aemiot.com/max-sum-acm001.html</link>
		<pubDate>Mon, 24 Dec 2012 05:59:39 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://blog.aemiot.com/?p=107</guid>
		<description></description>
		<content:encoded><![CDATA[不多说，先上题

题目地址 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1003">http://acm.hdu.edu.cn/showproblem.php?pid=1003</a>
<p style="text-align: left;">看完题目，第一感觉就是介于贪心和动态规划之间的题目，不过我果断选择了动态规划</p>
<p style="text-align: left;">不难发现 ，动态规划方程为 res[m+1] = max{ res[m]+arr[m+1],arr[m+1] }</p>
<p style="text-align: left;">方程可以解释为：以下标m+1为终点的所有区间，和最大的要么是以下标m为终点的所有区间的最大值加上下标为m+1的值，要么就是下标为m+1的值</p>
<p style="text-align: left;">利用这个方程很快就能找到最大值</p>
<p style="text-align: left;">再按照题目要求做适当修改，在适当的位置保存head和last</p>
<p style="text-align: left;">这样就能写出粗糙的代码，接下来贴上我写的代码，如下</p>
&nbsp;
[code lang="cpp"]
#include&lt;stdio.h&gt;
#define MAX 111111
int main(void)
{
   int n,i;
   scanf(&quot;%d&quot;,&amp;n);
   for(i=0; i&lt;n; ++i)
   {
      int length,j,thead,head,last,max;
      int arr[MAX],res[MAX];
      scanf(&quot;%d&quot;,&amp;length);
      for(j=0; j&lt;length; ++j)
         scanf(&quot;%d&quot;,&amp;arr[j]);
      /* 动态规划开始
         动归方程  res[m+1] = max{res[m]+k,k}
         尾在找到找到当前最大值时确定
         头要随时保存*/
      max = res[0] = arr[0];
      head = thead = last =1;
      for(j=0; j&lt;length-1; ++j)
      {    
         if((res[j]+arr[j+1])&gt;=arr[j+1])
         {
            res[j+1] = res[j] + arr[j+1];
            if(res[j+1] &gt; max)
               max = res[j+1] , head = thead , last = j+1+1;
         }
         else
         {
            res[j+1] = arr[j+1];
            thead = j+1+1;
            if(res[j+1] &gt; max)
               max = res[j+1] , head = thead , last = j+1+1;
         }
      }
      printf(&quot;Case %d:\n&quot;,i+1);
      printf(&quot;%d %d %d\n&quot;,max,head,last);
      if(i != n-1) printf(&quot;\n&quot;);
   }
   return 0;
}
[/code]

使用测试数据验证后，能得到正确结果，接下来就着手优化了

优化一： 观察整个程序，发现一直在使用res[j] 和 res[j+1] 因此取消res数组，用 resnow 和 resnext 取代 每次循环后 resnow = resnext 优化后，空间从 1000K 降为652K，时间从51s 降为46ms

优化二： 将一次性读入数据并储存到数组中，改为读入一个处理一个，从而取消数组 优化后，空间从652K 降为224K，时间从46ms 降为 31ms

优化三: 将编译器从GCC换为VC，并开启默认优化，空间从 224K变为220K，时间从31ms 变为15ms

接下来附上优化后的代码,如下

&nbsp;
[code lang="cpp"]
#include&lt;stdio.h&gt;
#define MAX 111111
int main(void)
{
   int n,i;
   scanf(&quot;%d&quot;,&amp;n);
   for(i=0; i&lt;n; ++i)
   {
      int length,j,thead,head,last,max;
      int arr,resnext,resnow;
      scanf(&quot;%d&quot;,&amp;length);
      scanf(&quot;%d&quot;,&amp;arr);
      /* 动态规划开始
         动归方程  res[m+1] = max{res[m]+k,k}
         尾在找到找到当前最大值时确定
         头要随时保存*/
      max =  resnow = arr;
      head = thead = last =1;
      for(j=0; j&lt;length-1; ++j)
      {    
         scanf(&quot;%d&quot;,&amp;arr);
         if((resnow+arr)&gt;=arr)
         {
            resnext = resnow + arr;
            if(resnext &gt; max)
               max = resnext , head = thead , last = j+1+1;
         }
         else
         {
            resnext = arr;
            thead = j+1+1;
            if(resnext &gt; max)
               max = resnext , head = thead , last = j+1+1;
         }
         resnow =resnext;
      }
      printf(&quot;Case %d:\n&quot;,i+1);
      printf(&quot;%d %d %d\n&quot;,max,head,last);
      if(i != n-1) printf(&quot;\n&quot;);
   }
   return 0;
}
[/code]
&nbsp;

最后，大家有兴趣的话，也可以试试

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>107</wp:post_id>
		<wp:post_date>2012-12-24 13:59:39</wp:post_date>
		<wp:post_date_gmt>2012-12-24 05:59:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>max-sum-acm001</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="post_tag" nicename="dp"><![CDATA[DP]]></category>
		<category domain="post_tag" nicename="%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92"><![CDATA[动态规划]]></category>
		<category domain="post_tag" nicename="%e7%ae%97%e6%b3%95"><![CDATA[算法]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[max-sum-acm%e6%b0%b4%e9%a2%98%e4%b8%80%e9%81%93%ef%bc%8c%e7%94%a8dp%e5%be%88%e7%ae%80%e5%8d%95]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869123]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>108</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>222.25.180.40</wp:comment_author_IP>
			<wp:comment_date>2013-05-01 20:06:17</wp:comment_date>
			<wp:comment_date_gmt>2013-05-01 12:06:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[渣渣，输入测试数据
-2 11 -4 13 -5 -2
试试，傻眼了吧]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869211]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_parent_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869120]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>111</wp:comment_id>
			<wp:comment_author><![CDATA[Aem]]></wp:comment_author>
			<wp:comment_author_email>aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url>http://t.qq.com/yxx3372</wp:comment_author_url>
			<wp:comment_author_IP>218.64.59.174</wp:comment_author_IP>
			<wp:comment_date>2013-05-04 14:34:15</wp:comment_date>
			<wp:comment_date_gmt>2013-05-04 06:34:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[输入
1
6 -2 11 -4 13 -5 -2
输出
20 2 4
------------------------------------------
有什么问题吗？
子序列是 11 -4 13 
11 -4 +13 = 20
起始位置 2  终止位置 4]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>108</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_parent_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869211]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869212]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>浅谈C和C++产生的误会</title>
		<link>http://www.aemiot.com/c-cppwh.html</link>
		<pubDate>Mon, 24 Dec 2012 20:52:17 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://blog.aemiot.com/?p=178</guid>
		<description></description>
		<content:encoded><![CDATA[经常在网上看到有人说先学C++再学C语言会感觉更加容易，先学C再学C++会很难。
其实这是个天大的误会
因为，许多人觉得C++的语法包含了C语言的语法，C++是C语言的升级版，但是，<span style="color: #3366ff;">C和C++只是表面上看起来像而已</span>，如果你把它们语法弄混淆，也许你暂时不会发现有什么异常，但是等到程序出现问题的时候，就无从下手了。<!--more-->

这里列举几个我在学习C和C++过程中，发现它们在细节上的不同（这里C语言采用ANSI C89标准）

&nbsp;
<ol>
	<li><span style="color: #3366ff;"><strong>const 在C和C++中不同。</strong></span>
在C中默认使用外部链接，并且分配内存，别的文件是可见的
在C++中默认使用内部链接，默认不分配内存，对其他文件不可见，有点类似#define，但它会做一个类型检查，因此比#define更加安全
若要使该常量对其他文件可见，使用外部链接，那么就要之前加上extern，不过代价就是要分配内存
这样做的原因是为了使const可以用于头文件中，在头文件中使用const int s=4;是可以的，注意这时不用extern;  因为它的作用域是到文件结尾。。那么就不会出现重复定义现象。</li>
	<li><span style="color: #3366ff;"><strong>赋值号的返回内容不同。</strong></span>
C中赋值运算符返回的是一个右值。例如， (a += b) -= 4 这样的表达式就是非法的C表达式，至少会给出警告，严重点的直接无法编译。
C++中赋值运算符返回的是一个左值。例如，（a += b） -= 4 这样的表达式是合法的，甚至 (a = 4) = 1 这样的表达式也是一个合法的C++表达式。</li>
	<li><span style="color: #3366ff;"><strong>全局变量的初始化不同。</strong></span>
C语言对全局变量的初始化只能是常量表达式。
C++定义全局变量的时候可以使用已经声明过的全局变量。</li>
	<li><span style="color: #3366ff;"><strong>ANSI C89 规定程序的声明要在程序块的最开始处，ANSI C99和C++对这一点放宽了要求，即可以再程序的任何地方声明。</strong></span></li>
</ol>
（其余的就留给大家自行探究吧。）

可想而知，将C++的语法当C语言的语法是一件多么可怕的事情。

事实上，将它们当做两门不同的语言会更加容易学习。

如果你能把他们当做两门完全不同的语言去学习（不要总去想它们的联系），不论怎么样的顺序，学习它们都是好的，不过C++更加重视的是面向对象，而不是语法。

&nbsp;

另外一个误会就是，许多人认为C++比C更加高级。

虽然，C++多C在名字上看起来更加霸气一些，但不可否认，<span style="color: #3366ff;">C跟C++确实是各有所长</span>。

<span style="color: #3366ff;">C++是大型编程语言</span>，所以引入了类，模板等面向对象元素，这样做使得代码更加有条理性，更加符合现实世界的法则，而不用处处考虑越界之类的问题。但因此在程序运行效率上处于劣势。

<span style="color: #3366ff;">C是底层语言</span>，它对硬件直接的通信有很好的可控性，并且有很高的运行效率，所以它在硬件编程上广泛应用。

而且，在编程语言排行榜上，C 的排名一直高于C++ ，而且随着近年来物流网的高速发展，对硬件编程需求增加，C 的使用率还将继续上升。

所以<span style="color: #3366ff;">C++ 并不比 C 更高级，他们只是在各有所长</span>，就如同其他语言一样，都有着自己擅长的领域，例如 python在计算方面是有着非常大的优势的。

[note title="2015/5有感"]
经过数年的时间，回过头来看看这篇浅谈，觉得有点贻笑大方，C++与C之间的差异远远不止这些停留在语法细节上的东西，包括适合的编程范式等在设计哲学上都是有很大差异的。
[/note]

[warning]
作者:<strong>Aem</strong>
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date>2012-12-25 04:52:17</wp:post_date>
		<wp:post_date_gmt>2012-12-24 20:52:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>c-cppwh</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[c]]></category>
		<category domain="category" nicename="jyzt"><![CDATA[经验之谈]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869124]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>19</wp:comment_id>
			<wp:comment_author><![CDATA[Aem]]></wp:comment_author>
			<wp:comment_author_email>Aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>171.34.119.6</wp:comment_author_IP>
			<wp:comment_date>2012-12-30 13:10:45</wp:comment_date>
			<wp:comment_date_gmt>2012-12-30 05:10:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="#comment-16" rel="nofollow">@Cris </a>谢谢支持]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>16</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1356844245.6624929904937744140625;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"Eluckv";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>16</wp:comment_id>
			<wp:comment_author><![CDATA[Cris]]></wp:comment_author>
			<wp:comment_author_email>563544245@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://网址（选填）</wp:comment_author_url>
			<wp:comment_author_IP>183.218.176.106</wp:comment_author_IP>
			<wp:comment_date>2012-12-30 00:20:55</wp:comment_date>
			<wp:comment_date_gmt>2012-12-29 16:20:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good Up！]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1356838694.579966068267822265625;s:7:"message";s:37:"Eluckv 将评论状态改为 approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"Eluckv";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1356798055.3770349025726318359375;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>567</wp:comment_id>
			<wp:comment_author><![CDATA[昵称（必填）]]></wp:comment_author>
			<wp:comment_author_email>oinejob@163.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.banshouseo.com/</wp:comment_author_url>
			<wp:comment_author_IP>58.21.41.116</wp:comment_author_IP>
			<wp:comment_date>2015-02-09 01:15:44</wp:comment_date>
			<wp:comment_date_gmt>2015-02-08 17:15:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[写的不错]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1423415744.54592609405517578125;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>第一款自制游戏---猜数字</title>
		<link>http://www.aemiot.com/game1.html</link>
		<pubDate>Fri, 28 Dec 2012 20:02:21 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=271</guid>
		<description></description>
		<content:encoded><![CDATA[<big>游戏的内容来源于我小时候在学习机上接触的一款同名游戏
出于怀旧，我制作了它在windows下的图形版本</big>

<big>游戏类型：益智类</big>
<big>游戏一共有两种难度:</big>
<big>简单：12次尝试机会</big>
<big>普通：10次尝试机会</big>
<big>主程序：黄睿</big>
<big>美工：黄睿</big>
<big>测试人员：罗岩、徐天宇</big>

<big>以下是游戏截图</big>

<a href="http://www.aemiot.com/wp-content/uploads/2013/01/1.jpg" rel="attachment wp-att-264"><img class="alignleft size-full wp-image-264" alt="菜单" src="http://www.aemiot.com/wp-content/uploads/2013/01/1.jpg" width="576" height="455" /></a>

<a href="http://www.aemiot.com/wp-content/uploads/2013/01/2.jpg" rel="attachment wp-att-266"><img class="alignleft size-full wp-image-266" alt="游戏说明" src="http://www.aemiot.com/wp-content/uploads/2013/01/2.jpg" width="576" height="455" /></a>

<a href="http://www.aemiot.com/wp-content/uploads/2013/01/3.jpg" rel="attachment wp-att-265"><img class="alignleft size-full wp-image-265" alt="游戏中" src="http://www.aemiot.com/wp-content/uploads/2013/01/3.jpg" width="576" height="455" /></a>

<a href="http://www.aemiot.com/wp-content/uploads/2013/01/4.jpg" rel="attachment wp-att-268"><img class="alignleft size-full wp-image-268" alt="赢了" src="http://www.aemiot.com/wp-content/uploads/2013/01/4.jpg" width="576" height="455" /></a>

<a href="http://www.aemiot.com/wp-content/uploads/2013/01/5.jpg" rel="attachment wp-att-267"><img class="alignleft size-full wp-image-267" alt="关于我们" src="http://www.aemiot.com/wp-content/uploads/2013/01/5.jpg" width="576" height="455" /></a>
[note]
<span style="color: #ff6600;"><strong><big>本游戏正常运行需微软雅黑字体，部分xp系统用户需自行下载该字体</big></strong></span>
<span style="color: #ff6600;"><strong><big>本地下载请不要使用迅雷等P2P软件，如要使用请选择其他下载方式</big></strong></span>
[/note]

<big>游戏下载</big>
<ul>
	<li>[download link="http://www.aemiot.com/download/GuessNember.zip"]<span style="color: #050505;"><big><b>  本地下载</b></big></span>[/download]</li>
</ul>
&nbsp;
[warning]
作者:<strong>Aem</strong>
本文版权归作者和aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>271</wp:post_id>
		<wp:post_date>2012-12-29 04:02:21</wp:post_date>
		<wp:post_date_gmt>2012-12-28 20:02:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>game1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e4%b8%8b%e8%bd%bd"><![CDATA[下载]]></category>
		<category domain="category" nicename="zp"><![CDATA[作品]]></category>
		<category domain="post_tag" nicename="%e6%b8%b8%e6%88%8f"><![CDATA[游戏]]></category>
		<category domain="post_tag" nicename="%e7%8c%9c%e6%95%b0%e5%ad%97"><![CDATA[猜数字]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e7%ac%ac%e4%b8%80%e6%ac%be%e8%87%aa%e5%88%b6%e6%b8%b8%e6%88%8f-%e7%8c%9c%e6%95%b0%e5%ad%97]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[489]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869128]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>对字符型与整型的探究</title>
		<link>http://www.aemiot.com/char-int.html</link>
		<pubDate>Sat, 29 Dec 2012 11:50:31 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=322</guid>
		<description></description>
		<content:encoded><![CDATA[据目前了解，int与char都是按照补码储存的

一般字符按照ASCII以整型数形式存储

Scanf()使用%c参数与getchar() 都能从stdin流中读入一个字符

并且EOF因为其值可能超出char类型的存储范围，故常常使用int型存储字符

而我无意间发现用int储存字符型一个奇怪的现象

&nbsp;

于是，我使用一段程序对这个问题进行研究

程序代码如下：
[code lang="cpp"]
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main(void)
{
	//命名方式 读入方式_声明类型
	int scanf_int,get_int,c_int='s';
	char scanf_char,get_char,c_char='s';
	int temp;
	printf(&quot;Please enter:\n&quot;);
	scanf(&quot;%c%c&quot;,&amp;scanf_int,&amp;scanf_char);
	while((temp=getchar())!='\n');//清空stdin流
	get_int=getchar();
	get_char=getchar();
	//对于每个数据用printf格式输出
	printf(&quot;Result:\n&quot;);
	printf(&quot;scanf_int: %c(%12d)\n&quot;,scanf_int,scanf_int);
	printf(&quot;get_int:   %c(%12d)\n&quot;,get_int,get_int);
	printf(&quot;c_int:     %c(%12d)\n&quot;,c_int,c_int);
	printf(&quot;scanf_char:%c(%12d)\n&quot;,scanf_char,scanf_char);
	printf(&quot;get_char:  %c(%12d)\n&quot;,get_char,get_char);
	printf(&quot;c_char:    %c(%12d)\n&quot;,c_char,c_char);
	system(&quot;pause&quot;);
	return 0;
}
[/code]
研究过程中，我将以上代码，在VC++6.0和MinGW32两个编译环境下分别以Debug和Release两个编译模式下运行

运行结果如下：

编译环境：VC++6.0
编译模式：DEBUG
输入输出结果：

<a href="http://www.aemiot.com/wp-content/uploads/2012/12/1.gif" rel="attachment wp-att-335"><img alt="1" src="http://www.aemiot.com/wp-content/uploads/2012/12/1.gif" width="209" height="178" /></a>

编译环境：VC++6.0
编译模式：Release
输入输出结果：

<a href="http://www.aemiot.com/wp-content/uploads/2012/12/2.gif" rel="attachment wp-att-336"><img alt="2" src="http://www.aemiot.com/wp-content/uploads/2012/12/2.gif" width="209" height="178" /></a>

编译环境：MinGW32
编译模式：Debug
输入输出结果：

<a href="http://www.aemiot.com/wp-content/uploads/2012/12/3.gif" rel="attachment wp-att-337"><img alt="3" src="http://www.aemiot.com/wp-content/uploads/2012/12/3.gif" width="209" height="178" /></a>

编译环境：MinGW32
编译模式：Release
输入输出结果如下：

<a href="http://www.aemiot.com/wp-content/uploads/2012/12/4.gif" rel="attachment wp-att-338"><img alt="4" src="http://www.aemiot.com/wp-content/uploads/2012/12/4.gif" width="209" height="178" /></a>

对于scanf使用%c格式读入的int型字符，能够正常打印出字符，其输出的整数却不是其字符对应的ASCII值，而产生了一共3个异常值，这三个值分别为
-858993549
4231283
2686835

计算出这三个数的补码(32位)分别为
1100 1100 1100 1100 1100 1100 0111 0011
0000 0000 0100 0000 1001 0000 0111 0011
0000 0000 0010 1000 1111 1111 0111 0011

发现最低的8位相同，并且 0111 0011正好为s的ASCII值(115)
推测，使用scanf函数仅保证最后8位相同

那么推测使用int型存储字符型数据，与一个字符常量比较时，字符常量自动转换为__int32类型
其结果应该发生异常，我采用如下程序进一步研究
[code lang="cpp"]
#include &lt;stdio.h&gt;
int main(void)
{
	int c;
	scanf(&quot;%c&quot;,&amp;c);
	printf(&quot;%d&quot;,c=='s');
	return 0;
}
[/code]
输入数据：s
输出数据：0

为了进一步确认，对上面的程序进行修改，这次引入强制转换符（根据ANSI C数据转换，只保留低位）
[code lang="cpp"]
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main(void)
{
	int c;
	scanf(&quot;%c&quot;,&amp;c);
	printf(&quot;%d&quot;,(char)c=='s');
	system(&quot;pause&quot;);
	return 0;
}

[/code]
输入数据：s
输出数据：1

基本可以确认之前的结论

而另一个函数getchar是将int型的返回值赋值给变量（getchar本身得到的结果就是int型），故其不会出现异常。
最后建议大家，如果只是纯粹读取字符，尽量使用getchar()。

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>322</wp:post_id>
		<wp:post_date>2012-12-29 19:50:31</wp:post_date>
		<wp:post_date_gmt>2012-12-29 11:50:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>char-int</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[c]]></category>
		<category domain="post_tag" nicename="getchar"><![CDATA[getchar]]></category>
		<category domain="post_tag" nicename="scanf"><![CDATA[scanf]]></category>
		<category domain="category" nicename="jyzt"><![CDATA[经验之谈]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[335]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e5%af%b9%e5%ad%97%e7%ac%a6%e5%9e%8b%e4%b8%8e%e6%95%b4%e5%9e%8b%e7%9a%84%e6%8e%a2%e7%a9%b6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869129]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>20</wp:comment_id>
			<wp:comment_author><![CDATA[noway]]></wp:comment_author>
			<wp:comment_author_email>oneemail@email.com</wp:comment_author_email>
			<wp:comment_author_url>http://网址（选填）</wp:comment_author_url>
			<wp:comment_author_IP>218.64.59.174</wp:comment_author_IP>
			<wp:comment_date>2012-12-30 14:54:06</wp:comment_date>
			<wp:comment_date_gmt>2012-12-30 06:54:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="#comment-17" rel="nofollow">@Aem </a>仅仅取单个字符确实应该选择getchar之类]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>17</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1356850446.1265060901641845703125;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>18</wp:comment_id>
			<wp:comment_author><![CDATA[Aem]]></wp:comment_author>
			<wp:comment_author_email>Aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>171.34.119.6</wp:comment_author_IP>
			<wp:comment_date>2012-12-30 11:49:01</wp:comment_date>
			<wp:comment_date_gmt>2012-12-30 03:49:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="#comment-15" rel="nofollow">@noway </a>博客的搭建基本没我什么事....
我用C和HTML/CSS知识也就只具有看懂PHP的知识，自己写还是有困难的
而且，就算投入时间看了一些PHP，也没现在这么好。。
现在这个运用了异步加载技术，图片延迟加载技术，还做了SEO优化]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>15</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1356839341.4882099628448486328125;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"Eluckv";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[noway]]></wp:comment_author>
			<wp:comment_author_email>oneemail@email.com</wp:comment_author_email>
			<wp:comment_author_url>http://网址（选填）</wp:comment_author_url>
			<wp:comment_author_IP>171.34.112.246</wp:comment_author_IP>
			<wp:comment_date>2012-12-29 23:22:06</wp:comment_date>
			<wp:comment_date_gmt>2012-12-29 15:22:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[scanf更加效率 
将具体类型长度的bit流直接替换,这也是为什么他要求存储数据的地址。
getchar()更加安全
getchar之类的为什么能获取正确值是因为其在返回值的时候进行了一次类型转换，难说它内部的实现和scanf可能一样(没打开看过- -)，估计它也是因为考虑到安全才出来的- -
-----
话说小黄黄  网页的源码和素材是你下的吗 还是自学设计的,挺漂亮的 标准的blog框架哇。我是 你范哥]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1356838699.587235927581787109375;s:7:"message";s:37:"Eluckv 将评论状态改为 approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"Eluckv";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1356794526.0579569339752197265625;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17</wp:comment_id>
			<wp:comment_author><![CDATA[Aem]]></wp:comment_author>
			<wp:comment_author_email>Aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>171.34.119.6</wp:comment_author_IP>
			<wp:comment_date>2012-12-30 11:45:25</wp:comment_date>
			<wp:comment_date_gmt>2012-12-30 03:45:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="#comment-15" rel="nofollow">@noway </a>看名字就知道了
话说有些编译器 getchar还是通过宏定义实现的，减少了函数调用消耗的时间
看网上的话，据说因不同编译器它们效率是不同，谁高谁低依编译器决定
我做目前遇到更多的情况是getchar效率高些。
从反汇编情况看（下面是vs2010的测试）

	scanf("%c",&m);
0005B3EE 8D 45 FB             lea         eax,[m]  
0005B3F1 50                   push        eax  
0005B3F2 68 6C DC 0A 00       push        offset string "%c" (0ADC6Ch)  
0005B3F7 E8 D0 E7 FF FF       call        @ILT+3015(_scanf) (59BCCh)  
0005B3FC 83 C4 08             add         esp,8  
	m = getchar();
0005B3FF E8 B1 EA FF FF       call        @ILT+3760(_getchar) (59EB5h)  
0005B404 88 45 FB             mov         byte ptr [m],al  

应该是getchar()可观些

安全么，getchar绕开了可变参数表，可以做类型检查和类型转换必然比scanf安全多了]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>15</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1356839126.0290229320526123046875;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"Eluckv";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>21</wp:comment_id>
			<wp:comment_author><![CDATA[noway]]></wp:comment_author>
			<wp:comment_author_email>oneemail@email.com</wp:comment_author_email>
			<wp:comment_author_url>http://网址（选填）</wp:comment_author_url>
			<wp:comment_author_IP>218.64.59.174</wp:comment_author_IP>
			<wp:comment_date>2012-12-30 14:56:40</wp:comment_date>
			<wp:comment_date_gmt>2012-12-30 06:56:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="#comment-18" rel="nofollow">@Aem </a>- -目前形势下 选择引擎的意义看来比自己写代码要更加重要了！]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>18</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1356850600.939752101898193359375;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>22</wp:comment_id>
			<wp:comment_author><![CDATA[Aem]]></wp:comment_author>
			<wp:comment_author_email>Aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>171.34.119.6</wp:comment_author_IP>
			<wp:comment_date>2012-12-30 15:51:48</wp:comment_date>
			<wp:comment_date_gmt>2012-12-30 07:51:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="#comment-21" rel="nofollow">@noway </a>确实，现在啥都讲究模板化]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>21</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1356853909.010301113128662109375;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"Eluckv";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>传统高精度算法系列(一)整数的高精度加法</title>
		<link>http://www.aemiot.com/calc-high-int-sum.html</link>
		<pubDate>Sun, 30 Dec 2012 12:28:21 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=353</guid>
		<description></description>
		<content:encoded><![CDATA[大家都知道，C语言的基本数据类型提供的可计算范围非常有限的
那么我们需要处理大数据时怎么办呢
其实有一种方法可以很轻松的解决这个问题
那就是<strong>高精度算法</strong>。

首先，我们介绍整数的高精度加法

算法的思路：
<strong>模拟我们在小学所学的笔算</strong>
（对于不足位用0补齐，如9818+13，我们认为是9818+0013）
假设我们要计算的两数分别是 A1 A2 A3 A4 、 B1 B2 B3 B4
那么我们笔算时，会列出这样的式子

A1 A2 A3 A4
+ B1  B2  B3 B4
---------------------
C0  C1 C2 C3 C4

那么我们在计算机中也同样可以完成这个过程
为了方便进位，我们在计算前，将两个数反向储存至数组中
即我们是对  B4 B3 B2 B1 、A4 A3 A2 A1 进行计算

初始化时 dv = 0
其中有恒等式   Cn  = （An + Bn + dv）mod  10  （dv为进位结果）
根据这个等式我们只需要循环执行以下三步，就能得到大致结果

1. <strong>temp = An + Bn +dv</strong>
2. <strong>Cn = temp mod 10</strong>
3. <strong>dv = temp div 10</strong>

循环完成后，我们还需要进行最后一步
因为两个最高位相加仍可能产生进位
所以，我们在这里还要额外做一次对 dv 的判断
如果 dv 值为 1 的话， Cn+1 应该要进位，即 Cn+1 = 1

该算法用C语言描述如下：

[code lang="cpp"]
#include&lt;stdio.h&gt;
#include&lt;string.h&gt;
#define MAX 1001
int main(void)
{
	int arr1[MAX]={0},arr2[MAX]={0};
	int length,i,length1,length2,t,dv = 0;
	char str[MAX];
	/*读入数据，并进行预处理(计算出数字位数，并方向存放)*/
	scanf(&quot;%s&quot;,str);
	length1 = strlen(str);
	for(i=0; i&lt;length1; ++i)
		arr1[i] = str[length1-1-i] - '0';
	scanf(&quot;%s&quot;,str);
	length2 = strlen(str);
	for(i=0; i&lt;length2; ++i)
		arr2[i] = str[length2-1-i] - '0';
	length = (length1&gt;length2)?length1:length2;
	/*算法核心内容*/
	for(i=0; i&lt;length; ++i)
	{
		t = arr1[i] + arr2[i] +dv;
		arr1[i] = t % 10;
		dv = t / 10;
	}
	if(dv != 0)	arr1[length++] = dv;
	/*结束*/
	for(i=0; i&lt;length; ++i)
		printf(&quot;%d&quot;,arr1[length-1-i]);
	return 0;
}
[/code]


[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>353</wp:post_id>
		<wp:post_date>2012-12-30 20:28:21</wp:post_date>
		<wp:post_date_gmt>2012-12-30 12:28:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>calc-high-int-sum</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%8a%a0%e6%b3%95"><![CDATA[加法]]></category>
		<category domain="post_tag" nicename="%e7%ae%97%e6%b3%95"><![CDATA[算法]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e9%ab%98%e7%b2%be%e5%ba%a6"><![CDATA[高精度]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e4%bc%a0%e7%bb%9f%e9%ab%98%e7%b2%be%e5%ba%a6%e7%ae%97%e6%b3%95%e7%b3%bb%e5%88%97%e4%b8%80-%e6%95%b4%e6%95%b0%e7%9a%84%e9%ab%98%e7%b2%be%e5%ba%a6%e5%8a%a0%e6%b3%95]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869130]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>73</wp:comment_id>
			<wp:comment_author><![CDATA[传统高精度算法系列(二)整数的高精度减法 | Aem&#039;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.aemiot.com/calc-high-int-inc.html</wp:comment_author_url>
			<wp:comment_author_IP>108.166.217.2</wp:comment_author_IP>
			<wp:comment_date>2013-02-07 00:24:51</wp:comment_date>
			<wp:comment_date_gmt>2013-02-06 16:24:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 整数的高精度加法大家应该已经清楚了。按照同样的思路，我们也可以写出整数的高精度减法。 当然，高精度减法比加法稍微麻烦一些。 [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>2011第二届蓝桥杯C/C++程序设计本科B组省赛试题解题报告</title>
		<link>http://www.aemiot.com/2011blue.html</link>
		<pubDate>Tue, 01 Jan 2013 06:07:57 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=379</guid>
		<description></description>
		<content:encoded><![CDATA[昨天从老师那边听来的蓝桥杯这个比赛，心血来潮，立即就把题目找来开始写了。
整张试卷难度系数不算太高，虽然我做的结果并不很理想，说它难度不高的原因是并没有像其他竞赛一样需要很多基础算法才能解答，不过作为初赛，这样的难度系数，让我深深感觉到了复赛的压力。

试卷一共7道填空题3道编程题，要求在4个小时内完成。
我从20:13开始打开试题，00:05交卷（呵呵，在我写的过程中2012-2013就这么跨过去了）
交卷后，找来答案，仔细核对后，我的成绩是74分。（满分100）
作为初赛，这样的成绩其实是非常不理想的。（日后我自个反省去。）

按照往常习惯，写完竞赛试卷后，写个解题报告吧。（可能不是最优解就是。）
试题，在文章底部以附件的形式放出，有兴趣做的，先试着写写再来看题解分享下吧。（竞赛中，程序写的可能没有很好的框架，大家见谅）

第一题
[toggle]
JC这个数组内容一看，真熟悉，这不是0-9的阶乘么（设计的很巧妙，因为只需要用到这些阶乘，事先算好存入数组，避免了重复计算）
按照题目意思，我们需要对数进行分解，获得它的每一位。
看到下面这个while循环的循环体，跟我平时写的将数分解的循环体真像。
猜测循环条件是 (x != 0) 或 (x)
重新阅读程序。
程序的实现：对于每一个三位数判断，取出一位数，到JC中找出它的阶乘加到sum，将sum和自身比较，如果相等就输出。
那么，可以断言，答案为 (x != 0) 或 (x)
[/toggle]

第二题
[toggle]
从 double t = x[i] - sum / (n-1); 可以看出
这时候的 sum 已经是除了一个数的和
再从 if(____) sum += s[j];
也会自然的想到应该填上 j != i
考试时，因为在这里顾忌时间不够，而且基本能断定答案是这个，对后面的程序只是粗略看了一下，和我的思路相仿就没去看具体实现了
现在，重新阅读程序。
依次假定每一个数是最离群的数，算出平均值
计算去掉的数与平均数的距离
如果距离大于当前已知的最大距离，更新相应数据（数和已知最大距离）
对每个数都判断完后，返回能产生最大距离的数
[/toggle]

第三题
[toggle]
粗略的看了一眼程序已知部分，发现没有循环，可想而知，这个一定是递归实现。
按递归思路看程序，循环体的第一条是递归边界控制语句。
第二条到第四条是典型的交换语句，那么在这里完成的就是首尾对调。
那么进一步调用自身，应该是调用原字符串去掉首尾后的子串。
那么填入 reverse_str(buf+1,n-2) 就行了
[/toggle]

第四题
[toggle]
这个按照十进制小数部分化其他进制看下去，非常通畅。
首先乘上要化的进制（例如要化成二进制，就乘2）
然后取出整数部分
那么很容易推断出两空分别是：
(int) dTestNo
iT[iNo] != 0 或 iT[iNo]
[/toggle]

第五题
[toggle]
从最后一句 strcpy(s,s2) 可以看出 s2 存放的是轮换后的结果
那么 s2 所需要的空间应该是 字符串长度 +1 （存放字符串结束符）
那么第一空应该是 sizeof(char)*(len+1)
从语句 q = s2 + n % len;
可以看出 q 定位了原字符串首字符在 s2 中的位置
在循环体中 *q++ = *p++; 这是复制的过程
再向下看，发现没有什么地方有写入 s2 的字符串终止符 '\0'
猜测，第二空是 '\0'
按照这个猜想
循环体内 if语句 实现的就是，如果 s2 到达尾部，写入字符串终止符''，并且将将要写的位置定位到 s2 头部
那么可以断言 第二空答案就是 ''
综上所述，上面两空答案分别是：
sizeof(char)*(len+1)
'\0'
[/toggle]

第六题
[toggle]
说实在的，考试时，我忘记了 strstr() 是什么函数了。（罪过罪过~~）
考试时，我是这样写的
首先看到
char t = _____;
sa[i+j] = 0;
然后又看到
sa[i+j] = t;
我就想到我们编程时惯用的手法，先保存它，然后修改它，最后还原它、
没办法，有函数忘了，只能这么写了，我就推测第一空是 sa[i+j]
第二空么，我注意到了返回值是 n ，那么 n 就应该是中了的数目
纵观整个程序，愣是没发现，有什么地方对 n 进行了赋值
再看到 if(j &gt; n) 我又想到我们编程的惯用手法了，n 保存的应该是当前已知的最大数目，如果找到更大的就更新它
那么可以推测 j 就是当前的数目，那么自然而然，我就猜到第二空是 n = j
于是，我两空的答案就是：
sa[i+j]
n = j
事实证明，我猜对了。
具体实现方法，暂时还没看。先放着，日后更新此文章时，给出完整编程思路，而不是猜测性思路。
[/toggle]

第七题
[toggle]
表示概率忘的很彻底，没看懂。
答案暂时还没看，也先放着，日后更新文章时，给出解析。
[/toggle]

第八题
[toggle]
终于来了，编程题
不得不说，这题水的很。
简单说下，就直接我写的贴代码吧。
我的方法就是建立一个矩阵，然后写入一个数后更新坐标，使他定位到下一个要写的位置
可以写入顺序总是 向右 &gt;&gt; 向左下 &gt;&gt; 向上
并且从最开始连续写入 n个数开始，每次要连续写入的数都少了 1个
也就是说连续写入的数分别 n n-1 n-2 ...个
那么在一个循环里，每次循环完成这三个步骤，注意控制好循环就行
代码如下：

[code lang="cpp"]
#include &lt;stdio.h&gt;
int main(void)
{
	int i,j,n,s,x=0,y=0,num=1;
	int bar[20][20]={{0}};
	scanf(&quot;%d&quot;,&amp;n);
	s=n+1;
	while(1)
	{
		--s;
		if(s==0) break;
		for(i=0; i&lt;s; ++i)
		{
			bar[x][y] = num++;
			if(i != s-1) ++y;
			else
				++x,--y;
		}
		--s;
		if(s==0) break;
		for(i=0; i&lt;s; ++i)
		{
			bar[x][y] = num++;
			if(i != s-1) ++x,--y;
			else
				--x;
		}
		--s;
		if(s==0) break;
		for(i=0; i&lt;s; ++i)
		{
			bar[x][y] = num++;
			if(i != s-1) --x;
			else
				++y;
		}
	}
	for(i=0; i&lt;n; ++i)
	{
		for(j=0; j&lt;n-i; ++j)
			printf(&quot;%4d&quot;,bar[i][j]);
		printf(&quot;\n&quot;);
	}
	return 0;
}
[/code]

[/toggle]

第九题
[toggle]
表示突然抽风了，感觉这有点类似背包问题，又有点不像。不过，具体方案，考试时居然没想到。
现在时间有限，暂时也先搁着吧，日后更新再重做此题。
[/toggle]

第十题
[toggle]
这题就是考模拟。
它有啥要求，对着写就好了，不难。
（话说，我之前写的密码管理器的加密部分，比这东西复杂多了）
我的代码如下：

[code lang="cpp"]
#include&lt;stdio.h&gt;
#include&lt;string.h&gt;
int main(void)
{
	char abc[2][27] = {&quot;abcdefghijklmnopqrstuvwxyz&quot;,{0}},temp[25];
	char bar[5][5],key[26],str[51],res[51],a,b;
	char *p;
	int keylen,i,j,pos=0,abc_pos=0,x1,x2,y1,y2;
	scanf(&quot;%s&quot;,key);
	keylen = strlen(key);
	for(i=0; i&lt;keylen; ++i)
	{
		char t = key[i];
		temp[pos++] = t;
		abc[1][t-'a'] = 1;
	}
	while(1)
	{
		if(pos == 25)	break;
		if(abc[1][abc_pos] == 0) temp[pos++] = abc[0][abc_pos];
		abc_pos++;
	}
	pos=0;
	for(i=0; i&lt;5; ++i)
		for(j=0; j&lt;5; ++j)
			bar[i][j] = temp[pos++];
	//密码表设置完成，开始获取加密数据并加密
	scanf(&quot;%s&quot;,str);
	pos = 0;
	abc_pos = 0;
	while(1)
	{
		if(str[abc_pos] != 0 &amp;&amp; str[abc_pos+1] != 0)
		{
			a = str[abc_pos++];
			b = str[abc_pos++];
		}
		else
			break;
		x1 = x2 = y1 = y2 = -1;
		for(i=0; i&lt;5; ++i)
			for(j=0; j&lt;5; ++j)
				if(bar[i][j] == a)
					x1 = i,y1 = j;
		for(i=0; i&lt;5; ++i)
			for(j=0; j&lt;5; ++j)
				if(bar[i][j] == b)
					x2 = i,y2 = j;
		if(x1 == -1 || x2 == -1 || y1 == -1 || y2 == -1)	//存在一个密码表中找不到的
		{
			res[pos++] = a;
			res[pos++] = b;
		}
		else if(x1 == x2 || y1 == y2)//都在密码表中找到,但是同行或同列
			{
				res[pos++] = b;
				res[pos++] = a;
			}
			else //都在密码表中找到，不同行或不同列
			{
				res[pos++] = bar[x1][y2];
				res[pos++] = bar[x2][y1];
			}
	}
	if(strlen(str)%2 == 1)
		res[pos++] = str[strlen(str)-1];
	res[pos] = 0;
	printf(&quot;%s\n&quot;,res);
	return 0;
}
[/code]

[/toggle]

[note]
<span style="color: #ff6600;"><big><strong>试题需要使用PDF阅读器打开</strong></big></span>
[/note]

试题下载
<ul>
	<li>[download link="http://www.aemiot.com/download/2011第二届蓝桥杯C程序设计省赛试题.rar"]<span style="color: #050505;"><big><b>  本地下载</b></big></span>[/download]</li>
</ul>
[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>379</wp:post_id>
		<wp:post_date>2013-01-01 14:07:57</wp:post_date>
		<wp:post_date_gmt>2013-01-01 06:07:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>2011blue</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="2011"><![CDATA[2011]]></category>
		<category domain="post_tag" nicename="%e5%88%9d%e8%b5%9b"><![CDATA[初赛]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e8%93%9d%e6%a1%a5%e6%9d%af"><![CDATA[蓝桥杯]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[2011%e8%93%9d%e6%a1%a5%e6%9d%af%e5%88%9d%e8%b5%9b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869131]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2013第一场雪。我回来了，竞赛！</title>
		<link>http://www.aemiot.com/2013acm.html</link>
		<pubDate>Fri, 04 Jan 2013 07:47:17 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=391</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.aemiot.com/wp-content/uploads/2013/01/snow2b.jpg" rel="attachment wp-att-390"><img class="alignleft size-full wp-image-390" alt="snow2b" src="http://www.aemiot.com/wp-content/uploads/2013/01/snow2b.jpg" width="1024" height="768" /></a>
2013年的第一场雪。
这也就宣告了大一上学期的结束。
在雪中回顾这个学期，从刚开学对梦想的坚定，到后来越来越迷茫，越来越不淡定，真是感悟颇深。

刚开学，带着高考失利的抑郁，刚开学，怀着2012NOIP的不甘。

迅速从pascal到C/C++的转型，但我深知语言的熟练度，这是一个时间就能换来的东西，如果我不能再其他方面做出突破的话，终将成为失败者。

学习C++的过程中，完成了2个项目。一个是猜数字的游戏，写的过程中我感受到了C系列语言的魅力所在。另一个是密码管理器，这个程序是我目前以来写的最长的代码（接近4000行），它让我感触到了OOP的好处，同时也加强了我对STL的熟练程度。

我以为竞赛从此退出我的人生舞台，我应该学习更多的新兴技术。

中软国际的讲座，让我更加清楚的知道语言并不是最重要的。（毕竟现在都学了3门语言了，也能明白一些吧）。

也让我明白，现在企业都需要人才，而此时的我们如果自命不凡，却没真本事，日后又如何担当得起肩上的责任呢。

这是当时回答一个问题获得的奖励，小小的晒下。

<a href="http://www.aemiot.com/wp-content/uploads/2013/01/DSC01581.jpg" rel="attachment wp-att-393"><img class="alignleft size-full wp-image-393" alt="DSC01581" src="http://www.aemiot.com/wp-content/uploads/2013/01/DSC01581.jpg" width="1024" height="768" /></a>
接下来是，计协举办的一次比赛中，这场比赛让我发现自己对HTML/CSS了解甚少，因为之前接触网页设计很大一部分都过度依赖 Dw 了

虽然拿到一等奖了，但这样的奖并不能代表什么吧，因为这场比赛真正的高手都没来参赛。

话说，这次比赛的奖品是一个U盘，这个我还是挺喜欢的，晒晒....

<a href="http://www.aemiot.com/wp-content/uploads/2013/01/DSC01642.jpg" rel="attachment wp-att-394"><img class="alignleft size-full wp-image-394" alt="DSC01642" src="http://www.aemiot.com/wp-content/uploads/2013/01/DSC01642.jpg" width="1024" height="768" /></a>

而再接下来相对的就是噩梦了

像英语和数学这样底层而又重要的东西，稍加不注意，就会将你送向黄泉。我是越来越迷茫，究竟怎样通向成功的道路，我没有走错路而返回的机会，因为我现在要追逐的是往昔所见到的高手，而在我前行的过程中，他们也在前行，他们是一个模糊的背影。而我并不甘心只跟随者他们的身后，我希望有一天我能超越他们。

一段时间的苦思终究，没有结果。

终于，我做出了一个决定，去问问老师。

跟老师聊了一个小时，他能给我的评价仅仅是有志青年，而不能说明我的编程能力怎么样，像我这样而最后失败了的学生也是有的。无疑，我的担心并不是虚无的，当然我一定要想办法摆脱这种困境，而老师给我指的路，就是继续我的竞赛之路。

当晚，我没有睡着，我虽然觉得写竞赛题是一种乐趣，但竞赛这条路是风雪交加的，在这里会遭遇全国各大高手，我害怕再一次的失败。

不过这不正是我想要的，因为只有这样才能不断提升自己。虽然这样一条路并不是适合每一个程序员，但是这样的路对于我们高中竞赛选手来说，应该是个好去处。

因为大学是一切的开始，放下了高考包袱的我们，真正的竞赛现在才开始。

而在没有竞赛的一个学期中，我也看到了自己的编程能力并没有多大的提高。

2013年，我决定重新踏上竞赛之路！

<a href="http://www.aemiot.com/wp-content/uploads/2013/01/snow1b.jpg" rel="attachment wp-att-389"><img class="alignleft size-full wp-image-389" alt="snow1b" src="http://www.aemiot.com/wp-content/uploads/2013/01/snow1b.jpg" width="1024" height="526" /></a>

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>391</wp:post_id>
		<wp:post_date>2013-01-04 15:47:17</wp:post_date>
		<wp:post_date_gmt>2013-01-04 07:47:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>2013acm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="2013"><![CDATA[2013]]></category>
		<category domain="post_tag" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="category" nicename="yrz"><![CDATA[生活杂记]]></category>
		<category domain="post_tag" nicename="%e9%9b%aa"><![CDATA[雪]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[389]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869132]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>69</wp:comment_id>
			<wp:comment_author><![CDATA[翼]]></wp:comment_author>
			<wp:comment_author_email>395025150@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://网址（选填）</wp:comment_author_url>
			<wp:comment_author_IP>115.150.34.219</wp:comment_author_IP>
			<wp:comment_date>2013-01-26 21:17:20</wp:comment_date>
			<wp:comment_date_gmt>2013-01-26 13:17:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[全力支持！！！]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1359206240.269649028778076171875;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>其实，英语题很简单 - ACM水题题解</title>
		<link>http://www.aemiot.com/en-easy.html</link>
		<pubDate>Sun, 06 Jan 2013 18:03:41 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=410</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目描述</h1>
xuanbin的英语一直拖着他的后腿，但是他最近找到了一种高效的学习方法。所以，他的英语功力呈直线往上飙。下面这题对于他来说，小菜一碟，现在试 试你的功力。
给你一段英文原文,由单词（每个单词长度小于等于20）和空格组成，以#字符结束，单词数小于等于300个。然后给出此段原文中的一个句子以#字符结
束，句子中最多包含30个单词（这个句子中挖去了一个单词用下划线代替），请你找出这个下划线上应填的单词并输出。（题目确保这个挖去的单词是一个
完整的单词，并且只有唯一的答案）。具体输入输出见样列。
<h1>样例输入</h1>
where is hero from #
where is _ from #
<h1>样例输出</h1>
hero
<h1>出题人</h1>
wenge&amp;xianbin
<h1>题解及代码</h1>
[note]
<strong><span style="color: #ff6600;">1.在英语考试前放出此题代码以求英语不挂。</span></strong>
<strong> <span style="color: #ff6600;"> 2.因考试在即，日后写解析,见谅。</span></strong>
[/note]

[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;sstream&gt;
using namespace std;

vector&lt;string&gt; wordvec,question;
vector&lt;string&gt;::iterator first_seek(vector&lt;string&gt;::iterator itor)
{
	for(vector&lt;string&gt;::iterator i = wordvec.begin(); i != wordvec.end(); ++i)
		if( *i == *question.begin() )	return i;
		return wordvec.end();
}

vector&lt;string&gt;::iterator se_seek(vector&lt;string&gt;::iterator itor)
{
	for(vector&lt;string&gt;::iterator i = wordvec.begin(); i != wordvec.end(); ++i)
		if( *i == *(question.begin()+1) )	return i;
		return wordvec.end();
}

string seek(void)
{
	vector&lt;string&gt;::iterator first = wordvec.begin();
	if(*question.begin() != &quot;_&quot;)
		while((first = first_seek(first)) != wordvec.end())
		{
			vector&lt;string&gt;::iterator temp = first;
			string val;
			for(vector&lt;string&gt;::iterator itor = question.begin(); itor != question.end(); ++itor)
			{
				if(*itor == &quot;_&quot; &amp;&amp; itor != question.end()-1)
				{
					val = *temp;
					++temp;
					continue;
				}
				if(*itor == &quot;_&quot; &amp;&amp; itor == question.end()-1)
					return  *temp;
				if(*temp == *itor &amp;&amp; itor != question.end()-1)
				{
					++temp;
					continue;
				}
				if(*temp == *itor &amp;&amp; itor == question.end()-1)
					return val;
				if(*temp != *itor &amp;&amp; *itor != &quot;_&quot;)
					break;
			}
		}
	else
	{
		while((first = se_seek(first)) != wordvec.end())
		{
			vector&lt;string&gt;::iterator temp = first;
			string val;
			for(vector&lt;string&gt;::iterator itor = question.begin()+1; itor != question.end(); ++itor)
			{
				if(*temp == *itor &amp;&amp; itor != question.end()-1)
				{
					++temp;
					continue;
				}
				if(*temp == *itor &amp;&amp; itor == question.end()-1)
					return *(first-1);
				if(*temp != *itor)
					break;
			}
		}
	}
}
int main(void)
{
	string temp,str;

	getline(cin,str,'#');
	istringstream strm(str);
	while(strm &gt;&gt; temp)
		wordvec.push_back(temp);
	getline(cin,str,'#');
	strm.clear();
	strm.str(str);
	while(strm &gt;&gt; temp)
		question.push_back(temp);
	cout &lt;&lt; seek() &lt;&lt; endl;
	return 0;
}
[/code]

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>410</wp:post_id>
		<wp:post_date>2013-01-07 02:03:41</wp:post_date>
		<wp:post_date_gmt>2013-01-06 18:03:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>en-easy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="post_tag" nicename="%e6%a8%a1%e6%8b%9f"><![CDATA[模拟]]></category>
		<category domain="post_tag" nicename="%e7%ae%97%e6%b3%95"><![CDATA[算法]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e8%8b%b1%e8%af%ad"><![CDATA[英语]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e5%85%b6%e5%ae%9e%ef%bc%8c%e8%8b%b1%e8%af%ad%e9%a2%98%e5%be%88%e7%ae%80%e5%8d%95-acm%e6%b0%b4%e9%a2%98%e9%a2%98%e8%a7%a3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869133]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>百度之星2013.01.10第一题题解</title>
		<link>http://www.aemiot.com/baidu-star-2013-01-10-one-program.html</link>
		<pubDate>Fri, 11 Jan 2013 05:59:58 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=417</guid>
		<description></description>
		<content:encoded><![CDATA[<h2><a href="/index.php?r=home/detail&amp;id=18">2013年1月10号竞赛题目一</a></h2>
<strong>主办方：</strong>百度公司

<strong>时间：</strong>2013-01-10 18:00 至 2013-01-11 01:30
<div>

&nbsp;

聚会游戏
<div align="center">

<hr align="center" noshade="noshade" size="2" width="100%" />

</div>
<p align="center">Time Limit: 1 Seconds   Memory Limit: 65536K</p>

<div align="center">

<hr align="center" noshade="noshade" size="2" width="100%" />

</div>
&nbsp;

百度之星总决赛即是一群编程大牛一决高下的赛场，也是圈内众多网友难得的联欢，在为期一周的聚会中，总少不了各种有趣的游戏。

某年的总决赛聚会中，一个有趣的游戏是这样的：

&nbsp;

游戏由Robin主持，一共有N个人参加（包括主持人），Robin让每个人说出自己在现场认识的人数（如果A认识B，则默认B也认识A），在收到所有选手报出的数据后，他来判断是否有人说谎。Robin说，如果他能判断正确，希望每位选手都能在毕业后来百度工作。

为了帮Robin留住这些天才，现在请您帮他出出主意吧~

特别说明：

1. 每个人都认识Robin；

2. 认识的人中不包括自己；

&nbsp;

<strong>Input</strong>

&nbsp;

输入数据包含多组测试用例，每组测试用例有2行，首先一行是一个整数N (1&lt;N&lt;=100)，表示参加游戏的全部人数，接下来一行包括N-1个整数，表示除主持人以外的其余人员报出的认识人数。

N为0的时候结束输入。

&nbsp;

<strong>Output</strong>

&nbsp;

请根据每组输入数据，帮助主持人Robin进行判断：

如果确定有人说谎，请输出“Lie absolutely”

否则，请输出“Maybe truth”

每组数据的输出占一行。

&nbsp;

<strong>Sample Input</strong>

7

5 4 2 3 1 5

7

3 4 2 2 2 3

0

&nbsp;

<strong>Sample Output</strong>

Lie absolutely

Maybe truth

&nbsp;

这题应该不难。

我解题的突破口是主持人带给我的，因为我觉得对数据的第一个处理应该是每个人减去一个认识的人，之后就可以排除掉主持人了。

对于这个过程进行拓展可归纳为如下过程：

A为数组，存放读入数据

man为参加游戏人数

n为数据个数，n=man-1

将读入数据进行从大到下排序（这样最后对认识人少的人执行判断，可以给他们更多选择余地）。

每个数据自减1。（除去认识的主持人）

对A(0)-A(n-1) 的每个数据进行判断（判定过程：当前要判定数据记作A(k)，我们从A(k+1)-A(n)之中找出A( k)个在数组中尽可能靠前的非零数据自减1。如果这个过程能够完成，那么就将A(k)变为0，继续下一个数据判定；如果不能完成，那么有人说谎）

如果所有数据都判定为真，最终数据都变成0的话，那么没有人说谎。

&nbsp;

对于样例输入的第一组数据的判定过程：

5 4 2 3 1 5

5 5 4 3 2 1

4 4 3 2 1 0 （除去每个人都认识的主持人）

0 3 2 1 0 0

这是在 A1的后面找不出3个非零数据，因此有人说谎

&nbsp;

对于样例输入的第二组数据的判定过程：

3 4 2 2 2 3

4 3 3 2 2 2

3 2 2 1 1 1（除去每个人都认识的主持人）

0 1 1 0 1 1

0 0 0 0 1 1

0 0 0 0 0 0

全部都为真，因此没有人说谎。

&nbsp;

附上我的代码：
[code lang="cpp"]

#include&lt;iostream&gt;
using namespace std;
int main(void)
{
    int num;
    while(cin&gt;&gt;num,num)
    {
        int arr[100]={0},res = 1;//res表示当前是否有人说谎，默认没有人说谎
        //读入数据，并且每个人自减1（减去认识的主持人）
        for(int n=0; n &lt; num -1; ++n)
        {
            cin&gt;&gt;arr[n];
            --arr[n];
        }
        //从大到小排序，因为数据范围较小，采用选择排序
        for(int i=0; i &lt; num -1; ++i)
        {
            int max = i;
            int t;
            for(int j=i+1; j &lt; num -1; ++j)
                if(arr[j]&gt;arr[max]) max = j;
            t = arr[max],arr[max] = arr[i],arr[i] =t;
        }
        //判定开始
        for(int i=0; i&lt;num-2 &amp;&amp; res==1; ++i)
        {
            int minip = i+1;
            if(!arr[i]) continue;
            for(int j=0; j&lt;arr[i]; ++j,++minip)
            {
                if(!arr[minip])
                {
                    if(minip == num-1)   { res=0;break; }//发现有人说谎
                    --j;
                    continue;
                }
                --arr[minip];//执行自减
            }
            arr[i] = 0;
        }
        //最后一次核查，避免输入数据为下面的情况，因为我们没有对最后一个数据判定
        //2
        //9
        //0
        for(int i=0; i&lt;num-1; ++i)
            if(arr[i]) res = 0;
        //输出结果
        if(res) cout &lt;&lt; &quot;Maybe truth&quot; &lt;&lt; endl;
        else cout &lt;&lt; &quot;Lie absolutely&quot; &lt;&lt; endl;
    }
}
[/code]

</div>

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>417</wp:post_id>
		<wp:post_date>2013-01-11 13:59:58</wp:post_date>
		<wp:post_date_gmt>2013-01-11 05:59:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>baidu-star-2013-01-10-one-program</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="2013"><![CDATA[2013]]></category>
		<category domain="post_tag" nicename="%e7%99%be%e5%ba%a6%e4%b9%8b%e6%98%9f"><![CDATA[百度之星]]></category>
		<category domain="post_tag" nicename="%e7%ae%97%e6%b3%95"><![CDATA[算法]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869134]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>不用中间变量实现交换过程</title>
		<link>http://www.aemiot.com/cpp-swap.html</link>
		<pubDate>Mon, 14 Jan 2013 13:11:29 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=424</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>传统的交换</strong>是采用的中间变量的实现。

实现过程如下：

定义中间变量 t , 要交换的两个元素分别为 a,b。

t = a;

a = b;

b = t;

这样在工程中，<strong>额外</strong>使用了一个变量 t。基于这样一种<strong>倒墨水式算法</strong>（交换AB两瓶中墨的方法），是不能避免使用一个中间变量的。但是在现实中，当你遇到墨水装错瓶子的时候，我相信你会更情愿直接交换两个墨水瓶的标签，而不是三个瓶子倒来倒去。当然我们不可能在程序中采用这种方法。但倒墨水式的算法并<strong>不是</strong>解决交换问题的<strong>唯一</strong>算法，这是我们需要明确的（数学是伟大的）。

下面介绍一种不使用中间变量的交换方法（假设要交换元素分别为a,b）：
<ul>
	<li>a ← a+b</li>
	<li>b ← a-b</li>
	<li>a ← a-b</li>
</ul>
使用程序，验证一下

[code lang="cpp"]
#include&lt;stdio.h&gt;
int main(void)
{
    int a=2,b=3;
    a = a+b;
    b = a-b;
    a = a-b;
    printf(&quot;a=%d,b=%d\n&quot;,a,b);
    return 0;
}
[/code]

输出结果为：

<strong><span style="color: #ff6600;">a=3,b=2</span></strong>

可见交换<strong>成功</strong>了。

分析它的实现过程，进行推广得知

t = fun(x,y)是二元<strong>原函数</strong>

f1(t,x)和f2(t,y)是它的两个<strong>反函数</strong>

那么存在以下三个关系：

t = fun(x,y)

x = f1(t,y)

y = f2(t,x)

省去中间变量t，可以得知以下三个表达式即可完成交换（C语言描述，其中 fun是原函数，f1,f2是它的两个反函数）

<strong>x = fun(x,y);</strong>

<strong>y = f1(t,y);</strong>

<strong>x = f2(t,x);</strong>

按照这个推广的结论，乘除，平方开方也能够完成一部分交换，之所以说他们只能完成一部分交换，因为除法运算的定义域不是R，开方运算的定义域也不是R）。所以乘法和平方在这个算法中都不是一个好的原函数。其中对于整型数来说，最为理想的原函数应该是异或运算，因为异或运算的反函数是它本身。

那我们来看看，使用异或的交换

[code lang="cpp"]
#include &lt;stdio.h&gt;
int main(void)
{
    int a=2,b=3;
    a ^= b;
    b ^= a;
    a ^= b;
    printf(&quot;a=%d,b=%d\n&quot;,a,b);
    return 0;
}
[/code]

输出结果为：

<strong><span style="color: #ff6600;">a=3,b=2</span></strong>

可见交换<strong>成功</strong>了。

因为异或的特性，在不使用中间变量的交换中，我们<strong>通常</strong>使用它作为原函数。

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>424</wp:post_id>
		<wp:post_date>2013-01-14 21:11:29</wp:post_date>
		<wp:post_date_gmt>2013-01-14 13:11:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cpp-swap</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e4%b8%ad%e9%97%b4%e5%8f%98%e9%87%8f"><![CDATA[中间变量]]></category>
		<category domain="post_tag" nicename="%e4%ba%a4%e6%8d%a2"><![CDATA[交换]]></category>
		<category domain="post_tag" nicename="%e7%ae%97%e6%b3%95"><![CDATA[算法]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e4%b8%8d%e7%94%a8%e4%b8%ad%e9%97%b4%e5%8f%98%e9%87%8f%e5%ae%9e%e7%8e%b0%e4%ba%a4%e6%8d%a2%e8%bf%87%e7%a8%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869135]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[noway]]></wp:comment_author>
			<wp:comment_author_email>oneemail@email.com</wp:comment_author_email>
			<wp:comment_author_url>http://网址（选填）</wp:comment_author_url>
			<wp:comment_author_IP>106.224.19.188</wp:comment_author_IP>
			<wp:comment_date>2013-01-17 23:41:15</wp:comment_date>
			<wp:comment_date_gmt>2013-01-17 15:41:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[利用加减/乘除 来还原数据面对有符号整数是绝对不妥的。
抑或运算  是最可取的办法。
~。~可惜不是所有 数据交换都是定点数。]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1358437275.675879001617431640625;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>25</wp:comment_id>
			<wp:comment_author><![CDATA[Aem]]></wp:comment_author>
			<wp:comment_author_email>Aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>115.151.184.18</wp:comment_author_IP>
			<wp:comment_date>2013-01-18 17:15:27</wp:comment_date>
			<wp:comment_date_gmt>2013-01-18 09:15:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="#comment-24" rel="nofollow">@noway </a> :-? 加减还好吧，注意数据范围就是.而且它还更好的体现了这种二元函数与反函数的关系，最重要的是如果要交换浮点数，异或是不行的，但是加减可以做到..乘除肯定不行，一个0就不能进行除法了，而且范围也非常有限。。。不过还是异或交换用的多就是]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>24</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1358500527.6938869953155517578125;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"Eluckv";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>《仙五前传》通关经历及感触</title>
		<link>http://www.aemiot.com/xj5bf.html</link>
		<pubDate>Fri, 18 Jan 2013 21:32:24 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=451</guid>
		<description></description>
		<content:encoded><![CDATA[<object width="257" height="33" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="src" value="http://www.xiami.com/widget/12671923_1771386503/singlePlayer.swf" /><param name="wmode" value="transparent" /><embed width="257" height="33" type="application/x-shockwave-flash" src="http://www.xiami.com/widget/12671923_1771386503/singlePlayer.swf" wmode="transparent" /></object>

等了半年多，终于迎来了《仙剑奇侠传五-前传》的发售。1.14日中午开放的下载，虽然当时官网很卡，不过在我无数次的刷新下，进到了下载页面，凭借强大的迅雷离线功能迅速下好了仙五前传的客户端和配音包。安装好客户端，果断买个数字版先，等待凌晨开放激活。

终于凌晨到了，10分钟的排队，终于激活成功。进到游戏画面

<a href="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_14_16_20_32.jpg" rel="attachment wp-att-441"><img class="alignleft size-full wp-image-441" alt="screen2013_1_14_16_20_32" src="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_14_16_20_32.jpg" width="576" height="324" /></a>

画面还是如此的绚丽(要是把回合制改成即时制多好！！)，只是这傍晚的海景，让我看了不得不感叹，又是一场华丽丽的悲剧啊！哎~~点击新的征程，发现这次多了个选择战斗难度（如此也好，省的有些想要看剧情的找修改器），一共有3种选择，分别是简单、一般、困难。我果断选择了一般模式（我可不是游戏达人，一般就好）。

正式游戏开始，首先映入眼帘的是男主角--夏侯瑾轩，一看就是文人（带有贵族气质，看来大宇的美工没偷懒，话说古剑奇谭的那个书呆子就画得让我很伤），个人挺喜欢的。难得出门的大少爷，一出门就遇到女主角--瑕（挺漂亮的，话说这个另类名字的背后是有一个悲伤故事的）和大叔--谢沧行（不得不说他怎么这么像古剑的那位尹千觞大叔，无论性格，还是身份，他们都很相似）。

期间在城镇中，我发现了第一个软星包子。挑战它，需要完成卡牌小游戏（这不是对对碰么~无语），赢了之后会获得卡牌和糖豆，满足某些条件还可以获得称号，到这里我才发现仙五前传中加入卡牌系统（奸商啊，一看就是借机宣传仙剑逍遥游，话说我买了那卡牌，找不到人玩，说好的网络版到现在都没开放）和称号系统（称号是有效果的哦，可以装备的）。附上卡牌游戏截图一张

<a href="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_14_17_40_5.jpg" rel="attachment wp-att-442"><img class="alignleft size-full wp-image-442" alt="screen2013_1_14_17_40_5" src="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_14_17_40_5.jpg" width="576" height="324" /></a>

经过一段剧情的发展，在仙五中有出现的第一个人物姜承（后来改名姜世离）也登场了，他一上来，我脑海中就涌起了各种仙五中没有交代清楚的问题。接下来剧情让男女主角和谢沧行、姜承一共4人踏上了去折剑山庄的道路，而这一路也让人感觉到一场悲剧即将开始。对了，路上还遇到了重义气的半魔厉岩（后来江湖人称血手，呵呵，熟悉了吧）。

到了折剑山庄，随着枯木的登场，一场悲剧正式开始。姜承被赶出折剑山庄，被指责杀害大师兄（这不是跟百里屠苏那部分一样么！！这是哪出戏啊）...哎，不得不说，枯木太狠了。不过这期间，皇甫一鸣也真是的，害苦了人间欧阳英啊~也让枯木的阴谋得逞了。

<a href="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_11_50_2.jpg"><img class="alignleft size-full wp-image-477" alt="screen2013_1_15_11_50_2" src="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_11_50_2.jpg" width="576" height="324" /></a>

之后，在楼兰遇见凌波和龙溟，又让我想到仙五剧情了~~随着他们二人的感情发展，凌波帮助龙溟取得神农鼎，龙溟向凌波表明了自己的心意，龙溟负伤前往神降密境却牺牲了，凌波一直等，最终被被冰封。哎，仙五又一个面团揭开了，泪流满面呐，悲剧，悲剧，还是悲剧。

在枯木的精心布局下，最终姜承变成了姜世离（被世人离弃，故化名世离）。随着姜世离知晓自己的身份，他担当起魔君，给人界的魔族一个安家之地。这一行为，在蜀山看来也是善举，但最终在枯木的唆使下，姜世离为了破坏神魔之井封印，而与整个武林及蜀山为敌。

<a href="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_17_11_56_42.jpg" rel="attachment wp-att-448"><img class="alignleft size-full wp-image-448" alt="screen2013_1_17_11_56_42" src="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_17_11_56_42.jpg" width="576" height="324" /></a>

净天教攻打蜀山，姜世离攻击神魔之井封印，在这样的情况下，谢沧行（罡斩）使用自己的灵魂加固蜀山封印，并重创枯木真身（魔翳），哎，又一角色牺牲了。

另外在净天教攻击蜀山之时，还见到了夏侯韬（二叔）的衣角，众人都以为夏侯韬战死，夏侯瑾轩和他父亲更是冲上覆天顶，却不料他父亲死于枯木之手，而枯木说出所用身体是夏侯韬的，众人意识到原来之前在蜀山的那一幕，只是个枯木布置好的局。随着夏侯韬身体的崩坏，枯木盯准了瑕的身体，夺取了瑕的躯体，并且说出了所有真相，这一举动，可彻底惹恼了夏侯瑾轩，而枯木使用瑕的身体，却不能完全控制（瑕的魂听到了瑾轩的声音，阻止枯木的行动），在这种情况下，瑾轩用剑刺入瑕的身体，泪奔之下，瑾轩跳崖，最终男女主角双双坠崖身亡，从此夏侯家的由远房弟子继承，哎，悲剧，悲剧。

<a href="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_17_16_35_44.jpg"><img class="alignleft size-full wp-image-462" alt="screen2013_1_17_16_35_44" src="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_17_16_35_44.jpg" width="576" height="324" /></a>

最终，唯一活下来的主角就只有暮菖兰了（又死这么多人，该死的魔翳，害死这么多人啊）。
&nbsp;
<h1>接下来附上一些有趣的图</h1>
&nbsp;
<h2 style="text-align: center;"><a href="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_11_23_42.jpg"><img class="alignleft size-full wp-image-444" alt="screen2013_1_15_11_23_42" src="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_11_23_42.jpg" width="576" height="324" /></a><span style="color: #ff6600;"><big>长得真有趣的石头人</big></span></h2>
&nbsp;
<h2 style="text-align: center;"><a href="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_11_38_15.jpg"><img class="alignleft size-full wp-image-445" alt="screen2013_1_15_11_38_15" src="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_11_38_15.jpg" width="576" height="324" /></a><span style="color: #ff6600;"><big>草谷原来真的很漂亮</big></span></h2>
&nbsp;
<h2 style="text-align: center;"><a href="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_6_10_32.jpg"><img class="alignleft size-full wp-image-443" alt="screen2013_1_15_6_10_32" src="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_6_10_32.jpg" width="576" height="324" /></a><span style="color: #ff6600;"><big>瑾轩和瑕的合击技</big></span></h2>
&nbsp;
<h2 style="text-align: center;"><a href="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_12_44_38.jpg"><img class="alignleft size-full wp-image-450" alt="screen2013_1_15_12_44_38" src="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_12_44_38.jpg" width="576" height="324" /></a><span style="color: #ff6600;"><big>凌波和龙溟的合击技</big></span></h2>
&nbsp;
<h2 style="text-align: center;"><a href="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_13_17_19.jpg"><img class="alignleft size-full wp-image-447" alt="screen2013_1_15_13_17_19" src="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_15_13_17_19.jpg" width="576" height="324" /></a><span style="color: #ff6600;"><big>暧昧时刻</big></span></h2>
&nbsp;
<h2 style="text-align: center;"><a href="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_16_14_27_40.jpg"><img class="alignleft size-full wp-image-446" alt="screen2013_1_16_14_27_40" src="http://www.aemiot.com/wp-content/uploads/2013/01/screen2013_1_16_14_27_40.jpg" width="576" height="324" /></a><span style="color: #ff6600;"><big>血手暴走</big></span></h2>
&nbsp;
总的来说呢，这游戏做的还不错，荒废3天寒假玩仙剑算是值了，该交代的都交代清楚了，剧情也很感人（-_-！又是悲剧），另外最终BOSS也太弱了吧。
还有不得不吐槽下价格，大量使用仙五素材，还和仙五一样的价格！！
据说豪华版出了问题，葫芦MP3内存标称2Gb，实际只有100Mb，哎，软星被坑了，顾客也被坑了，鄙视那个MP3制造商，修改大小，欺骗客户。

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>451</wp:post_id>
		<wp:post_date>2013-01-19 05:32:24</wp:post_date>
		<wp:post_date_gmt>2013-01-18 21:32:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xj5bf</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e4%bb%99%e4%ba%94%e5%89%8d%e4%bc%a0"><![CDATA[仙五前传]]></category>
		<category domain="post_tag" nicename="%e4%bb%99%e5%89%91%e5%a5%87%e4%be%a0%e4%bc%a0%e4%ba%94%e5%89%8d%e4%bc%a0"><![CDATA[仙剑奇侠传五前传]]></category>
		<category domain="category" nicename="yrz"><![CDATA[生活杂记]]></category>
		<category domain="post_tag" nicename="%e9%80%9a%e5%85%b3"><![CDATA[通关]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[441]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869136]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>26</wp:comment_id>
			<wp:comment_author><![CDATA[Magloy]]></wp:comment_author>
			<wp:comment_author_email>1239649295@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://网址（选填）</wp:comment_author_url>
			<wp:comment_author_IP>117.136.21.205</wp:comment_author_IP>
			<wp:comment_date>2013-01-20 23:45:22</wp:comment_date>
			<wp:comment_date_gmt>2013-01-20 15:45:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[这么快... 8-O]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1358696722.3506720066070556640625;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>27</wp:comment_id>
			<wp:comment_author><![CDATA[翼]]></wp:comment_author>
			<wp:comment_author_email>395025150@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://网址（选填）</wp:comment_author_url>
			<wp:comment_author_IP>115.148.71.106</wp:comment_author_IP>
			<wp:comment_date>2013-01-23 23:20:22</wp:comment_date>
			<wp:comment_date_gmt>2013-01-23 15:20:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[赞 :wink:     仙剑系列画面这个版本的我超挺]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1358954422.599605083465576171875;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>28</wp:comment_id>
			<wp:comment_author><![CDATA[Aem]]></wp:comment_author>
			<wp:comment_author_email>Aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>117.42.172.94</wp:comment_author_IP>
			<wp:comment_date>2013-01-23 23:38:21</wp:comment_date>
			<wp:comment_date_gmt>2013-01-23 15:38:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="#comment-27" rel="nofollow">@翼 </a>恩...荒废了我3天时间..]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>27</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1358955501.031467914581298828125;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"Eluckv";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>66</wp:comment_id>
			<wp:comment_author><![CDATA[Aem]]></wp:comment_author>
			<wp:comment_author_email>aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>117.42.173.118</wp:comment_author_IP>
			<wp:comment_date>2013-01-25 02:33:18</wp:comment_date>
			<wp:comment_date_gmt>2013-01-24 18:33:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="#comment-26" rel="nofollow">@Magloy </a>对，就是这么快 8)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>26</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1359052398.2951090335845947265625;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"Eluckv";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>仙五音乐精选</title>
		<link>http://www.aemiot.com/x5-musicjx.html</link>
		<pubDate>Fri, 25 Jan 2013 11:57:40 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=523</guid>
		<description></description>
		<content:encoded><![CDATA[<object width="576" height="346" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"><param name="src" value="http://www.xiami.com/widget/12671923_1770365675,1770365672,1770289270,1770318578,1770488512,1770201911,1770488496,_576_346_5695c1_457cb4_1/multiPlayer.swf" /><param name="wmode" value="opaque" /><embed width="576" height="346" type="application/x-shockwave-flash" src="http://www.xiami.com/widget/12671923_1770365675,1770365672,1770289270,1770318578,1770488512,1770201911,1770488496,_576_346_5695c1_457cb4_1/multiPlayer.swf" wmode="opaque" /></object>

玩过仙五前传之后，再回头来听听仙五的音乐，是否有种不一样的感觉？

前传中第一次看到唐风，有没有想到唐雨柔的悲剧命运？

前传中第一次看到龙溟和凌波，有没有想到蜀山秘洞？

前传中第一次看到欧阳慧，有没有觉得很可爱？

...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>523</wp:post_id>
		<wp:post_date>2013-01-25 19:57:40</wp:post_date>
		<wp:post_date_gmt>2013-01-25 11:57:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>x5-musicjx</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e4%bb%99%e5%89%91%e4%ba%94%ef%bc%8c%e4%bb%99%e5%89%91%e4%ba%94%e5%89%8d%e4%bc%a0%ef%bc%8c%e9%9f%b3%e4%b9%90"><![CDATA[仙剑五，仙剑五前传，音乐]]></category>
		<category domain="category" nicename="yrz"><![CDATA[生活杂记]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e4%bb%99%e4%ba%94%e9%9f%b3%e4%b9%90%e7%b2%be%e9%80%89]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[531]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869137]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.aemiot.com/?p=642</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=642</guid>
		<description></description>
		<content:encoded><![CDATA[关于C语言中的结构体对齐。
(1)什么是字节对齐
一个变量占用 n 个字节，则该变量的起始地址必须能够被 n 整除，即: 存放起始地址 % n = 0， 对于结构体而言，这个 n 取其成员种的数据类型占空间的值最大的那个。
(2)为什么要字节对齐
内存空间是按照字节来划分的，从理论上说对内存空间的访问可以从任何地址开始，但是在实际上不同架构的CPU为了提高访问内存的速度，就规定了对于某些类型的数据只能从特定的起始位置开始访问。这样就决定了各种数据类型只能按照相应的规则在内存空间中存放，而不能一个接一个的顺序排列。
举个例子，比如有些平台访问内存地址都从偶数地址开始，对于一个int型(假设32位系统)，如果从偶数地址开始的地方存放，这样一个读周期就可以读出这个int数据，但是如果从奇数地址开始的地址存放，就需要两个读周期，并对两次读出的结果的高低字节进行拼凑才能得到这个int数据，这样明显降低了读取的效率。
(3)如何进行字节对齐
每个成员按其类型的对齐参数(通常是这个类型的大小)和指定对齐参数(不指定则取默认值)中较小的一个对齐，并且结构的长度必须为所用过的所有对齐参数的整数倍,不够就补空字节。
这个规则有点苦涩，可以把这个规则分解一下，前半句的意思先获得对齐值后与指定对齐值进行比较,其中对齐值获得方式如下：
1. 数据类型的自身对齐值为：对于char型数据，其自身对齐值为1，对于short型为2，对于int, long, float类型，其自身对齐值为4，对于 double 类型其自身对齐值为8，单位为字节。
2.结构体自身对齐值：其成员中自身对齐值最大的那个值。
其中指定对齐值获得方式如下：
#pragma pack (value)时的指定对齐值value。
未指定则取默认值。
后半句的意思是主要是针对于结构体的长度而言，因为针对数据类型的成员，它仅有一个对齐参数，其本身的长度、于这个对齐参数，即1倍。对于结构体而言，它可能使用了多种数据类型，那么这句话翻译成对齐规则： 每个成员的起始地址 % 自身对齐值 = 0，如果不等于 0 则先补空字节直至这个表达式成立。
换句话说，对于结构体而言，结构体在在内存的存放顺序用如下规则即可映射出来：
(一)每个成员的起始地址 % 每个成员的自身对齐值 = 0，如果不等于 0 则先补空字节直至这个表达式成立；
(二)结构体的长度必须为结构体的自身对齐值的整数倍,不够就补空字节。
举个例子：
#pragmapack(8)
structA{
chara;
longb;
};
structB{
chara;
structAb;
longc;
};
structC{
chara;
structAb;
doublec;
};
structD{
chara;
structAb;
doublec;
intd;
};
structE{
chara;
intb;
structAc;
doubled;
};
对于 struct A 来说，对于char型数据，其自身对齐值为1，对于long类型，其自身对齐值为4, 结构体的自身对齐值取其成员最大的对齐值，即大小4。那么struct A 在内存中的顺序步骤为：
(1) char a, 地址范围为0x0000~0x0000,起始地址为0x0000,满足 0x0000 % 1 = 0，这个成员字节对齐了。
(2) long b, 地址起始位置不能从0x00001开始，因为 0x0001 % 4 != 0,　所以先补空字节，直到0x00003结束，即补3个字节的空字节，从0x00004开始存放b,其地址范围为0x00004~0x0007.
(3)此时成员都存放结束，结构体长度为8，为结构体自身对齐值的2倍，符合条件(二).
此时满足条件(一)和条件(二)，struct A 中各成员在内存中的位置为：a*** b ,sizeof(struct A) = 8。(每个星号代表一位，成员各自代表自己所占的位，比如a占一位，b占四位)
对于struct B，里面有个类型为struct A的成员b自身对齐值为4，对于long类型，其自身对齐值为4. 故struct B的自身对齐值为4。那么structB 在内存中的顺序步骤为：
(1) char a, 地址范围为0x0000~0x0000,起始地址为0x0000,满足 0x0000 % 1 = 0，这个成员字节对齐了。
(2) struct A b, 地址起始位置不能从0x00001开始，因为 0x0001 % 4 != 0,　所以先补空字节，直到0x00003结束，即补3个字节的空字节，从0x00004开始存放b,其地址范围为0x00004~0x00011.
(3) long c，地址起始位置从0x000012开始， 因为 0x0012 % 4 = 0，其地址范围为0x00012~0x0015.
(4)此时成员都存放结束，结构体长度为16，为结构体自身对齐值的4倍，符合条件(二).
此时满足条件(一)和条件(二)，struct B 中各成员在内存中的位置为：a*** b c ,sizeof(struct C) = 24。(每个星号代表一位，成员各自代表自己所占的位，比如a占一位，b占八位，c占四位)
对于struct C，里面有个类型为struct A的成员b自身对齐值为4，对于double 类型，其自身对齐值为8. 故struct C的自身对齐值为8。那么struct C 在内存中的顺序步骤为：
(1) char a, 地址范围为0x0000~0x0000,起始地址为0x0000,满足 0x0000 % 1 = 0，这个成员字节对齐了。
(2) struct A b, 地址起始位置不能从0x00001开始，因为 0x0001 % 4 != 0,　所以先补空字节，直到0x00003结束，即补3个字节的空字节，从0x00004开始存放b,其地址范围为0x00004~0x00011.
(3) double c，地址起始位置不能从0x000012开始， 因为 0x0012 % 8 != 0，所以先补空字节，直到0x000015结束，即补4个字节的空字节，从0x00016开始存放c,其地址范围为0x00016~0x0023.
(4)此时成员都存放结束，结构体长度为24，为结构体自身对齐值的3倍，符合条件(二).
此时满足条件(一)和条件(二)，struct C 中各成员在内存中的位置为：a*** b **** c ,sizeof(struct C) = 24。(每个星号代表一位，成员各自代表自己所占的位，比如a占一位，b占八位，c占八位)
对于struct D，自身对齐值为8。前面三个成员与 struct C 是一致的。对于第四成员d，因为 0x0024 % 4 = 0, 所以可以从0x0024开始存放d, 其地址范围为0x00024~0x00027.此时成员都存放结束，结构体长度为28，28 不是结构体自身对齐值8的倍数，所以要在后面补四个空格，即在0x0028~0x0031上补四个空格。补完了，结构体长度为32, 为结构体自
身对齐值的4被，，符合条件(二).
此时满足条件(一)和条件(二)，struct D 中各成员在内存中的位置为：a*** b **** c d **** ,sizeof(struct D) = 32。(每个星号代表一位，成员各自代表自己所占的位，比如a占一位，b占八位，c占八位, d占四位)。
对于struct E 中各成员在内存中的位置为：a*** b c d, sizeof(struct E) = 24。(每个星号代表一位，成员各自代表自己所占的位，比如a占一位，b占四位，c占八位, d占八位)。
通过struct D 和 struct E 可以看出，在成员数量和类型一致的情况，后者的所占空间少于前者，因为后者的填充空字节要少。如果我们在编程时考虑节约空间的话，应该遵循将变量按照类型大小从小到大声明的原则, 这样尽量减少填补空间。另外，可以在填充空字节的地方来插入reserved成员, 例如
struct A
{
char a;
char reserved[3];
int b;
}；
这样做的目的主要是为了对程序员起一个提示作用，如果不加则编译器会自动补齐。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>642</wp:post_id>
		<wp:post_date>2013-02-16 15:12:20</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>第一次参加数学建模类的比赛，收获挺多的</title>
		<link>http://www.aemiot.com/?p=793</link>
		<pubDate>Fri, 19 Apr 2013 16:23:35 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=793</guid>
		<description></description>
		<content:encoded><![CDATA[比赛都结束几天了，现在才来写这文章。

但这也不迟，至少记忆还没有淡化。72小时，如果运用运用只看了2天Matlab，如何]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>793</wp:post_id>
		<wp:post_date>2013-04-20 00:23:35</wp:post_date>
		<wp:post_date_gmt>2013-04-19 16:23:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>math1</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%95%b0%e5%ad%a6%e5%bb%ba%e6%a8%a1"><![CDATA[数学建模]]></category>
		<category domain="category" nicename="yrz"><![CDATA[生活杂记]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>第一弹:第一个插件&#124;QtCreator插件开发</title>
		<link>http://www.aemiot.com/?p=1443</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1443</guid>
		<description></description>
		<content:encoded><![CDATA[[note]
系统环境: Debian 7.6 Wheezy amd64
桌面环境: Gnome3
qtsdk-version: 4.8.2
qtcreator-version: 2.8.1 
<strong>所有代码均在本地环境成功编译。</strong>
[/note]

QtCreator 使用Qt进行开发的]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1443</wp:post_id>
		<wp:post_date>2014-10-20 13:28:00</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[笔记]多版本并存控制 &#124; Linux</title>
		<link>http://www.aemiot.com/?p=1458</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1458</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1458</wp:post_id>
		<wp:post_date>2014-10-20 21:19:30</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CentOS 5.9 部署Node.JS+Redis+Mongodb服务器环境</title>
		<link>http://www.aemiot.com/?p=1471</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1471</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1471</wp:post_id>
		<wp:post_date>2014-10-31 22:50:07</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>无奈，还是无奈～</title>
		<link>http://www.aemiot.com/?p=1477</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1477</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1477</wp:post_id>
		<wp:post_date>2014-11-26 00:19:00</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Android硬件加速那些事</title>
		<link>http://www.aemiot.com/?p=1599</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1599</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>初步认知</h1>
在听到硬件加速四个字，以我对Android的认知结合对OpenGL的认知，大致可以知道硬件加速指的就是利用OpenGL指令批量绘制，而不是cpu去处理位图、几何图形等。
为什么这样快？
1.GPU高并行
2.OpenGL绘制动画过程通常只要上传一次数据源（顶点信息、纹理信息等），之后上传变换矩阵即可，然后gpu渲染图形
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1599</wp:post_id>
		<wp:post_date>2015-08-31 01:39:10</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>一个简单的决定</title>
		<link>http://www.aemiot.com/?p=1605</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1605</guid>
		<description></description>
		<content:encoded><![CDATA[过于发散的知识体系获得的收益已经越来越低了，为了在某一领域获得专长，决定]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1605</wp:post_id>
		<wp:post_date>2015-09-04 16:17:46</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>密码管理器V1.0.0(Beta)</title>
		<link>http://www.aemiot.com/passwordmanager.html</link>
		<pubDate>Sat, 26 Jan 2013 11:50:55 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=538</guid>
		<description></description>
		<content:encoded><![CDATA[是否还在为记住各个网站的密码而头痛？

是否还在为忘记密码纠结？

试试这款软件吧!

在这里，记录你的密码，不用担心密码被被人查看。因为数据已经加密过了。

你可以将密码记录文件 *.usr 和 *.usrpas 上传至网盘，这样你可以在任何地方查看你的密码（只需要下载本软件即可，本软件非常小，因此具有便携性）。

[toggle title="点击展开使用说明"]

使用手册
1.-----------------------------第一次使用程序
2.-----------------------------通用指令
3.-----------------------------管理员指令
4.-----------------------------超级管理员指令
5.-----------------------------普通用户指令
6.-----------------------------其他说明

1.第一次使用程序

第一次使用请使用超级管理员账户登录
用户名为 root
默认密码为 systemroot
登录后，请立即修改超级管理员密码
如有需要可以使用超级管理员指令添加其他用户

2.通用指令

mode
查看可用的数据加密模式
格式: mode
样例:
输入 mode
输出 unencrypted
simple
setpassword
修改当前用户密码
格式: setpassword &lt;参数&gt;
样例:
输入 setpassword 123456

3.管理员指令

adduser
添加一个普通用户
格式1: adduser
样例:
输入 adduser
输出 请输入用户名:
输入 one_user
输出 请输入密码:
输入 123456
输出 请输入加密模式:
输入 simple
格式2: adduser &lt;参数1&gt; &lt;参数2&gt; &lt;参数3&gt;
样例:
输入 adduser one_user 123456 simple
user
查看当前系统下的普通用户
格式: user
样例:
输入 user
输出 root
deluser
删除一个普通用户
格式: deluser &lt;参数&gt;
样例:
输入 deluser one_user

4.超级管理员指令

所有的管理员指令
额外的
addadmin
添加一个管理员
格式1: adduser
样例:
输入 addadmin
输出 请输入用户名:
输入 one_admin
输出 请输入密码:
输入 123456
格式2: addadmin &lt;参数1&gt; &lt;参数2&gt; &lt;参数3&gt;
样例:
输入 addadmin one_admin 123456 simple
deladmin
删除一个管理员
格式: deladmin &lt;参数&gt;
样例:
输入 deladmin one_admin

5.普通用户指令

dir
查看该用户的所有目录，或者某个目录的信息
格式1: dir
样例:
输入 dir
输出 menu1
menu2
格式2: dir &lt;参数&gt; &lt;参数&gt; ...
样例:
输入 dir menu1 menu2 ...
输出 menu1:
password1
password2
menu2:
password1
...

seach
查找一个密码所在的分组
格式: seach &lt;参数&gt;
样例:
输入 seach password1
输出 password1:
menu1
menu2

password
查看一个密码
格式: password &lt;参数&gt; &lt;参数&gt;
样例:
输入 password menu1 password1
输出 用户名: 123456789
密码: 123456789
安全码: 123456

adddir
添加一个目录
格式1: adddir
样例:
输入 adddir menux
格式2: adddir
样例:
输入 adddir
输出 请输入分组名
输入 menux

deldir
删除一个目录
格式: deldir &lt;参数&gt;
样例:
输入 deldir menux

addpassword
添加一个密码
格式1: addpassword &lt;参数1&gt; &lt;参数2&gt; &lt;参数3&gt; &lt;参数4&gt; &lt;参数5&gt;... 至少3个参数
样例：
输入 addpassword menu1 123456789 123456789 安全码 123456
格式2: addpassword
样例:
输入 addpassword
输出 请输入要添加到的分组名
输入 menu1
输出 请输入账号
输入 123456789
输出 请输入密码
输入 123456789
输出 是否还有其他信息要添加&lt;Y\N&gt;
输入 Y
输出 请输入栏目名称
输入 安全码
输出 请输入内容
输入 123456
输出 是否还有其他信息要添加&lt;Y\N&gt;
输入 N

delpassword
删除一个密码
格式: delpassword &lt;参数1&gt; &lt;参数2&gt;
样例:
输入 delpassword menu1 password1
[/toggle]

[note]
<span style="color: #ff6600;"><strong>如果软件使用中发现任何问题，可以在这里留言。</strong></span>

<span style="color: #ff6600;"><strong>如果是威胁到用户安全的BUG，请发送邮件至我的邮箱，而不是在这里公布。</strong></span>
[/note]


<big>下载</big>
<ul>
<ul>
	<li>[download link="http://www.aemiot.com/download/Password Manager(beta).rar"]<span style="color: #050505;"><big><b> 本地下载</b></big></span>[/download]</li>
</ul>
</ul>
&nbsp;
[warning]
作者:<strong>Aem</strong>
本文版权归作者和aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>538</wp:post_id>
		<wp:post_date>2013-01-26 19:50:55</wp:post_date>
		<wp:post_date_gmt>2013-01-26 11:50:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>passwordmanager</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="aem"><![CDATA[Aem]]></category>
		<category domain="category" nicename="zp"><![CDATA[作品]]></category>
		<category domain="post_tag" nicename="%e5%af%86%e7%a0%81"><![CDATA[密码]]></category>
		<category domain="post_tag" nicename="%e7%ae%a1%e7%90%86%e5%99%a8"><![CDATA[管理器]]></category>
		<category domain="post_tag" nicename="%e8%bd%af%e4%bb%b6"><![CDATA[软件]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869138]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>网易163邮箱登录器</title>
		<link>http://www.aemiot.com/163mail.html</link>
		<pubDate>Sat, 26 Jan 2013 23:21:12 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=554</guid>
		<description></description>
		<content:encoded><![CDATA[天天使用163邮箱，但每次都要开网页然后从各种页面跳入163.com里，虽然百度的魔框已经加入了163邮箱的登陆功能，但那始终不如一个登录器来的实在。
之前有写个一个批处理版的，但那界面确实不美观。
于是，这次写了个GUI界面的。
<span style="color: #ff6600;"><strong>使用方法:运行软件后，填入账号和密码，点击登陆即可。</strong></span>


<big>下载</big>

<ul>
	<li>[download link="http://www.aemiot.com/download/LoginMail163.rar"]<span style="color: #050505;"><big><b>&nbsp;&nbsp;&nbsp;本地下载</b></big></span>[/download]</li>
          <li>[download link="http://www.duote.com/soft/31790.html"]<span style="color: #050505;"><big><b>&nbsp;&nbsp;&nbsp;多特下载</b></big></span>[/download]</li>
          <li>[download link="http://pan.baidu.com/share/link?shareid=203846&uk=237907545"]<span style="color: #050505;"><big><b>&nbsp;百度云下载</b></big></span>[/download]</li>
</ul>

[warning]
作者:<strong>Aem</strong>
本文版权归作者和aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>554</wp:post_id>
		<wp:post_date>2013-01-27 07:21:12</wp:post_date>
		<wp:post_date_gmt>2013-01-26 23:21:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>163mail</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="163%ef%bc%8c%e7%99%bb%e5%bd%95%e5%99%a8"><![CDATA[163，登录器]]></category>
		<category domain="category" nicename="zp"><![CDATA[作品]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[556]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869139]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>72</wp:comment_id>
			<wp:comment_author><![CDATA[黄半仙_煌如火琰]]></wp:comment_author>
			<wp:comment_author_email>aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.aemiot.com</wp:comment_author_url>
			<wp:comment_author_IP>117.42.170.226</wp:comment_author_IP>
			<wp:comment_date>2013-01-31 04:54:46</wp:comment_date>
			<wp:comment_date_gmt>2013-01-30 20:54:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[  日后更新的话，应该会加入记住密码]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>71</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_parent_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869146]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869147]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>71</wp:comment_id>
			<wp:comment_author><![CDATA[阿布]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>183.21.129.247</wp:comment_author_IP>
			<wp:comment_date>2013-01-31 01:00:47</wp:comment_date>
			<wp:comment_date_gmt>2013-01-30 17:00:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[这个不错,要是有记住帐号和记住密码功能就更好了,不然每次都要输入一次,]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_parent_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869120]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869146]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>550</wp:comment_id>
			<wp:comment_author><![CDATA[love哈]]></wp:comment_author>
			<wp:comment_author_email>795068@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://网址（选填）</wp:comment_author_url>
			<wp:comment_author_IP>121.12.198.140</wp:comment_author_IP>
			<wp:comment_date>2014-12-10 01:11:29</wp:comment_date>
			<wp:comment_date_gmt>2014-12-09 17:11:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[这个真不错，如果能批量进的就更好了，不用一次点一个，希望作者能改良一下]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1418145089.92419910430908203125;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>传统高精度算法系列(二)整数的高精度减法</title>
		<link>http://www.aemiot.com/calc-high-int-inc.html</link>
		<pubDate>Wed, 06 Feb 2013 16:24:47 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=578</guid>
		<description></description>
		<content:encoded><![CDATA[<a title="整数的高精度加法" href="http://www.aemiot.com/calc-high-int-sum.html" target="_blank">整数的高精度加法</a>大家应该已经清楚了。按照同样的思路，我们也可以写出整数的高精度减法。
当然，高精度减法比加法稍微麻烦一些。

算法的思路：
<strong>模拟我们在小学所学的笔算</strong>
（对于不足位用0补齐，如9818-13，我们认为是9818-0013）
假设我们要计算的两数分别是 A1 A2 A3 A4 、 B1 B2 B3 B4
那么我们笔算时，会列出这样的式子

A1 A2 A3 A4
- B1 B2 B3 B4
---------------------
C0 C1 C2 C3 C4

那么我们在计算机中也同样可以完成这个过程
为了方便处理，我们在计算前，将两个数反向储存至数组中
即我们是对 B4 B3 B2 B1 、A4 A3 A2 A1 进行计算

<strong>注意，模拟的时候，要保证大数字减小数字</strong>，不然会出错。错误情况如下 0 0 1 3 - 9 8 1 8 = -9 -8 0 -5。这里比较大小，可以直接自己手动写一段代码从两个<strong>有效</strong>数组末端向前一一对比来判断，也可以将有效部分倒置，然后利用strcmp()比较。（笔者这里使用了前者）。如果现在是小数减大数，只须记录下符号为负号，同时交换两个数，使得大数减小数即可。

对于借位的处理，这里也出现了两种分歧。一种是假设每次都借位了（即先减去 1），如果实际上之前没有借位，就补上 1（可以用之前的差对10取模判断）。另一种是先判断有没有借位，然后记录下来，每次根据之前有没有借位采取不同的表达式。（笔者这里使用了前者）。

初始化时 dv = 1（因为对最低位默认之前没有借位）
其中有恒等式 Cn = (10 + An - Bn - 1 + dv) mod 10 （dv为之前的借位情况，如果需要借位，dv=0，如果不需要借位 dv=1，这个等式的意义是：先从高位借一位然后减去减数，再减去之前借的一位，如果之前不需要借位，用dv补上）

根据这个等式我们只需要循环执行以下三步，就能得到大致结果

<strong>1. temp = 10 + An - Bn - 1 + dv
2. Cn = temp mod 10
3. dv = temp div 10</strong>

注意，最后输出的时候，先判断符号是否为负号，如果是就额外打印一个负号。
[code lang="cpp"]
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#define MAX 1001
int main(void)
{
    int arr1[MAX] = { 0 }, arr2[MAX] = {0};
    int length, temp, i, length1, length2, t, dv = 1, sign=1;
    char str[MAX];	 /* 读入数据，并进行预处理(计算出数字位数，并反向存放) */
    scanf(&quot;%s&quot;, str);
    length1 = strlen(str);
    for (i = 0; i &lt; length1; ++i)
        arr1[i] = str[length1 - 1 - i] - '0';
    scanf(&quot;%s&quot;, str);
    length2 = strlen(str);
    for (i = 0; i &lt;  length2; ++i)
        arr2[i] = str[length2 - 1 - i] - '0';
    length = (length1 &gt; length2) ? length1 : length2;
    /*调整两个数组，保证arr1是大数字，arr2是小数字,如果想加快运行速度，可以用两个指针分别指向大数和小数来避免交换*/
    if(length1&lt;length2)
    {
        sign=-1;
        for(i=0; i&lt;length; ++i)
            temp=arr1[i], arr1[i]=arr2[i], arr2[i]=temp;
    }
    else if(length1==length2)
    {
        for(i=length-1; i&gt;=0; --i)
            if(arr1[i]&lt;arr2[i])
            {
                sign=-1;
                for(i=0; i&lt;length; ++i)
                    temp=arr1[i], arr1[i]=arr2[i], arr2[i]=temp;
                break;
            }
    }
    /* 算法核心内容 */
    for (i = 0; i &lt; length; ++i)
    {
        t = 10+arr1[i] - arr2[i] - 1 + dv;
        arr1[i] = t % 10;
        dv = t / 10;
    }
    /* 结束 */
    if(sign == -1)
        printf(&quot;-&quot;);
    for(i=0; i&lt;length-1; ++i)
        if(arr1[length-1-i]!=0)
            break;
    for (i = i; i &lt; length; ++i)
        printf(&quot;%d&quot;, arr1[length - 1 -i]);
    return 0;
}
[/code]

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>578</wp:post_id>
		<wp:post_date>2013-02-07 00:24:47</wp:post_date>
		<wp:post_date_gmt>2013-02-06 16:24:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>calc-high-int-inc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%87%8f%e6%b3%95"><![CDATA[减法]]></category>
		<category domain="post_tag" nicename="%e7%ae%97%e6%b3%95"><![CDATA[算法]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e9%ab%98%e7%b2%be%e5%ba%a6"><![CDATA[高精度]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869140]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>好书分享《C程序设计语言(第二版)》</title>
		<link>http://www.aemiot.com/book1.html</link>
		<pubDate>Fri, 08 Feb 2013 10:35:41 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=596</guid>
		<description></description>
		<content:encoded><![CDATA[中文名: <strong>C程序设计语言</strong>
原名: <strong>The C Programming Language</strong>
作者: Dennis M．Ritchie
Brian W．Kernighan
译者: 徐宝文
版本: 第2版·新版
出版社: 机械工业出版社
发行时间: 2004年
地区: 大陆
语言: 简体中文

<a href="http://www.aemiot.com/wp-content/uploads/2013/02/book1_1.jpg"><img class="aligncenter size-full wp-image-608" alt="book1_1" src="http://www.aemiot.com/wp-content/uploads/2013/02/book1_1.jpg" width="527" height="768" /></a>

本书是由C语言的设计者<strong>Brian W. Kernighan</strong>和<strong>Dennis M. Ritchie</strong>编写的一部介绍标准C语言及其程序设计方法的<strong><span style="color: #ff6600;">权威性经典著作</span></strong>。全面、系统地讲述了C语言的各个特性及程序设计的基本方法，包括基本概念、类型和表达式、控制流、函数与程序结构、指针与数组、结构、输入与输出、UNIX系统接口、标准库等内容。

本书的讲述深入浅出，配合典型例证，通俗易懂，实用性强，适合作为大专院校计算机专业或非计算机专业的C语言教材，也可以作为从事计算机相关软硬件开发的技术人员的参考书。在计算机发展的历史上，没有哪一种程序设计语言像C语言这样应用如此广泛。

本书原著即为<span style="color: #ff6600;"><strong>C语言的设计者之一</strong></span><strong>Dennis M．Ritchie</strong>和<strong><span style="color: #ff6600;">著名的计算机科学家</span>Brian W．Kernighan</strong>合著的 一本介绍C语言的权威经典著作。人们熟知的“hell, World”程序就是由本书首次引入的，现在，这一程序已经成为所有程序设计语言入门的第一课。 原著第2版根据1987年制定的<strong><span style="color: #ff6600;">ANSI C标准</span></strong>做了适当的修订．引入了最新的语言形式，并增加了新的示例，通过简洁的描述、典型的示例，作者全面、系统、准确地讲述了C语言的各个特性以及程序设计的基本方法。对于计算机从业人员来说，本书是一本必读的程序设计语言方面的参考书。

[toggle title = "目录"]

第1章 导言
1.1 入门
1.2 变量与算术表态式
1.3 for语句
1.4 符号常量
1.5 字符输入/输出
1.6 数组
1.7 函数
1.8 参数——传值调用
1.9 字符数组
1.10 外部变量与作用域
第2章 类型、运算符与表达式
2.1 变量名
2.2 数据类型及长度
2.3 常量
2.4 声明
2.5 算术运算符
2.6 关系运算符与逻辑运算符
2.7 类型转换
2.8 自增运算符与自减运算符
2.9 按位运算符
2.10 赋值运算符与表达式
2.11 条件表达式
2.12 运算符优先级与求值次序
第3章 控制流
3.1 语句与程序块
3.2 if-else语句
3.3 else-if语句
3.4 switch语句
3.5 whil循环与for特环
3.6 do-while循环
3.7 break语句与continue语句
3.8 goto语句与标号
第4章 涵数与程序结构
第5章 指针与数组
第6章 结构
第7章 输入与输出
第8章 UNIX系统接口
附录A 参考手册
附录B 标准库
附录C 变更小结
索引
[/toggle]

[toggle title="C语言和本书的发展史"]

1978年由美国电话电报公司(AT&amp;T）贝尔实验室正式发表了C语言。Brian Kernighan 和 Dennis Ritchie 出版了一本书，名叫<strong><span style="color: #ff6600;">《The C Programming Language》</span></strong>，很多年来它被当作 C语言的非正式的标准说明。人们称这个版本的 C语言为"K&amp;R C"

1970到80年代，C语言被广泛应用，也衍生了C语言的很多不同版本。

1983年美国国家标准局 (American National Standards Institute，简称ANSI)成立了一个委员会，来制定 C语言标准。

1988年，<span style="color: #ff6600;"><strong>《The C Programming Language》第2版问世</strong></span>，这是为了与89 ANSI C 接轨而做出的适当修订。

1990年，国际标准化组织ISO（International Organization for Standards）接受了<strong><span style="color: #ff6600;">89 ANSI C 为I SO C 的标准（ISO9899-1990）</span></strong>

1999年，ISO又对C语言标准进行修订，在<span style="color: #ff6600;"><strong>基本保留原来C语言特征</strong></span>的基础上，针对应该的需要，增加了一些功能，命名为<strong><span style="color: #ff6600;">ISO/IEC9899:1999</span></strong>。

2011年12月8日，ISO正式公布C语言新的国际标准草案：<span style="color: #ff6600;"><strong>ISO/IEC 9899:2011</strong></span>，即C11。

目前最流行的C语言有以下几种：
·Microsoft C
·Borland Turbo C
·AT&amp;T C
这些C语言版本不仅实现了ANSI C标准，而且在此基础上各自作了一些扩充，使之更加方便。
[/toggle]

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>596</wp:post_id>
		<wp:post_date>2013-02-08 18:35:41</wp:post_date>
		<wp:post_date_gmt>2013-02-08 10:35:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>book1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e8%af%ad%e8%a8%80"><![CDATA[C程序设计语言]]></category>
		<category domain="post_tag" nicename="%e5%a5%bd%e4%b9%a6"><![CDATA[好书]]></category>
		<category domain="post_tag" nicename="%e7%bc%96%e7%a8%8b%e4%b9%a6%e7%b1%8d"><![CDATA[编程书籍]]></category>
		<category domain="category" nicename="shape"><![CDATA[资源分享]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869141]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[608]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>74</wp:comment_id>
			<wp:comment_author><![CDATA[翼]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>115.150.111.134</wp:comment_author_IP>
			<wp:comment_date>2013-02-08 21:27:02</wp:comment_date>
			<wp:comment_date_gmt>2013-02-08 13:27:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[赞一个]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_parent_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869120]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869159]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>75</wp:comment_id>
			<wp:comment_author><![CDATA[Aem]]></wp:comment_author>
			<wp:comment_author_email>aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url>http://t.qq.com/yxx3372</wp:comment_author_url>
			<wp:comment_author_IP>111.76.173.160</wp:comment_author_IP>
			<wp:comment_date>2013-02-10 06:14:31</wp:comment_date>
			<wp:comment_date_gmt>2013-02-09 22:14:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[恩,其他资料我也会陆续拿出来的]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>74</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_parent_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869159]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869160]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>C++类类型的转换</title>
		<link>http://www.aemiot.com/cpp-class-convert.html</link>
		<pubDate>Sat, 09 Feb 2013 21:54:45 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=620</guid>
		<description></description>
		<content:encoded><![CDATA[利用C++的类类型转换规则，可以迅速增加一个类与其他类型建立关系，变得和一个内置类型一样好用。

例如，我们定义一个SmallInt类型来作为unsigned char 的<strong>安全版本</strong>。

[code lang="cpp"]
class SmallInt{
public:
    SmallInt():val(0) {}
    SmallInt(unsigned char t):val(t)
{
    if(val &amp;lt; 0 || val&amp;gt;255)
        throw std::out_of_range(&quot;Out of range&quot;);
}
pravate:
    unsigned char val;
};
[/code]

那么为了使这个类和内置类型一样好用，需要<strong>定义</strong>各式各样的<strong>运算符</strong>，例如 <strong>+</strong> 、 <strong>-</strong> 、 <strong>*</strong> 等 。而且每个运算符还要重载多个版本，因为我们可能执行SmallInt 和 int 的运算，也可能执行int 和 SmallInt 的运算，以及SmallInt 和SmallInt 的运算。即使定义了这些运算符，原来需要unsigned char 的部分也需要改写，那么这是非常不便的。为此，我们可以借助定义类转换来完成这一切。

&nbsp;
<h1>定义类类型向其他类型的转换</h1>
定义类类型向其他类型的转换非常简单，只需要在类定义中加入一个成员函数。注意：这个成员函数不能有返回值和形参。

成员函数格式： operator type() { /*转换规则*/ }

例如在SmallInt类定义中加入 operator int() { return val; }

当完成了这个转换定义之后，凡是需要使用int 类型的地方，就能够使用SmallInt 类型，因此我们不需要额外定义各种各样的运算符，原来的代码也不需要改写。具体情况如下：

SmallInt  v(3);

int  x = v;  // v 首先转换为 int 类型，随后对 x 初始化。

&nbsp;
<h1>定义其他类型向类类型的转换</h1>
定义其他类型向类类型的转换，只需要存在一个对应类型为<strong>单形参</strong>的<strong>构造函数</strong>。

你会发现，我们其实在无意之中已经定义了这个隐式的转换，就是这个函数完成了这个定义：

SmallInt(unsigned char t):val(t)

{

if(val &lt; 0 || val &gt; 255)

throw std::out_of_range("Out of range");

}

当完成了这个转换定义之后，凡是需要使用SmallInt 类型的地方，就能够使用int 类型。具体情况如下：

SmallInt calc(int x)

{

return x;

}  // x首先转换为SmallInt类型，然后返回它的副本。

如果想要<strong>屏蔽</strong>这个隐式转换而保留这个构造函数，只要用<strong>explicit</strong> 修饰这个构造函数即可。

&nbsp;
<h1>注意事项1</h1>
C++转换链中不能出现两次<strong>隐式</strong>的<strong>类类型转换</strong>，但<strong>内置类型转换</strong>则不受此限制。

[code lang="cpp"]
#include &lt;iostream&gt;

using namespace std;

struct B{
    B(double t):x(t) {}
    operator int() {return x;}
    double x;
};

struct A{
    A(double t):x(t) {}
    operator B() {return x;}
    double x;
};

int calc(int x)
{
    return x;
}
/*A可以转换为B
B可转换为int
但A不能隐式经过两次类类型转换变为为int
要将A转换到int，需要先强制转换到B类型*/

int main(void)
{
    A d(6);
    cout &lt;&lt; calc( static_cast&lt;B&gt;(d) ) &lt;&lt; endl;
    return 0;
}
[/code]

如果调用calc 时，<strong>不使用强制转换</strong>而直接使用d ，编译器会报错。

&nbsp;
<h1>注意事项2</h1>
类的转换很容易产生<strong>多义性</strong>。其中，当<strong>两个类同时定义了同一个转换时当一个类同时定义了两个有转换关系的类型的转换操作符或构造函数时</strong>通常会产生多义性。

<strong><span style="color: #ff6600">当两个类分别定义了同一个转换时，产生二义性情况如下</span></strong>：

[code lang="cpp"]

#include &lt;iostream&gt;

using namespace std;

struct A;
struct B{
    B(double t):x(t) {}
    B(A t); //A向B转换
    double x;
};

struct A{
    A(double t):x(t) {}
    operator B() {return x;} //A向B转换
    double x;
};

B::B(A t):x(t.x){}

B calc(B x)
{
    return x;
}

int main(void)
{
    A d(6);
    calc(d);
    return 0;
}

[/code]

这种情况，编译器不知道是调用<strong>B 的构造函数</strong>来完成转换，还是<strong>A 的转换操作符</strong>来完成转换，因为这两个函数没有高下之分，因而产生二义性。对于这种情况，即便使用强制转换也无法避免出错。但是有两个方法可以解决它：一、显式调用，二、改变构造函数。

一、<strong>显式调用</strong>

calc( B(d) ); // 使用B 的构造函数完成转换

calc( A.operator B(d) ); //使用A 的转换操作符完成转换

二、<strong>改变构造函数</strong>

将B(A); 改为 B(const A&amp;); 使得构造函数匹配性低于转换操作符

<strong>此外，不要在两个类中分别定义同一个转换才是根本的解决办法。</strong>

<strong><span style="color: #ff6600">当一个类同时定义了两个有转换关系的类型的转换操作符或构造函数时，产生二义性情况如下</span></strong>：

[code lang="cpp"]

#include &lt;iostream&gt;

using namespace std;

struct A{
    A() {}
    A(double t):x(t) {}
    A(int t):x(t) {}
    double x;
};

int main(void)
{
    int i = 1;
    double d = 2.0;
    long l = 3;
    A obj1(i);
    A obj2(d);
    //A obj3(l);
    //error：long转换到double和int不分高下
    return 0;
}

[/code]

这种错误情况，可以使用指定一个类型的强制转换来处理。不过，最好还是避免同时定义和两个有转换关系的类型的转换。

&nbsp;
<h1>总结</h1>
由此可见隐式转换虽然很方便，让人感觉不到是在使用类类型，而产生是在使用内置类型的错觉，但是不能过度依赖（如果因为此类问题出错，编译器给出的提示通常让人难以理解），你任然需要记住这是一个类类型而不是内置类型。所以，使用过程中任然提倡使用显式转换以确保无误。

&nbsp;
<p style="text-align: right">参考书籍：《C++ Primer》Stanley B. Lippman &amp; Josée Lajoie</p>
<p style="text-align: left">[warning]</p>
<p style="text-align: left">作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。</p>
<p style="text-align: left">[/warning]</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>620</wp:post_id>
		<wp:post_date>2013-02-10 05:54:45</wp:post_date>
		<wp:post_date_gmt>2013-02-09 21:54:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cpp-class-convert</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[c]]></category>
		<category domain="post_tag" nicename="%e7%b1%bb"><![CDATA[类]]></category>
		<category domain="category" nicename="jyzt"><![CDATA[经验之谈]]></category>
		<category domain="post_tag" nicename="%e8%bd%ac%e6%8d%a2"><![CDATA[转换]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869142]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>美工之旅开始,数位板入手</title>
		<link>http://www.aemiot.com/cth670.html</link>
		<pubDate>Fri, 22 Feb 2013 14:46:39 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=647</guid>
		<description></description>
		<content:encoded><![CDATA[前几天入手了一块数位板(Wocom Bamboo CTH-670)，板子非常赞，反倒是我觉得自己的基础配不上Wocom的板子了。板子自带磨砂膜，数位笔在上面画的手感和纸上的感觉很接近，笔的重量也是恰到好处，因为是第一次用数位板，也不知道别的板子怎么样，总之这个板子，我很喜欢。

随着板子的入手，我的美工之旅也正式开始了。

<a href="http://www.aemiot.com/wp-content/uploads/2013/02/1.jpg"><img class="aligncenter size-full wp-image-654" alt="1" src="http://www.aemiot.com/wp-content/uploads/2013/02/1.jpg" width="659" height="451" /></a>

另外，附上几张用板子画的图（第一次用板子，非常不适应。另外我基本功也确实不行，因此只好献丑了。第二张目前还不会上色，暂时先这样吧。还有很多东西要学啊，呵呵）

<a href="http://www.aemiot.com/wp-content/uploads/2013/02/未标题-7_001_bak.png"><img class="size-full wp-image-649 aligncenter" alt="001_bak" src="http://www.aemiot.com/wp-content/uploads/2013/02/未标题-7_001_bak.png" width="369" height="303" /></a>

<a href="http://www.aemiot.com/wp-content/uploads/2013/02/2.jpg"><img class="size-full wp-image-658 aligncenter" alt="2" src="http://www.aemiot.com/wp-content/uploads/2013/02/2.jpg" width="376" height="601" /></a>

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>647</wp:post_id>
		<wp:post_date>2013-02-22 22:46:39</wp:post_date>
		<wp:post_date_gmt>2013-02-22 14:46:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cth670</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cth670"><![CDATA[cth670]]></category>
		<category domain="post_tag" nicename="wocom"><![CDATA[Wocom]]></category>
		<category domain="post_tag" nicename="%e5%a4%8f%e4%be%af%e7%91%be%e8%bd%a9"><![CDATA[夏侯瑾轩]]></category>
		<category domain="post_tag" nicename="%e6%95%b0%e4%bd%8d%e6%9d%bf"><![CDATA[数位板]]></category>
		<category domain="category" nicename="mgzl"><![CDATA[美工之路]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[654]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e7%be%8e%e5%b7%a5%e4%b9%8b%e6%97%85%e5%bc%80%e5%a7%8b%e6%95%b0%e4%bd%8d%e6%9d%bf%e5%85%a5%e6%89%8b]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869145]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>易于编程的最大公约数算法和最小公倍数算法&#124;HDU-Problem-1019</title>
		<link>http://www.aemiot.com/gcd-lcm.html</link>
		<pubDate>Sat, 23 Feb 2013 16:09:04 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=662</guid>
		<description></description>
		<content:encoded><![CDATA[题目：杭电Problem-1019      <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1019">Least Common Multiple</a>

题目简述：计算一串数字的最小公倍数

思路：求一串数字的最小公倍数化为多次求2个数字求最小公倍数。求最小公倍数可以通过最大公约数得出，其中最大公约数可以使用欧几里得算法求出。

[toggle title="最大公约数算法(欧几里得算法)"]
假设要求A，B 两个数字（A>B）的最大公约数，GCD(A,B)=GCD(C,D)，其中C = B,D = A mod B。多次利用公式可以将化为GCD(N,0)的状态，那么N 就是我们要求的最大公约数。
例如，我们要求1286和78的最大公约数。
GCD(1286,78)
=GCD(78,1286 mod 78) = GCD(78,38)
=GCD(38,78 mod 38) = GCD(38,2)
=GCD(2,38 mod 2) = GCD(2,0)
由此知道最大公约数为2。
[/toggle]

[toggle title="最小公倍数算法(利用最大公约数的算法)"]
假设要求A，B两个数字的最小公倍数，只需求出最大公约数，然后用两数之积除以最大公约数就可得到最小公倍数。
例如，我们要求1286和78的最小公倍数，利用之前的方法可以知道最大公约数是2。那么最小公倍数就是1286 * 78 / 2 = 50154。
[/toggle]

利用上述算法，可以很容易写出此题的AC代码。
附上我的代码：
[code lang="cpp"]
#include &lt;stdio.h&gt;
typedef long long NUM;

NUM ancalc(NUM t1,NUM t2)
{
    int t;
    if(t1&gt;t2) t=t1,t1=t2,t2=t;
    while(t2!=0)
    {
        t=t2;
        t2 = t1%t2;
        t1 = t;
    }
    return t1;
}

NUM calc(NUM t1,NUM t2)
{
    int t;
    return t1*t2/ancalc(t1,t2);
}
int main(void)
{
    int i,j,n,l,t1,t2;
    scanf(&quot;%d&quot;,&amp;n);
    for(i=0;i&lt;n;++i)
    {
        scanf(&quot;%d&quot;,&amp;l);
        scanf(&quot;%d&quot;,&amp;t1);
        for(j=0;j&lt;l-1;++j)
        {
            scanf(&quot;%d&quot;,&amp;t2);
            t1 = calc(t1,t2);
        }
        printf(&quot;%d\n&quot;,t1);
    }
    return 0;
}
[/code]
[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>662</wp:post_id>
		<wp:post_date>2013-02-24 00:09:04</wp:post_date>
		<wp:post_date_gmt>2013-02-23 16:09:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gcd-lcm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%9c%80%e5%a4%a7%e5%85%ac%e7%ba%a6%e6%95%b0"><![CDATA[最大公约数]]></category>
		<category domain="post_tag" nicename="%e6%9c%80%e5%b0%8f%e5%85%ac%e5%80%8d%e6%95%b0"><![CDATA[最小公倍数]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e5%87%a0%e9%87%8c%e5%be%97%e7%ae%97%e6%b3%95"><![CDATA[欧几里得算法]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869146]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>最简单的压缩方式&#124;HDU-Problem-1020</title>
		<link>http://www.aemiot.com/encode.html</link>
		<pubDate>Sun, 24 Feb 2013 05:02:04 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=668</guid>
		<description></description>
		<content:encoded><![CDATA[题目：杭电Problem-1020 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1020">Encoding</a>

题目简述：最简单的压缩方式。将多个字符换成个数+字符的方式并输出。

思路：一次获取一个字符的连续且相同，多次处理即可。

此题非常简单，因此就直接上代码了。

[code lang="cpp"]
#include &lt;stdio.h&gt;
#include &lt;ctype.h&gt;
#define MAX 10000

/*返回字符串第一个字符连续且相同的字符个数(包括第一个字符)*/
int ReX(char arr[])
{
    int n=0;
    char befo = arr[n++],t = befo;
    while(t==befo)
        t=arr[n++];
    return n-1;
}

int main(void)
{
    char arr[MAX],str[MAX];
    int i,n,e,x;
    char *p = str;
    scanf(&quot;%d&quot;,&amp;n);
    for(i=0; i&lt;n; ++i)
    {
        e = 0;
        scanf(&quot;%s&quot;,arr);
        while(arr[e])
        {
        x = ReX(arr+e);
        if(x==1) p += sprintf(p,&quot;%c&quot;,arr[e]);
        else p += sprintf(p,&quot;%d%c&quot;,x,arr[e]);
        e += x;
        }
        p += sprintf(p,&quot;\n&quot;);
    }
    p += sprintf(p,&quot;&#92;&#48;&quot;);
    printf(&quot;%s&quot;,str);
    return 0;
}

/*既然写了压缩，干脆解压缩一起写了*/
/*用于逆处理的函数
char* ScanOne(char arr[])
{
    char t = getchar();
    int i,n=1; //默认为一个字符
    if( isdigit(t) )
    {
        n = t - '0';
        t = getchar();
    }
    for(i=0; i&lt;n; ++i)
    {
        arr[i]=t;
    }
    return arr+n;
}
*/

/*逆处理过程
    char *p = str;
    scanf(&quot;%d&quot;,&amp;n);
    for(i=0; i&lt;n; ++i)
    {
        scanf(&quot;%s&quot;,arr);
        p = ScanOne(p);
    }
    printf(&quot;%s&quot;,str);
*/
[/code]
[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>668</wp:post_id>
		<wp:post_date>2013-02-24 13:02:04</wp:post_date>
		<wp:post_date_gmt>2013-02-24 05:02:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>encode</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%8e%8b%e7%bc%a9"><![CDATA[压缩]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e8%a7%a3%e5%8e%8b%e7%bc%a9"><![CDATA[解压缩]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869147]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>使用数论知识消除模拟&#124;HDU-Problem-1013</title>
		<link>http://www.aemiot.com/problem-1013.html</link>
		<pubDate>Mon, 25 Feb 2013 15:24:17 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=676</guid>
		<description></description>
		<content:encoded><![CDATA[题目：杭电Problem-1013 <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1013">Digital Roots</a>

题目简述：一个数各进制位之和是一位数那么这个和就是这个数的根，如果各进制之和不是一位数，则这个和的根就是这个数的根。求一些给定数的根。

思路：（这是我的解题思路，也是一般的模拟方法，其实这道题利用数论可以无限简化，等说完一般的，我再贴出某大神的<strong>数论式解法</strong>）以字符串读入（数据范围很大）,计算出各进制位之和（各进制位之和用long int储存就可以了，因为一个1000位的数字各进制数之和最大也就9000），如果是个位数就输出，如果不是就再求各进制位之和来求根。

我的代码：
[code lang="cpp"]
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

long ReX(char n[])
{
    long x,i,v;
    while(1)
    { 
        x=0,i=0;
        while( n[i]!='&#92;&#48;' )
            x += n[i++]-'0';
        if(x&gt;=0&amp;&amp;x&lt;=9) return x;
        v=sprintf(n,&quot;%ld&quot;,x);
        n[v]= '&#92;&#48;'; 
    }
}
int main(void)
{
    char t[10000]; /*这里我一开始只开了200，总是不能AC，找了很久，才发现数组开小了，鄙视下题目不给数据范围*/
    while(gets(t),t[0]!='0')
        printf(&quot;%ld\n&quot;,ReX(t));
    return 0;
}
[/code]

&nbsp;

&nbsp;
接下来，介绍下某大神的极简代码：

[code lang="cpp"]
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main(void)
{
    int a,c;
    for(;scanf(&quot;%1d&quot;,&amp;a),a&gt;0;printf(&quot;%d\n&quot;,--a%9u+1))
        while((c=getchar())-48u&lt;10)
            a+=c-48;
    return 0;
}
[/code]

非常简单吧，我刚开始看到这段代码都震撼了（感叹！原来还能这样）。

关于这段代码之所以能够AC，我就引用下“逆水行舟”这位杭电的ACMer的解说吧。

[note]
下面第四点是错误的，这里的U标识是必要的，因为读到回车（10）时，10-48<10会继续循环，而加上U变为10-48U时运算结果是一个非常大的数因而跳出循环。
[/note]

1.一位数模9是它本身(9除外);整十数模9是它十位的数字(90除外);整百数摸9是它百位的数字(900除外)......

2.对于一个一般的数,可以分拆成几个10的幂的和;一般的数模9的结果,实质就是题目所描述的"数字根"(9的倍数除外).

3.反复提到9的倍数除外,那这个除外的结果是什么?想一下就清楚.所以楼主先--a再%9最后+1就是在处理这种情况

<del datetime="2013-02-25T15:16:35+00:00">4.数字后面跟u后缀代表无符号整数,至于9啊48啊还要加这个，那是楼主在炫耀他的代码能力，大家可无视之</del>

5.最后提醒 48 == ‘0’

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>676</wp:post_id>
		<wp:post_date>2013-02-25 23:24:17</wp:post_date>
		<wp:post_date_gmt>2013-02-25 15:24:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>problem-1013</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="2013"><![CDATA[2013]]></category>
		<category domain="post_tag" nicename="%e6%95%b0%e5%ad%97%e6%a0%b9"><![CDATA[数字根]]></category>
		<category domain="post_tag" nicename="%e6%95%b0%e8%ae%ba"><![CDATA[数论]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869148]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e4%bd%bf%e7%94%a8%e6%95%b0%e8%ae%ba%e7%9f%a5%e8%af%86%e6%b6%88%e9%99%a4%e6%a8%a1%e6%8b%9f%e6%9d%ad%e7%94%b5problem-1013]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>四则运算的括号&#124;剔除多余括号(94NOI)</title>
		<link>http://www.aemiot.com/94noi-guote.html</link>
		<pubDate>Tue, 26 Feb 2013 17:01:52 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=686</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目名称</h1>
剔除多余括号(94NOI)
<h1>题目描述</h1>
键盘输入一个含有括号的四则运算表达式，表达式中可能含有多余的括号，编程整理该表达式，去掉所有的多余括号，使得原表达式中所有的变量和运算符相对位置保持不变，并保持与原有的表达式等价。
<h1>思路</h1>
个人觉得这题应该采用<strong>模拟策略</strong>。从最外层开始，一层层深入表达式（<strong>分冶</strong>的思想），从外层向内部一层层去掉括号。实现上，采用递归处理最合适。递归过程中，如果最外层就是括号，那么忽略这个括号（这个表达式的最低运算符，就是内部表达式的最低级运算符）；如果最外层不是括号，那么根据最低级运算符可以将表达式拆为两个表达式，解出左右两个表达式的最低级运算符（递归求解）再根据四则运算与括号的关系来判断是否需要括号。

假如我们要处理( ((a+b)*f)-(i/j) ) 这个表达式，按照上述思路处理的图示：

<a href="http://www.aemiot.com/wp-content/uploads/2013/02/20130227001149.jpg"><img class="aligncenter size-full wp-image-687" alt="述思路处理的图示" src="http://www.aemiot.com/wp-content/uploads/2013/02/20130227001149.jpg" width="521" height="288" /></a>
另外，附上四则运算与括号的关系图一张：

<a href="http://www.aemiot.com/wp-content/uploads/2013/02/20130227005252.jpg"><img class="aligncenter size-full wp-image-689" alt="四则运算与括号的关系图" src="http://www.aemiot.com/wp-content/uploads/2013/02/20130227005252.jpg" width="571" height="296" /></a>
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

/*寻找下标为n的右括号对应的左括号的下标，如果出现错误返回一个负数*/
int RguoteL(char* str,int n)
{
    int c = 1,i = n,t;
    if(str[n]!=')') return -1;
    while(t=str[--i],i+1)
    {
        if(t==')') ++c;
        if(t=='(') --c;
        if(c==0) return i;
    }
    return -2;
}
/*返回表达式中优先级最低的符号下标，如果找不到运算符就返回-1*/
int FindC(char* str)
{
    int length;
    int i;
    int k = -1;
    length = strlen(str);
    i = length - 1;
    while(i&gt;=0)
    {
        if(str[i]==')') i = RguoteL(str,i);
        if(str[i]=='+'||str[i]=='-') k = i;
        if( (k!='+'&amp;&amp;k!='-') &amp;&amp; (str[i]=='*'||str[i]=='/') ) k = i;
        --i;
    }
    return k;
}
/*在两端添加圆括号*/
void Addguote(char* str)
{
    int i,length = strlen(str);
    str[length+2]='&#92;&#48;';
    str[length+1]=')';
    for(i=length;i&gt;0;--i)
        str[i] = str[i-1];
    str[0] = '(';
}
/*整理表达式并返回整理后的表达式,形参表第二个参数指向该表达式优先级最低的符号*/
char GuoteCal(char* str,char* res)
{
    int k=FindC(str),length=strlen(str);
    char *p=(char*)malloc(sizeof(char)*length),t[2];
    char operL,operR,operNow=' ';
    if(k&gt;=0) operNow = str[k];
    if(RguoteL(str,length-1)==0&amp;&amp;str[length-1]==')') /*被一对括号包含*/
    {
        strncpy(p,str+1,length-2);
        p[length-2] = '&#92;&#48;';
        operNow = GuoteCal(p,res); /*最外层括号应该被忽略，因此它的最低级运算符就是内部表达式的最低级运算符*/
        free(p);
        return operNow;
    }
    if(length==1) /*单变量*/
    {
        strncpy(p,str,1);
        p[length] = '&#92;&#48;';
        strcpy(res,p);
        free(p);
        return operNow;
    }
    /*找了到一个最低运算符号*/
    char *pL=(char*)malloc(sizeof(char)*(k+1)),
         *pR=(char*)malloc(sizeof(char)*(length-k));
    strncpy(pL,str,k);
    pL[k]='&#92;&#48;';
    strncpy(pR,str+k+1,length-k-1);
    pR[length-k-1]='&#92;&#48;';
    /*获取左右符号*/
    operL = GuoteCal(pL,pL);
    operR = GuoteCal(pR,pR);
    /*根据四则运算判断是否需要括号*/
    if((operNow=='-'||operNow=='*')&amp;&amp;(operR=='+'||operR=='-')) Addguote(pR);
    if((operNow=='*'||operNow=='/')&amp;&amp;(operL=='+'||operL=='-')) Addguote(pL);
    if(operNow=='/'&amp;&amp;operR!=' ') Addguote(pR);
    /*组合整理后的表达式*/
    strcpy(p,pL);
    t[0]=operNow;t[1]='&#92;&#48;';
    strcat(p,t);
    strcat(p,pR);
    strcpy(res,p);
    /*释放动态内存*/
    free(p);
    free(pL);
    free(pR);
    return operNow;
}

int main(void)
{
    char str[]=&quot;(((a+b)*f)-(i/j))&quot;,s[100];
    GuoteCal(str,s);
    printf(&quot;%s&quot;,s);
    return 0;
}
[/code]

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>686</wp:post_id>
		<wp:post_date>2013-02-27 01:01:52</wp:post_date>
		<wp:post_date_gmt>2013-02-26 17:01:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>94noi-guote</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="94"><![CDATA[94]]></category>
		<category domain="post_tag" nicename="noi"><![CDATA[noi]]></category>
		<category domain="post_tag" nicename="%e5%9b%9b%e5%88%99%e8%bf%90%e7%ae%97"><![CDATA[四则运算]]></category>
		<category domain="post_tag" nicename="%e6%8b%ac%e5%8f%b7"><![CDATA[括号]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[689]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869149]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>是否记得俄罗斯方块呢&#124;方块下落问题</title>
		<link>http://www.aemiot.com/bardrop.html</link>
		<pubDate>Thu, 28 Feb 2013 15:04:14 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=694</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目名称</h1>
<big>方块下落</big>
<h1>题目描述</h1>
有红（R）、绿（G）、蓝（B）、黑（A）、白（W）5种颜色的方块放在一个M*N（M,N&lt;50）的方框中，现要求消去同色相连大于3的所有方块。消去过程为：一次同时消去同一直线（横、竖、斜线）同色相连大于等于3的块。在消去过程中，同一方块可在不同方向上重复使用。方块消去后，上面的块自动下落，重复消去过程，直至不能消去为止。（呵呵，这不就是俄罗斯方块的消除过程么。）
<h1>输入输出格式</h1>
第一行为M N，接下来是M*N 的矩阵。例如，设有5*5的方框矩阵分布如下：

则输入序列为：
5 5
RRRAA
WRWAW
WWBAW
WWBWA
BBWWA

输出序列为:
&nbsp;&nbsp;A
&nbsp;&nbsp;W
&nbsp;&nbsp;A
&nbsp;&nbsp;RBWA

<h1>思路</h1>
模拟方块消去过程。一次消去过程可以分为三个阶段完成：<strong>标记</strong>、<strong>消除</strong>、<strong>下落</strong>。之所以将要先标记再消除是因为一个块可以在不同方向上重复使用，如果直接消去，就无法得到正确结果。因为方块落下后，可能形成了新的可消去的方块，因此要<strong>反复以上三步</strong>，直到没有可消除的方块为止，就可以得到正确结果。
<h1>算法描述</h1>
1.读入数据
2.模拟消去过程
（1）标记
（2）如果标记了元素，则执行（3），否则模拟消去过程结束，进入下一环节
（3）消去已标记方块
（4）下落
（5）返回第（1）步
3.输出最终方块排列方案
4.结束

<a href="http://www.aemiot.com/wp-content/uploads/2013/02/20130228223225.jpg"><img class="aligncenter size-full wp-image-714" alt="20130228223225" src="http://www.aemiot.com/wp-content/uploads/2013/02/20130228223225.jpg" width="297" height="292" /></a>

&nbsp;

标记元素，这里提出<strong>两种方案</strong>处理。第一种方案，先按行遍历二维数组标记，然后按列遍历二维数组标记，最后斜向遍历二维数组标记。如果采用第一种方案，那么最麻烦的地方就在<strong>两次斜向遍历二维数组</strong>。因此，我采用了第二种方案，设置一个九宫格，遍历二维数组的每一个元素，将一个元素写入九宫格<strong>中央</strong>，然后补全九宫格，这样只需判断九宫格以中心元素的4条直线的情况就能完成一个元素周围的标记（这种就是要注意九宫格的<strong>边角问题</strong>，因为元素的某个方向上可能没有元素）。


<h1>我的代码</h1>

[code lang="cpp"]
#include &lt;stdio.h&gt;
#define MAX 100
/*标记,如果有标记方块，返回真，否则返回假*/
int SignBar(char aj[ ][MAX],char isSign[ ][MAX],int m,int n)
{
    int i,j,flag=0;
    /*预处理（初始化 isSign）*/
    for(i=0; i&lt;m; ++i)
        for(j=0; j&lt;n; ++j)
            isSign[i][j] = 0;
    /*处理开始*/
    for(i=0;i&lt;m;++i)
        for(j=0;j&lt;n;++j)
        {
            char t[3][3]={0};
            unsigned short contral[4]={0}; /*分别控制上下左右*/
            /*获取控制信息*/
            if(i==0) contral[0]=1;
            if(i==m-1) contral[1]=1;
            if(j==0) contral[2]=1;
            if(j==n-1) contral[3]=1;
            t[1][1] = aj[i][j];
            /*构造九宫格*/
            if(!contral[0]) t[0][1] = aj[i-1][j]; /*上*/
            if(!contral[1]) t[2][1] = aj[i+1][j]; /*下*/
            if(!contral[2]) t[1][0] = aj[i][j-1]; /*左*/
            if(!contral[3]) t[1][2] = aj[i][j+1]; /*右*/

            if(!contral[0]&amp;&amp;!contral[2])/*左上*/
                t[0][0] = aj[i-1][j-1];
            if(!contral[0]&amp;&amp;!contral[3])/*右上*/
                t[0][2] = aj[i-1][j+1];
            if(!contral[1]&amp;&amp;!contral[2])/*左下*/
                t[2][0] = aj[i+1][j-1];
            if(!contral[1]&amp;&amp;!contral[3])/*右下*/
                t[2][2] = aj[i+1][j+1];
            /*九宫格行处理*/
            if(t[1][0]!=0&amp;&amp;t[1][0]==t[1][1]&amp;&amp;t[1][1]==t[1][2])
                isSign[i][j-1] = isSign[i][j] = isSign[i][j+1] = 1,flag=1;
            /*九宫格列处理*/
            if(t[0][1]!=0&amp;&amp;t[0][1]==t[1][1]&amp;&amp;t[1][1]==t[2][1])
                isSign[i-1][j] = isSign[i][j] = isSign[i+1][j] = 1,flag=1;
            /*斜线处理*/
            if(t[0][0]!=0&amp;&amp;t[0][0]==t[1][1]&amp;&amp;t[1][1]==t[2][2])
                isSign[i-1][j-1] = isSign[i][j] = isSign[i+1][j+1] = 1,flag=1;
            if(t[0][2]!=0&amp;&amp;t[0][2]==t[1][1]&amp;&amp;t[1][1]==t[2][0])
                isSign[i-1][j+1] = isSign[i][j] = isSign[i+1][j-1] = 1,flag=1;
        }
    return flag;
}
/*消除*/
void ClearBar(char aj[][MAX],char isSign[][MAX],int m,int n)
{
    int i,j;
    for(i=0;i&lt;m;++i)
        for(j=0;j&lt;n;++j)
            if(isSign[i][j]==1) aj[i][j]='&#92;&#48;';
}
/*下落*/
void DropBar(char aj[][MAX],char isSign[][MAX],int m,int n)
{
    int i,j,x,t,flag;
    for(j=0;j&lt;n;++j)
    {
        x=m-1;
        flag=1;
        while(flag&amp;&amp;x&gt;=0)
        {
            if(aj[x][j]=='&#92;&#48;')
            {
                int z;
                flag=0;
                for(z=x;z&gt;0;--z)
                    if(aj[z][j]!='&#92;&#48;')
                    {
                        flag=1;
                        for(t=x;t&gt;0;--t)
                            aj[t][j] = aj[t-1][j];
                        aj[0][j] = '&#92;&#48;';
                        ++x; /*使得x保持原位，再次检测这里是否还有可落下方块*/
                        break;
                    }
            }
          --x;
         }
    }
}

int main(void)
{
    char arr[MAX][MAX] = {0},
            bd[MAX][MAX];
    int i,j,z,m,n;
    scanf(&quot;%d%d&quot;,&amp;m,&amp;n);
    getchar();/*去除行末空格*/
    for(i=0;i&lt;m;++i)
    {
        for(j=0;j&lt;n;++j)
            arr[i][j] = getchar();
        getchar(); /*去除行末回车*/
    }
    while(SignBar(arr,bd,m,n))
    {
    ClearBar(arr,bd,m,n);
    DropBar(arr,bd,m,n);
    }
    for( i=0; i&lt;m; ++i)
    {
        for(j=0; j&lt;n; ++j)
            printf(&quot;%c&quot;,arr[i][j]);
        printf(&quot;\n&quot;);
    }
    return 0;
}
[/code]

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>694</wp:post_id>
		<wp:post_date>2013-02-28 23:04:14</wp:post_date>
		<wp:post_date_gmt>2013-02-28 15:04:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bardrop</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e4%b9%9d%e5%ae%ab%e6%a0%bc"><![CDATA[九宫格]]></category>
		<category domain="post_tag" nicename="%e4%bf%84%e7%bd%97%e6%96%af%e6%96%b9%e5%9d%97"><![CDATA[俄罗斯方块]]></category>
		<category domain="post_tag" nicename="%e6%96%b9%e5%9d%97%e4%b8%8b%e8%90%bd"><![CDATA[方块下落]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869150]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>简易电路辅助分析软件&#124;DCAP</title>
		<link>http://www.aemiot.com/simple-dcap.html</link>
		<pubDate>Sat, 16 Mar 2013 06:46:51 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=729</guid>
		<description></description>
		<content:encoded><![CDATA[这是一款win32下的电路分析软件。它能够帮你进行简单的电路分析。

目前仅支持电阻、电压源、电流源。

<h1>使用说明</h1>

电路拓扑信息格式：

元件类型（目前仅支持电阻、电压源、电流源。）  支路编号  起始节点  终止节点  元件属性值

其中起始节点到终止节点的方向为支路的电流参考方向。（整个电路要求采用关联参考方向）

<a href="http://www.aemiot.com/wp-content/uploads/2013/03/20130316143025.gif"><img src="http://www.aemiot.com/wp-content/uploads/2013/03/20130316143025.gif" alt="20130316143025" width="596" height="388" class="aligncenter size-full wp-image-733" /></a>

<h1>下载</h1>

<ul>
	<li>[download link="http://www.aemiot.com/download/简易DCAP.zip"]<span style="color: #050505;"><big><b>&nbsp;&nbsp;&nbsp;本地下载</b></big></span>[/download]</li>
</ul>

[warning]
作者:<strong>Aem</strong>
本文版权归作者和aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>729</wp:post_id>
		<wp:post_date>2013-03-16 14:46:51</wp:post_date>
		<wp:post_date_gmt>2013-03-16 06:46:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>simple-dcap</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dcap"><![CDATA[DCAP]]></category>
		<category domain="category" nicename="zp"><![CDATA[作品]]></category>
		<category domain="post_tag" nicename="%e7%94%b5%e8%b7%af"><![CDATA[电路]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869151]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>125</wp:comment_id>
			<wp:comment_author><![CDATA[直流电路分析2B法的程序设计解决方案 | Aem博客]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.aemiot.com/dcap-2b-sub.html</wp:comment_author_url>
			<wp:comment_author_IP>108.166.217.2</wp:comment_author_IP>
			<wp:comment_date>2013-06-09 01:56:24</wp:comment_date>
			<wp:comment_date_gmt>2013-06-08 17:56:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 依据上述解决方案得到的简易DCAP分析软件：http://www.aemiot.com/simple-dcap.html [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1370714184.800673961639404296875;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>554</wp:comment_id>
			<wp:comment_author><![CDATA[ck]]></wp:comment_author>
			<wp:comment_author_email>ckworst@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://网址（选填）</wp:comment_author_url>
			<wp:comment_author_IP>64.62.177.178</wp:comment_author_IP>
			<wp:comment_date>2014-12-17 08:04:31</wp:comment_date>
			<wp:comment_date_gmt>2014-12-17 00:04:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[您的程序对我很有用。可以提供二次开发的接口或者源码吗？]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1418774672.135427951812744140625;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>556</wp:comment_id>
			<wp:comment_author><![CDATA[昵称（必填）]]></wp:comment_author>
			<wp:comment_author_email>aem3372@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://网址（选填）</wp:comment_author_url>
			<wp:comment_author_IP>223.104.10.249</wp:comment_author_IP>
			<wp:comment_date>2014-12-22 14:31:35</wp:comment_date>
			<wp:comment_date_gmt>2014-12-22 06:31:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="#comment-554" rel="nofollow">@ck </a>源码十分简陋，有需要吗]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>554</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1419229895.609899997711181640625;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>简易分数运算类</title>
		<link>http://www.aemiot.com/fenshu.html</link>
		<pubDate>Tue, 19 Mar 2013 16:19:32 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=741</guid>
		<description></description>
		<content:encoded><![CDATA[利用最大公约数和最小公倍数，我们可以模拟出分数的运算。（最大公约数和最小公倍数的算法，请看<a title="易于编程的最大公约数算法和最小公倍数算法|杭电Problem-1019" href="http://www.aemiot.com/gcd-lcm.html" target="_blank">这里</a>）

下面就是我封装的一个简易分数运算类。

1. 这个分数运算类支持使用两个int类型的值创建它。

2. 支持四则运算。

3. 支持向double类型的转换。

[code lang="cpp"]
#ifndef INTDOUBLE_HEADER
#define INTDOUBLE_HEADER
#include

typedef int NUM;
NUM ancalc(NUM t1,NUM t2)
{
    int t;
    if(t1&gt;t2) t=t1,t1=t2,t2=t;
    while(t2!=0)
    {
        t=t2;
        t2 = t1%t2;
        t1 = t;
    }
    return t1;
}
NUM calc(NUM t1,NUM t2)
{
    int t;
    return t1*t2/ancalc(t1,t2);
}

class intDouble{
friend intDouble operator+(const intDouble&amp; A,const intDouble&amp; B);
friend intDouble operator-(const intDouble&amp; A,const intDouble&amp; B);
friend intDouble operator*(const intDouble&amp; A,const intDouble&amp; B);
friend intDouble operator/(const intDouble&amp; A,const intDouble&amp; B);
friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os,const intDouble&amp; val);
friend std::istream&amp; operator&gt;&gt;(std::istream&amp; is,intDouble&amp; val);
public:
	intDouble():numerator(0),denominator(1) {}
	intDouble(int nume,int deno):numerator(nume),denominator(deno) {}
	operator double () { return numerator / denominator; }
private:
	int numerator,denominator;
};

intDouble operator+ (const intDouble&amp; A,const intDouble&amp; B)
{
	int	numerator(A.numerator+B.numerator),denominator(calc(A.denominator,B.denominator));
	if(!(denominator%numerator))
	{
		int gcd = ancalc(numerator,denominator);
		numerator /= gcd;
		denominator /= gcd;
	}
	return intDouble(numerator,denominator);
}

intDouble operator- (const intDouble&amp; A,const intDouble&amp; B)
{
	int	numerator(A.numerator-B.numerator),denominator(calc(A.denominator,B.denominator));
	if(!(denominator%numerator))
	{
		int gcd = ancalc(numerator,denominator);
		numerator /= gcd;
		denominator /= gcd;
	}
	return intDouble(numerator,denominator);
}

intDouble operator* (const intDouble&amp; A,const intDouble&amp; B)
{
	int	numerator(A.numerator*B.numerator),denominator(A.denominator*B.denominator);
	if(!(denominator%numerator))
	{
		int gcd = ancalc(numerator,denominator);
		numerator /= gcd;
		denominator /= gcd;
	}
	return intDouble(numerator,denominator);
}

intDouble operator/ (const intDouble&amp; A,const intDouble&amp; B)
{
	int	numerator(A.numerator*B.denominator),denominator(A.denominator*B.numerator);
	if(!(denominator%numerator))
	{
		int gcd = ancalc(numerator,denominator);
		numerator /= gcd;
		denominator /= gcd;
	}
	return intDouble(numerator,denominator);
}

intDouble operator += (intDouble&amp; A,const intDouble&amp; B)
{
	return A = A+B;
}

intDouble operator -= (intDouble&amp; A,const intDouble&amp; B)
{
	return A = A-B;
}

intDouble operator *= (intDouble&amp; A,const intDouble&amp; B)
{
	return A = A*B;
}

intDouble operator /= (intDouble&amp; A,const intDouble&amp; B)
{
	return A = A/B;
}

std::ostream&amp; operator&lt;&lt; (std::ostream&amp; os,const intDouble&amp; val)
{
	os &lt;&lt; val.numerator &lt;&lt; &quot;|&quot; &lt;&lt; val.denominator; 	return os; } std::istream&amp; operator&gt;&gt; (std::istream&amp; is,intDouble&amp; val)
{
	if(val.denominator == 1)
		is &gt;&gt; val.numerator;
	else
		is &gt;&gt; val.numerator &gt;&gt; val.denominator;
	return is;
}
#endif
[/code]

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>741</wp:post_id>
		<wp:post_date>2013-03-20 00:19:32</wp:post_date>
		<wp:post_date_gmt>2013-03-19 16:19:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fenshu</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[c]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e6%95%b0"><![CDATA[分数]]></category>
		<category domain="category" nicename="jyzt"><![CDATA[经验之谈]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869152]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>吉哥系列故事：临时工计划&#124;2013腾讯编程马拉松初赛第〇场（3月20日）</title>
		<link>http://www.aemiot.com/hdu4502.html</link>
		<pubDate>Thu, 21 Mar 2013 07:33:47 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=746</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
吉哥系列故事——临时工计划
<h1>题目简述</h1>
<p>&nbsp;&nbsp;&nbsp;&nbsp;俗话说一分钱难倒英雄汉，高中几年下来，吉哥已经深深明白了这个道理，因此，新年开始存储一年的个人资金已经成了习惯，不过自从大学之后他不好意思再向大人要压岁钱了，只能把唯一的希望放到自己身上。可是由于时间段的特殊性和自己能力的因素，只能找到些零零碎碎的工作，吉哥想知道怎么安排自己的假期才能获得最多的工资。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;已知吉哥一共有m天的假期，每天的编号从1到m，一共有n份可以做的工作，每份工作都知道起始时间s，终止时间e和对应的工资c，每份工作的起始和终止时间以天为单位(即天数编号)，每份工作必须从起始时间做到终止时间才能得到总工资c，且不能存在时间重叠的工作。比如，第1天起始第2天结束的工作不能和第2天起始，第4天结束的工作一起被选定，因为第2天吉哥只能在一个地方工作。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;现在，吉哥想知道怎么安排才能在假期的m天内获得最大的工资数（第m+1天吉哥必须返回学校，m天以后起始或终止的工作是不能完成的）。</p>

<h1>输入</h1>
第一行是数据的组数T；每组数据的第一行是2个正整数：假期时间m和可做的工作数n；接下来n行分别有3个正整数描述对应的n个工作的起始时间s，终止时间e，总工资c。
1&lt;=T&lt;=1000
9&lt;m&lt;=100
0&lt;n&lt;=1000
s&lt;=100, e&lt;=100, s&lt;=e
c&lt;=10000
<h1>输出</h1>
对于每组数据，输出吉哥可获得的最高工资数。

<h1>样例输入</h1>
1
10 5
1 5 100
3 10 10
5 10 100
1 4 2
6 12 266

<h1>样例输出</h1>

102

<h1>解题思路</h1>

<p>&nbsp;&nbsp;&nbsp;&nbsp;数据量非常大，1000组数据，而时间至多100，这就说明其中大多数任务是存在冲突的。那么为了将问题解决，可以选择对假期时间来动态规划来做这道题。</p>
不难发现，第N天的最大值,要么是第N-1天的最大值,要么就是某个任务开始时间前一天能获得的最大值加上该任务的最大值。为了将数据变得更加有序，可以将数据按照任务的结束时间来存放，这也正好和假期时间形成对应关系，以便于我们在动态规划时的存取。假如我们的数据按照结束时间建立了一个List二维列表，其中List的第N行第M列，代表在第N天结束的某个任务。</p>
<p>综上，列出状态转移方程：状态转移方程 MAX[Time] = max{MAX[Time-1],for_each(MAX[List[Time][k].begin-1]+List[Time][k].cost)}</p>
<p>那么有了动态转移方程，我相信问题也就能够解决了。</p>

[note]
这里再简述下，某人说的另一种思路（虽然效率上没有动态规划快，但也不失为一种方法）。时间区间看成节点，区间从左到右排序，然后只要区间之间没有重复就连边，根据图论求最长路径。
[/note]

<h1>我的代码</h1>

[code lang="c"]
#include &lt;stdio.h&gt;
#define SMAX 110
#define EMAX 1005
/*状态转移方程 MAX[Time] = max{ MAX[Time-1],for_each(MAX[List[Time][k].begin-1]+List[Time][k].cost) }*/
/*第N天的最大值,要么是第N-1天的最大值,要么就是某个任务开始时间前一天能获得的最大值加上该任务的最大值*/

/*risk对象拥有开始时间，和结束时能获得的收入*/
struct risk{
	int begin,cost;
};

struct risk List[SMAX][EMAX];
int List_count[SMAX];
/*List[i] 是在第i天完成的一个任务组*/
/*List_count[i] 是在第i天结束的任务数量*/

int DP_MAX[SMAX];

int check(int s,int e,int c,int m)
{
	if(e&gt;m) return 0; /*不能及时返回学校*/
	return 1;
}

void clear(void)
{
    int i;
    for(i=0; i&lt;SMAX; ++i) List_count[i] = 0;
}

int main(void)
{
	int T,m,n,s,e,c;
	int i,j;
	struct risk temp;
	scanf(&quot;%d&quot;,&amp;T);
	while(T--)
	{
	    clear();
		scanf(&quot;%d%d&quot;,&amp;m,&amp;n);
		/*读入数据，并预处理*/
		for(i=0; i&lt;n; ++i)
		{
			scanf(&quot;%d%d%d&quot;,&amp;s,&amp;e,&amp;c);
			if(check(s,e,c,m))
			{
				temp.begin = s; temp.cost = c;
				List[e][List_count[e]++] = temp;
			}
		}
		DP_MAX[0] = 0; /*没有时间，当然没有收入*/
		for(i=1; i&lt;=m; ++i)/*假期时间*/
		{
			DP_MAX[i] = DP_MAX[i-1];
			for(j=0; j&lt;List_count[i]; ++j)
			{
				int now_cost = DP_MAX[List[i][j].begin - 1] + List[i][j].cost;
				if( now_cost &gt; DP_MAX[i])	DP_MAX[i] = now_cost;
			}
		}
            printf(&quot;%d\n&quot;,DP_MAX[m]);
	}
	return 0;
}
[/code]

[warning]
作者:<strong>Aem</strong>
本文版权归作者和aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>746</wp:post_id>
		<wp:post_date>2013-03-21 15:33:47</wp:post_date>
		<wp:post_date_gmt>2013-03-21 07:33:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hdu4502</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="2013"><![CDATA[2013]]></category>
		<category domain="post_tag" nicename="%e5%88%9d%e8%b5%9b"><![CDATA[初赛]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e8%85%be%e8%ae%af%e7%bc%96%e7%a8%8b%e9%a9%ac%e6%8b%89%e6%9d%be"><![CDATA[腾讯编程马拉松]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869153]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>传统高精度算法系列(三)整数的高精度阶乘</title>
		<link>http://www.aemiot.com/calc-high-int-jc.html</link>
		<pubDate>Mon, 01 Apr 2013 05:21:16 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=762</guid>
		<description></description>
		<content:encoded><![CDATA[有了之前<a href="http://www.aemiot.com/calc-high-int-sum.html" target="_blank">高精度加法</a>和<a href="http://www.aemiot.com/calc-high-int-inc.html" target="_blank">高精度减法</a>的介绍，这里的高精度阶乘就不多说了，原理类似。

计算高精度阶乘实质是多次高精度乘单精度的乘法，同样按照竖向式运算模拟。

很容易写出如下的代码：

[code lang="c"]
#include &lt;stdio.h&gt;
#define MAX 5000
int arr[MAX] = {0};
int main(void)
{
    int n,i,j,k;
    scanf(&quot;%d&quot;,&amp;n);
    arr[0]=1;
    k=1; /*当前长度为1*/
    for(i=2; i&lt;=n; ++i)
    {
        /*对于有效部分乘上k*/
        int c = 0;
        for(j=0; j&lt;k; ++j)
        {
            int s = arr[j]*i + c;
            arr[j] = s % 10;
            c = s / 10;
        }
        /*更改有效长度*/
        while(c)
        {
            arr[k++] = c %10;
            c /= 10;
        }
    }
    for(i=k-1; i&gt;=0; --i)
        printf(&quot;%d&quot;,arr[i]);
    return 0;
}
[/code]

[warning]
作者:Aem
本文版权归作者和aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>762</wp:post_id>
		<wp:post_date>2013-04-01 13:21:16</wp:post_date>
		<wp:post_date_gmt>2013-04-01 05:21:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>calc-high-int-jc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e9%98%b6%e4%b9%98"><![CDATA[阶乘]]></category>
		<category domain="post_tag" nicename="%e9%ab%98%e7%b2%be%e5%ba%a6"><![CDATA[高精度]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869154]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>话说，我是菜鸟&#124;江西师范大学ACM协会新生选拔赛题解</title>
		<link>http://www.aemiot.com/acm-other1.html</link>
		<pubDate>Thu, 04 Apr 2013 17:02:57 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=766</guid>
		<description></description>
		<content:encoded><![CDATA[话说自从被腾讯马拉松虐了之后，心态一直很消极。

准备找点水题来找自信，于是我就去看了下江西师范大学ACM协会新生选拔赛（赛后重挂）打个酱油，事实证明心态不正，结果一定很悲惨！！！

这是结果：

<a href="http://www.aemiot.com/wp-content/uploads/2013/04/acmother.jpg"><img src="http://www.aemiot.com/wp-content/uploads/2013/04/acmother.jpg" alt="acmother" width="1055" height="39" class="aligncenter size-full wp-image-770" /></a>

虽然是水题，最后全部A掉了，不过= =，错这么多次才A,特别是第一二题都错，让我怎么好意思说我是曾经的OI选手啊！

[toggle title="第一题题解"]

<h1>Problem Description</h1>

Ｗｅｌｃｏｍｅ　Ｅｖｅｒｙｏｎｅ~~
期待了很久很久滴华丽丽滴江西师范大学ＡＣＭ协会华丽丽滴在２０１３年０２月２２日成立了~一个够二的日子一个不二的组织~
撒花撒花~~
身为协会滴宣传，我灰常灰常感谢各位能来参加偶们滴招新比赛，。。
好吧，说实话今天我滴主要任务就是给大家打气加油～我也就是颗大一小白菜，轻拍板砖，会砸烂的。。＝＿＝｜
比赛神马滴真心不难的，绝对滴够水，，泳池水深1.5M。。高台跳水注意安全~
好吧，比老师滴实验报告总要难点咯，要不然肿么能体现出大家滴实力捏～那些ｓｃａｎｆ半径算面积神马滴，。完全让人木有运行滴冲动啊，有木有啊啊！！！
申明一下，千万不要利用这个机会体现自己和某人那个一往情深啊ｏｒ那个手足义气啊，。我劝各位哦，这个是要记院级处分滴！！！！！
那么，，神马算作弊捏？？
Ｆｉｒｓｔ　ｏｆ　ａｌｌ，ＱＱ神马传代码，某些Ｃ大神。。你们辛苦了啊，一个人两份代码，吼吼~
Ｔｈｅｎ，度娘再万岁，现在天要下雨度娘要嫁人了，，靠自己咯孩纸~
Ｌａｓｔ，，额，。。。
哎哎～。。写这种东西，孩纸八辈纸滴节操都木有了。。所以要借这个机会好好滴爆料下偶滴师兄们，呜呜。。（捂住嘴然后拖走中。。。）

请注意请注意！！！！！！

如果你没有时间没有准备没有毅力每周上课、刷题、比赛~请跳过此题，ACM需要各位付出大量的精力时间，并且不是你付出了，最后就一定会有所回报。。

我们大家未来的路都还很长，所以，我们仅欢迎那些愿意一直一直互相扶持一同前进的战友~WE ARE A TEAM 

<h1>Input</h1>

请输入今天的日期（2013330）。 

<h1>Output</h1>

然后，就请输入”I volunteer to join the JXNU_ACM,OVER!“（不包括引号）。（有人说和输入数据无关呢~但这样不会出现RE了O(∩_∩)O）（TIPS：别忘了换行哦） 

<h1>Sample Input</h1>

2013330

<h1>Sample Output</h1>

I volunteer to join the JXNU_ACM,OVER!

<h1>Author</h1>

吴烨琪 

<h1>Source</h1>

ACM协会 

<h1>解题思路</h1>

这题真的没啥好说的，我相信也没人需要这题的题解，不过，我还是贴出我的代码吧= =！不过我要很无耻的说，我第一题题目没看完就写了么，特别注意要换行符，可我还是没换行。哎！~

<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
using namespace std;
int main(void)
{
    int x;
    cin &gt;&gt; x;
    cout &lt;&lt; &quot;I volunteer to join the JXNU_ACM,OVER!&quot; &lt;&lt; endl;
    return 0;
}
[/code]

[/toggle]

[toggle title="第二题题解"]
<h1>Problem Description</h1>

小KD好头疼出题的事。。。因为题目出难了没人写出来的话，比赛就白办了。。。所以便有了以下这道题
输入两个自然数a,b(0<=b<a<=2^63)，计算a与b的和并输出。
(提示：long long使用I64d输入输出，unsigned long long使用I64u输入输出。) 

<h1>Input</h1>
RT 
<h1>Output</h1>
RT 
<h1>Sample Input</h1>
2 1
<h1>Sample Output</h1>
3
<h1>Author</h1>
李思辰 
<h1>Source</h1>
ACM协会 
<h1>解题思路</h1>
加法，也没啥好说的，注意下，别像我一样习惯的打成了%I64d，这里要%I64u。还有就是，别以为一行结果就不要换行了，这里我又没换行，再一次PE。（话说OI赛忽略文件末尾空白符多和谐。）
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;stdio.h&gt;
unsigned long long a,b;
int main(void)
{
	scanf(&quot;%I64u&quot;,&amp;a,&amp;b);
	printf(&quot;%I64u&quot;,a+b);
}
[/code]
[/toggle]

[toggle title="第三题题解"]
<h1>Problem Description</h1>
在C语言课上，大家学习了3位整数倒序输出如 123->321.要是n位整数，你会做吗？
小KD为了让更多人做出这道题，给出了温（xie）馨（e）提示：用字符串有奇效。（学长我错了。。。我不该透题解） 

<h1>Input</h1>

m组测试数据(小于100)，每组一行。每行两个数：第一个数n，第二个数是一个n位整数a（n不超出32位整形）。 

<h1>Output</h1>

倒序输出n位整数a。每两个数用回车分开。 

<h1>Sample Input</h1>

3 123
3 234
3 333

<h1>Sample Output</h1>

321
432
333

<h1>Author</h1>

李思辰 

<h1>Source</h1>

ACM协会 
<h1>解题思路</h1>
倒序么，有好几种思路呢。
首先，可以利用除10和对10取模完成倒序
其次，你可以用字符串读入，然后反向遍历字符串（当然你整型读入也没关系，使用sprintf函数或者ostringstring流对象即可）；
当然，还有一些其他方法，这里就不多说。
在这里，我选择了第二种方法，利用C++ STL，可以快速写完。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
int main(void)
{
    int n;
    string str;
    while(cin &gt;&gt; n)
    {
        cin &gt;&gt; str;
        if(str.at(0)=='-')  { cout &lt;&lt; '-';  str = str.substr(1,str.size()-1); }
        cout &lt;&lt; string(str.rbegin(),str.rend()) &lt;&lt; endl;
    }
    return 0;
}
[/code]
[/toggle]

[toggle title="第四题题解"]
<h1>Problem Description</h1>

江西师范大学的食堂每到中午十二点都是十分拥挤的。
设有N个学生打饭，并且每个学生都需要打K种饭/菜。食堂有M名员工，并且每一位员工都面前都有这K种饭/菜(也就是说每个员工都能打K种饭/菜中的任意一种)。训练有素的食堂员工会用一秒钟将饭菜打好。不计其他时间损耗。
小KD为了避开打饭高峰期。要你写一个程序计算学生打完饭需要多长时间。 

<h1>Input</h1>

输入的第一行为一个正整数T，表示有T组测试数据；
接下去有T组测试数据，每组测试数据占一行，包含三个整数N，K，M，N表示学生的人数，K表示每个学生要打的饭菜数，M表示食堂员工的人数。
T<=1000
1<=N<=100
1<=K<=10
1<=M<=100 

<h1>Output</h1>

对于每组数据，输出一个整数，表示最快需要多少秒才能使所有同学打完饭。 

<h1>Sample Input</h1>

2
2 1 1
3 2 2

<h1>Sample Output</h1>

2
3
<h1>Author</h1>

李思辰 
<h1>Source</h1>

ACM协会 

<h1>解题思路<h2>
首先吐槽下这题目描述，看完之后，很多细节方面我还真没看明白= =！不过等我看了N遍之后，我突然发现，这不就是我几天前A过的题么，可惜在这期间，我冲动的提交了一次，导致了一次WA。（几天前还是一次A过的，这次居然不能一次过= =！）废话说完了，顺便贴出此题原型吧--<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4519">腾讯马拉松网络赛初赛第四场——郑厂长系列故事——体检（现HDU-Problem-4519）</a>。回归题解了，这题唯一需要注意的就是，当食堂员工数M大于学生数N时，一个时刻也只能有N个员工给N个学生打饭/菜。即当M>N时，与M=N是一样的结果。至于其中数学关系，很容易发现：(n*k)/m向上取整，在C语言中可表述为(n*k-1)/m+1
<h1>我的代码</h1>
[code lang="c"]
#include &lt;stdio.h&gt;
int main(void)
{
	int t,n,k,m;
	scanf(&quot;%d&quot;,&amp;t);
	while(t--)
	{
		scanf(&quot;%d%d%d&quot;,&amp;n,&amp;k,&amp;m);
		if(m&gt;n) m = n;
		printf(&quot;%d\n&quot;,(n*k-1)/m+1);
	}
	return 0;
}
[/code]
[/toggle]

[toggle title="第五题题解"]
<h1>Problem Description</h1>

在计算机导论课上，我们学到了一种字符串压缩方法：字符串中有多个相同字符连在一起，就以字符加出现次数形式表示。如 abcddddddddef 就可以表示为abcd8ef。现小KD制作了些字符串，让你将其压缩。

<h1>Input</h1>

多组输入数据，每组一行，字符长度小于20。 

<h1>Output</h1>

压缩后的字符串。 

<h1>Sample Input</h1>

abcddddddddef
qwertyuiop
aassddffgghhjjkkll

<h1>Sample Output</h1>

abcd8ef
qwertyuiop
a2s2d2f2g2h2j2k2l2

<h1>Author</h1>

李思辰 

<h1>Source</h1>

ACM协会 

<h1>解题思路</h1>
这题其实和我之前写的某道题（<a href="http://www.aemiot.com/encode.html" title="最简单的压缩方式|杭电Problem-1020">杭电-1020题解</a>）差不多，注意下这题和杭电-1020不同的是，去除了字符是‘A’-‘Z’这个限制，也就是要能正确处理空白字符的情况，关于这点，只需要将按字符串读入，换为按行读入即可。（话说这题数据比较坑，它的测试数据中没有连续的空格，导致在按字符串读入时，系统给出的提示不是WA而是PE，就是这个导致我提交了N次都不知道为什么会是PE，一直在检查输出。）

<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;stdio.h&gt;
#include &lt;iostream&gt;
#include &lt;ctype.h&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#define MAX 10000
using namespace std;
/*返回字符串第一个字符连续且相同的字符个数(包括第一个字符)*/
int ReX(char arr[])
{
    int n=0;
    char befo = arr[n++],t = befo;
    while(t==befo)
        t=arr[n++];
    return n-1;
}

int main(void)
{
    char arr[MAX],str[MAX];
    int i,n,e,x;
    string st;
    while(cin &gt;&gt; st)
    {
        char *p = str;
        e = 0;
        strcpy(arr,st.c_str());
        while(arr[e])
        {
        x = ReX(arr+e);
        if(x==1) p += sprintf(p,&quot;%c&quot;,arr[e]);
        else p += sprintf(p,&quot;%c%d&quot;,arr[e],x);
        e += x;
        }
        //p += sprintf(p,&quot;\n&quot;);
        p += sprintf(p,&quot;&#92;&#48;&quot;);
        printf(&quot;%s&quot;,str);
    }   
    return 0;
}
[/code]
[/toggle]

[toggle title = "第六题题解"]
<h1>Problem Description</h1>

ACM协会新生赛即将结束。。。小KD头疼的划分数线工作开始了。现在已知有n名同学参加ACM协会新生赛，并且知道每个同学的分数，小KD想知道其中第k名的分数是多少。 

<h1>Input</h1>

第一行读入n,k，含义如题所述（n<10000,k不超出int型范围）
接下来n行读入n个整数，第i个整数表示第i个同学的分数。 

<h1>Output</h1>

一个整数，表示第k名同学的分数是多少。 

<h1>Sample Input</h1>

5 3
600 600 350 420 380

<h1>Sample Output</h1>

420

<h1>Author</h1>

李思辰 

<h1>Source</h1>

ACM协会 
<h1>解题思路</h1>
2种方案。第一种，读入数据，排序，输出结果。第二种，利用STL的multiset容器，因为multiset建立时就已经是有序状态（平衡引索二叉树，效率也挺高的哦），然后直接拿multiset的反向迭代器找到我们需要的结果。这里我选择了第二种。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;set&gt;
using namespace std;
int main(void)
{
	int n,k;
	int t;
	cin &gt;&gt; n &gt;&gt; k;
	multiset&lt;int&gt; s;
	while(n--)
	{
		cin &gt;&gt; t;
		s.insert(t);	
	}
	multiset&lt;int&gt;::reverse_iterator itor = s.rbegin();
	for(int i=0; i&lt;k-1; ++i)  ++itor;
	cout &lt;&lt; *itor &lt;&lt; endl;
	return 0;
}
[/code]
[/toggle]

[toggle title ="第七题题解"]
<h1>Problem Description</h1>

How far can you make a stack of cards overhang a table? If you have one card, you can create a maximum overhang of half a card length. (We're assuming that the cards must be perpendicular to the table.) With two cards you can make the top card overhang the bottom one by half a card length, and the bottom one overhang the table by a third of a card length, for a total maximum overhang of 1/2 + 1/3 = 5/6 card lengths. In general you can make n cards overhang by 1/2 + 1/3 + 1/4 + ... + 1/(n + 1) card lengths, where the top card overhangs the second by 1/2, the second overhangs tha third by 1/3, the third overhangs the fourth by 1/4, etc., and the bottom card overhangs the table by 1/(n + 1). This is illustrated in the figure below.

 <a href="http://www.aemiot.com/wp-content/uploads/2013/04/1056-1.gif"><img src="http://www.aemiot.com/wp-content/uploads/2013/04/1056-1.gif" alt="1056-1" width="513" height="144" class="aligncenter size-full wp-image-784" /></a>

The input consists of one or more test cases, followed by a line containing the number 0.00 that signals the end of the input. Each test case is a single line containing a positive floating-point number c whose value is at least 0.01 and at most 5.20; c will contain exactly three digits.

For each test case, output the minimum number of cards necessary to achieve an overhang of at least c card lengths. Use the exact output format shown in the examples.


<h1>Sample Input</h1>

1.00
3.71
0.04
5.19
0.00


<h1>Sample Output</h1>

3 card(s)
61 card(s)
1 card(s)
273 card(s)


<h1>Source</h1>
Mid-Central USA 2001 

<h1>解题思路</h1>
直接模拟过程，循环加判断即可~！

<h1>我的代码</h1>
[code lang="cpp"]
#include&lt;iostream&gt;
using namespace std;
int main()
{
    int n;
    double sum;
    double length;
    while(cin&gt;&gt;length)
    {
        if(!length)break;
        sum=0,n=0;
        while(length&gt;sum)
            sum+=1.0/(++n+1);
        cout &lt;&lt; n &lt;&lt; &quot; card(s)&quot; &lt;&lt; endl; 
    }
    return 0; 
} 
[/code]
[/toggle]

[toggle title ="第八题题解"]
<h1>Problem Description</h1>

Fred Mapper is considering purchasing some land in Louisiana to build his house on. In the process of investigating the land, he learned that the state of Louisiana is actually shrinking by 50 square miles each year, due to erosion caused by the Mississippi River. Since Fred is hoping to live in this house the rest of his life, he needs to know if his land is going to be lost to erosion. 

After doing more research, Fred has learned that the land that is being lost forms a semicircle. This semicircle is part of a circle centered at (0,0), with the line that bisects the circle being the X axis. Locations below the X axis are in the water. The semicircle has an area of 0 at the beginning of year 1. (Semicircle illustrated in the Figure.) 


<h1>Input</h1>

The first line of input will be a positive integer indicating how many data sets will be included (N). 

Each of the next N lines will contain the X and Y Cartesian coordinates of the land Fred is considering. These will be floating point numbers measured in miles. The Y coordinate will be non-negative. (0,0) will not be given.

<h1>Output</h1>

For each data set, a single line of output should appear. This line should take the form of: 

“Property N: This property will begin eroding in year Z.” 

Where N is the data set (counting from 1), and Z is the first year (start from 1) this property will be within the semicircle AT THE END OF YEAR Z. Z must be an integer. 

After the last data set, this should print out “END OF OUTPUT.” 

Notes: 

1. No property will appear exactly on the semicircle boundary: it will either be inside or outside. 

2. This problem will be judged automatically. Your answer must match exactly, including the capitalization, punctuation, and white-space. This includes the periods at the ends of the lines. 

3. All locations are given in miles.


<h1>Sample Input</h1>

2 
1.0 1.0 
25.0 0.0


<h1>Sample Output</h1>

Property 1: This property will begin eroding in year 1. 
Property 2: This property will begin eroding in year 20. 
END OF OUTPUT. 


<h1>Source</h1>
Mid-Atlantic USA 2001 

<h1>解题思路</h1>
不难发现如下数学关系
x*x + y*y = r*r
PI*r*r / 2 = S
S/50向上取整即是我们的结果。
注意：这里PI精度要高一点（我取3.14会WA，取3.1415926就AC）

<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;cmath&gt;
using namespace std;
const double PI = 3.1415926;
int main(void)
{
	int i,T,res;
	double x,y,val;
	cin &gt;&gt; T;
	for(i=1; i&lt;=T; ++i)
	{
		cin &gt;&gt; x &gt;&gt; y;
		val =PI*(x*x+y*y)/100;
		res = (val-(int)val)?(int)val+1:(int)val;
		cout &lt;&lt; &quot;Property &quot;&lt;&lt; i &lt;&lt;&quot;: This property will begin eroding in year &quot; &lt;&lt; res &lt;&lt; &quot;.&quot; &lt;&lt; endl;
	}
	cout &lt;&lt; &quot;END OF OUTPUT.&quot; &lt;&lt;endl;
	return 0;
}
[/code]
[/toggle]

[toggle title ="第九题题解"]
<h1>Problem Description</h1>

HOHO，终于从Speakless手上赢走了所有的糖果，是Gardon吃糖果时有个特殊的癖好，就是不喜欢将一样的糖果放在一起吃，喜欢先吃一种，下一次吃另一种，这样；可是Gardon不知道是否存在一种吃糖果的顺序使得他能把所有糖果都吃完？请你写个程序帮忙计算一下。

<h1>Input</h1>

第一行有一个整数T，接下来T组数据，每组数据占2行，第一行是一个整数N（0<N<=1000000)，第二行是N个数，表示N种糖果的数目Mi(0<Mi<=1000000)。

<h1>Output</h1>

对于每组数据，输出一行，包含一个"Yes"或者"No"。

<h1>Sample Input</h1>

2
3
4 1 1
5
5 4 3 2 1


<h1>Sample Output</h1>

No
Yes


<h1>Hint</h1>
Hint
Please use function scanf 

<h1>Author</h1>

Gardon 

<h1>Source</h1>

Gardon-DYGG Contest 2 

<h1>解题思路</h1>
话说，一开始看到这题时间给了3000ms，我还想模拟呢。后来仔细一想，发现这题其实完全没必要模拟整个过程，因为这是一个组合数学的问题呢，吃糖果的顺序构成一个序列，这个序列是由我们来排的，不连续吃同一种糖其实就是序列中没有两个相邻的是同一种糖。那么可以设想将最多的一种糖（假设有max个）果先全部加入序列，然后将余下的糖果插入其中，如果将问题建立在这样一个数学模型上，那么显然只有余下的糖少于max-1个时才可能会出现不符合题意的序列。因此，我们只要找出最大值max，如果max<=sum-max+1就存在，否则不存在。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
using namespace std;
int main()
{
     int T,n,m,a,max;
     int i,j;
     long long sum;
     cin &gt;&gt; T;
     while(T--)
     {
         sum=0; max=0;
         cin &gt;&gt; n;
         for (j=0;j&lt;n;j++)
         {
             cin &gt;&gt; a;
             if (a&gt;max) max=a;
             sum+=a;
         }
         if (sum-max+1&lt;max) 
	cout &lt;&lt; &quot;No&quot; &lt;&lt; endl;
         else 
	cout &lt;&lt; &quot;Yes&quot; &lt;&lt; endl;
     }
    return 0;
}
[/code]
[/toggle]

[toggle title ="第十题题解"]
<h1>Problem Description</h1>

A simple mathematical formula for e is

<a href="http://www.aemiot.com/wp-content/uploads/2013/04/1012-1.gif"><img src="http://www.aemiot.com/wp-content/uploads/2013/04/1012-1.gif" alt="1012-1" width="72" height="52" class="aligncenter size-full wp-image-782" /></a>

where n is allowed to go to infinity. This can actually yield very accurate approximations of e using relatively small values of n.


<h1>Output</h1>

Output the approximations of e generated by the above formula for the values of n from 0 to 9. The beginning of your output should appear similar to that shown below.

<h1>Sample Output</h1>

n e
- -----------
0 1
1 2
2 2.5
3 2.666666667
4 2.708333333

<h1>Source</h1>

Greater New York 2000 

<h1>解题思路</h1>
纯数学，不多说。唯一值得提下的就是输出格式不能使printf的g控制符，因为g控制符然后设定精度，那么在精度的最后一位如果是0会被忽略。例如printf("%.10g",3.123456780) 那么输出的会是 3.12345678，显然不符合我们题目的要求。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;stdio.h&gt;
#include &lt;ctype.h&gt;
#define MAX 10000

const int JC[10]={1,1,2,6,24,120,720,5040,40320,362880};

double ReX(int n)
{
    int i;
    double x=0;
    for(i=0; i&lt;=n; ++i)
        x += 1.0/JC[i];
    return x;
}

int main(void)
{
    int i;
    printf(&quot;n e\n&quot;);
    printf(&quot;- -----------\n&quot;);
    for(i=0; i&lt;=2; ++i)
        printf(&quot;%d %.10g\n&quot;,i,ReX(i));
    for(i=3; i&lt;=9; ++i)
        printf(&quot;%d %.9f\n&quot;,i,ReX(i));
    return 0;
}
[/code]
[/toggle]

[toggle title ="第十一题题解"]
<h1>Problem Description</h1>

The digital root of a positive integer is found by summing the digits of the integer. If the resulting value is a single digit then that digit is the digital root. If the resulting value contains two or more digits, those digits are summed and the process is repeated. This is continued as long as necessary to obtain a single digit.

For example, consider the positive integer 24. Adding the 2 and the 4 yields a value of 6. Since 6 is a single digit, 6 is the digital root of 24. Now consider the positive integer 39. Adding the 3 and the 9 yields 12. Since 12 is not a single digit, the process must be repeated. Adding the 1 and the 2 yeilds 3, a single digit and also the digital root of 39.


<h1>Input</h1>

The input file will contain a list of positive integers, one per line. The end of the input will be indicated by an integer value of zero.


<h1>Output</h1>

For each integer in the input, output its digital root on a separate line of the output.


<h1>Sample Input</h1>

24
39
0

<h1>Sample Output</h1>

6
3
<h1>Source</h1>
Greater New York 2000
<h1>解题思路</h1>
这题，我原来单独发过题解的，这里就不重复了，附上一个链接。
<a href="http://www.aemiot.com/problem-1013.html" title="使用数论知识消除模拟|杭电Problem-1013" target="_blank"><strong>查看此题题解</strong></a>
[/toggle]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>766</wp:post_id>
		<wp:post_date>2013-04-05 01:02:57</wp:post_date>
		<wp:post_date_gmt>2013-04-04 17:02:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>acm-other1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="post_tag" nicename="%e5%90%83%e7%b3%96%e6%9e%9c"><![CDATA[吃糖果]]></category>
		<category domain="post_tag" nicename="%e6%b1%9f%e8%a5%bf%e5%b8%88%e5%a4%a7"><![CDATA[江西师大]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869155]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2013第四届蓝桥杯C/C++程序设计本科B组省赛试题下载及解题报告（更新至第九题）</title>
		<link>http://www.aemiot.com/2013blue.html</link>
		<pubDate>Sat, 11 May 2013 08:16:36 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=797</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
哎，这次比赛，我纯酱油了....考试的时候短路的很...心态不正必败啊。
</p>

<h1>第一题</h1>
[toggle]
很简单的一道题，对于有过训练的ACMer应该可以速度解决的。
对于不常参加训练的就简单说下，注意闰年不是简单判断4的倍数。
ps：闰年，四年一闰，百年不闰，四百又闰。
计算出来的答案是： 1799－07－16
用于计算的代码（比赛的时候就别写成类还重载操作符了，下面这是我回来后写的）：

[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;cstdio&gt;
using namespace std;

const int MonJC[13]={0,31,28,31,30,31,30,31,31,30,31,30,31};
const int TMonJC[13]={0,31,29,31,30,31,30,31,31,30,31,30,31};

class Date{
friend Date operator- (Date T,unsigned int n);
friend Date operator+ (Date T,unsigned int n);
friend istream&amp; operator&gt;&gt; (istream&amp; is,Date T);
friend ostream&amp; operator&lt;&lt; (ostream&amp; os,Date T);
public:
	Date() {}
	Date(int y,int m,int d):year(y),month(m),day(d) {}
	bool check() //判断当前是否是闰年
	{
	    if(!(year%400)) return true;//能被400整除
        if(!(year%4))
        {
            if(!(year%100))
                return false;
            else
                return true;
        }
        else
            return false;
	}
	void Ty()
	{
		 --year;
	}
	void Tm()
	{
		if(month==1)
		{
			month = 12;
			Ty();
		}
		else
			--month;
	}
	void Td()
	{
		if(day==1)
		{
			Tm();
			if(check()) //闰年
				day = TMonJC[month];
			else
				day = MonJC[month];
		}
		else
			--day;
	}
	void Ay()
	{
		++year;
	}
	void Am()
	{
		if(month==12)
		{
			month = 1;
			Ay();
		}
		else
			++month;
	}
	void Ad()
	{
		if(month!=2)
		{
			if(day==MonJC[month])
			{
				day = 1;
				Am();
			}
			else
				++day;
		}
		else
			if(check()) //闰年
			{
				if(day==TMonJC[month])
				{
					day = 1;
					Am();
				}
				else
					++day;
			}
			else
			{
				if(day==MonJC[month])
				{
					day = 1;
					Am();
				}
				else
					++day;
			}
	}
private:
	int year,month,day;
};

Date operator- (Date T,unsigned int n)
{
	while(n--)
		T.Td();
	return T;
}

Date operator+ (Date T,unsigned int n)
{
	while(n--)
		T.Ad();
	return T;
}

istream&amp; operator&gt;&gt; (istream&amp; is,Date T)
{
	char t;
	is &gt;&gt; T.year &gt;&gt; t &gt;&gt; T.month &gt;&gt; t &gt;&gt; T.day;
	return is;
}

ostream&amp; operator&lt;&lt; (ostream&amp; os,Date T)
{
	cout &lt;&lt; T.year &lt;&lt; '/';
	if(T.month&lt;10)
		cout &lt;&lt; 0 &lt;&lt; T.month &lt;&lt; '/';
	else
		cout &lt;&lt; T.month &lt;&lt; '/';
	if(T.day&lt;10)
		cout &lt;&lt; 0 &lt;&lt; T.day;
	else
		cout &lt;&lt; T.day;
	//printf(&quot;%02d/%02d/%02d&quot;,T.year,T.month,T.day);
	return os;
}

int main(void)
{
    Date *p = new Date();
	Date base(1777,4,29);
    cout &lt;&lt; base+8113 &lt;&lt; endl;
	return 0;
}
[/code]


[/toggle]

<h1>第二题</h1>
[toggle]
这没啥好说的，暴力之，全排列算法都不用，直接上五重循环就可以了。
计算出的答案是: 142
用于计算的代码：
[code lang="c"]
#include&lt;stdio.h&gt;
int main()
{
    int a,b,c,d,e;
    int count = 0;
    for(a=1; a&lt;=9; ++a)
        for(b=1; b&lt;=9; ++b)
            for(c=1; c&lt;=9; ++c)
                for(d=1; d&lt;=9; ++d)
                    for(e=1; e&lt;=9; ++e)
                        if(a!=b &amp;&amp; a!=c &amp;&amp; a!=d &amp;&amp; a!=e &amp;&amp;
                           b!=c &amp;&amp; b!=d &amp;&amp; b!=e &amp;&amp;
                           c!=d &amp;&amp; c!=e &amp;&amp;
                           d!=e &amp;&amp;
                           (a*10+b)*(c*100+d*10+e) == (a*100+d*10+b)*(c*10+e))
                                    ++count;
    printf(&quot;%d&quot;,count);
}

[/code]
[/toggle]

<h1>第三题</h1>
[toggle]
这题么，我考试的时候抽风了，绝对是抽风了（大家都说蓝桥是水，我压根就没按平时打OJ比赛的思路去想）....居然会去想排列组合了。

回去一看，不就是个递推么= =（我还记得原来还做过个锁妖塔的题，这题就是那货的精简版啊，T_T）。

从题意知，假定先迈的是左脚，那么到达一层右脚落下的情况是0种，到一层左脚落下的情况是1种，到达二层左脚落下的情况是1种，到达二层右脚落下的情况是1种，之后到达第N层左脚落下的情况数是第N-1层右脚落下的情况数加上N-2层右脚落下的情况数，第N层右脚落下的情况数是第N-1层左脚落下的情况数加上N-2层左脚落下的情况数（这是基于第N层右脚落下，只能是从N-1层迈右脚走1或者从N-2层迈右脚走2的事实得到的结论）。
递推公式为：
arr[0][i] = arr[1][i-1] + arr[1][i-2]
arr[1][i] = arr[0][i-1] + arr[0][i-2]
计算结果为： 51167078
用于计算的代码：
[code lang="c"]
#include &lt;stdio.h&gt;
int main()
{
	int i;
	int arr[2][50];
	/*[  ][N] 第N层状况*/
	/*[0][N] 右脚落下，接下来迈出左脚*/
	/*[1][N] 左脚落下，接下来迈出右脚*/
	arr[0][1] = 0;
	arr[1][1] = 1;
	arr[0][2] = 1;
	arr[1][2] = 1;
	for(i=3; i&lt;50; ++i)
	{
		arr[0][i] = arr[1][i-1] + arr[1][i-2];
		arr[1][i] = arr[0][i-1] + arr[0][i-2];
	}
	printf(&quot;%d\n&quot;,arr[0][39]);
	return 0;
}

[/code]
[/toggle]

<h1>第四题</h1>
[toggle]
模拟题目给出的连分式运算（有兴趣的朋友可以去试试其他的办法，比如利用（根号5-1）/2 - 1 去计算）
为了简单处理，用java的大数类写吧（搞竞赛不好好利用下java的大数，实在是浪费资源啊）。
ps：考试的时候，我那机子不知道怎么回事，java的编译器各种抽风
因为不知道要计算到多少次才能到精度100...干脆就按OI的办法...10000-100000次吧...开个黑框让它慢慢算，反正比赛时间长，不怕它算不出来
计算小数点后101位: 0.61803 39887 49894 84820 45868 34365 63811 77203 09179 80576 28621 35448 62270 52604 62818 90244 97072 07204 18939 11374 8
四舍五入后答案为： 0.61803 39887 49894 84820 45868 34365 63811 77203 09179 80576 28621 35448 62270 52604 62818 90244 97072 07204 18939 11375
用于计算的代码：
[code lang="java"]
import java.util.Scanner;
import java.math.*;
import java.util.*;
public class Welcome
{
	public static void main(String[] args)
	{
		  int JD = 101;
		  BigDecimal b1 = new BigDecimal(&quot;1.000000&quot;);
      		  BigDecimal b2 = new BigDecimal(&quot;1.000000&quot;);
      		  for(int i = 0; i &lt; 10000; ++i)
		 {
		  b2 = b1.divide(b2.add(new BigDecimal(&quot;1.0000000&quot;)),10000,BigDecimal.ROUND_HALF_UP);
		}
		System.out.println(b2.toString().substring(0,JD+2));
	}
}
[/code]
[/toggle]

<h1>第五题</h1>
[toggle]
很简单，不多说。
答案： *haystack++ != *needle++
[/toggle]

<h1>第六题</h1>
[toggle]
依然简单，分也少。
答案： p++
[/toggle]

<h1>第七题</h1>
[toggle]
<h1>解题思路</h1>
水题，遍历即可。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;
using namespace std;
int flag[100011] = {0};
int main()
{
	string temp;
	int T;
	cin &gt;&gt; T;
	getline(cin,temp); //读掉换行符
	int chong=0,que=0;
	int min=100000,max=0;
	while(T--)
	{
		int id;
		getline(cin,temp);
		istringstream is(temp);
		while(is &gt;&gt; id)
		{
			//cout &lt;&lt; id &lt;&lt; endl;
			max = id&gt;max?id:max;
			min = id&lt;min?id:min;
			if(flag[id])
				chong = id;
			flag[id] = 1;
		}
	}
	for(int i=min+1; i&lt;max; ++i)
		if(!flag[i])
		{
			que = i;
			break;
		}
	cout &lt;&lt; que &lt;&lt; &quot; &quot;&lt;&lt; chong  &lt;&lt; endl;
	return 0;
}
[/code]
[/toggle]

<h1>第八题</h1>
[toggle]
<h1>解题思路</h1>
见代码注释。
<h1>我的代码</h1>
[code lang="cpp"]
/*
12345678
o******o 
*o*o***o   1   o**oo**o 
**o****o   2   *o*oo**o
***o***o   3   **ooo**o
***o**o*   4   ****o**o
***o*o**   5   ***o***o
***oo***   6   ***ooo*o
           7   ***oo*oo
           8   ***oo***
1 4 5 8
(4-1)+(8-5)    (5-4)+(8-1)
1 6 8 11

*/

//一定有偶数个不同
//找出开始和目标中不同的对,最短的移动方案就很显而易见，就是依次将临近的不同对消除。
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;
int main(int argc, char const *argv[])
{
	string start;
	string aim;
	vector&lt;int&gt; v;
	int sum = 0;
	cin &gt;&gt; start &gt;&gt; aim;
	for(int i=0; i&lt;(int)aim.size(); ++i)
		if(aim[i] != start[i])
			v.push_back(i);
	for(int i=0; i*2&lt;(int)v.size(); ++i)
		sum += v[2*i+1] - v[2*i];
	cout &lt;&lt; sum &lt;&lt; endl;
	return 0;
}
[/code]
[/toggle]

<h>第九题</h1>
[toggle]
<h1>解题思路</h1>
暴力,注意维度。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;cstdio&gt;
#include &lt;time.h&gt;
using namespace std;

int ans = 0;
int flag[10];
void dfs(int a,int b,int N)
{
	int ac,bc;
	ac = a;
	bc = b;
	if(a &amp;&amp; b &amp;&amp; b%(N-a)==0)
	{
		int tflag[10] = {0};
		int c = b/(N-a);
		int cc = c;
		int ok = 1;
		int sum = 0;
		while(cc)
		{
			++sum;
			if(cc%10==0 || flag[cc%10] || tflag[cc%10])
				ok = 0;
			else
				tflag[cc%10] = 1;
			cc /= 10;
		}
		while(ok &amp;&amp; ac)
		{
			++sum;
			ac /= 10;
		}
		while(ok &amp;&amp; bc)
		{
			++sum;
			bc /= 10;
		}
		if(ok &amp;&amp; sum!=9)
			ok = 0;
		if(ok)
		{
			++ans;
			//cout &lt;&lt; a &lt;&lt; &quot; &quot; &lt;&lt; b &lt;&lt; &quot; &quot; &lt;&lt; c &lt;&lt; endl;
			//system(&quot;pause&quot;);
		}
	}
	for(int i=1; i&lt;=9; ++i)
	{
		if(!flag[i])
		{
			flag[i] = 1;
			dfs(a,b*10+i,N);
			flag[i] = 0;
		}
	}
}

int main()
{
	int N;
	cin &gt;&gt; N;
	for(int i=1; i&lt;N ; ++i)
	{
		memset(flag,0,sizeof(flag));
		int ac = i;
		int len = 0;
		int ok = 1;
		while(ac &amp;&amp; ok)
		{
			++len;
			if(flag[ac%10] || ac%10==0)
				ok = 0;
			else
				flag[ac%10] = 1;
			ac /= 10;
		}
		if(ok)
			dfs(i,0,N);
	}
	cout &lt;&lt; ans &lt;&lt; endl;
	//cout &lt;&lt; clock()/CLOCKS_PER_SEC &lt;&lt; endl;
	return 0;
}
[/code]
[/toggle]

<h1>第十题（暂未更新）</h1>
<p> </p>

<h1>试题下载</h1>

[download link="http://www.aemiot.com/download/2013第四届蓝桥杯C程序设计本科B组省赛试题.rar"]<span style="color: #050505;"><big><b>&nbsp;&nbsp;&nbsp;本地下载</b></big></span>[/download]
[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>797</wp:post_id>
		<wp:post_date>2013-05-11 16:16:36</wp:post_date>
		<wp:post_date_gmt>2013-05-11 08:16:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>2013blue</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="2013"><![CDATA[2013]]></category>
		<category domain="post_tag" nicename="%e4%b8%8b%e8%bd%bd"><![CDATA[下载]]></category>
		<category domain="post_tag" nicename="%e7%ac%ac%e5%9b%9b%e5%b1%8a"><![CDATA[第四届]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e8%93%9d%e6%a1%a5%e6%9d%af"><![CDATA[蓝桥杯]]></category>
		<category domain="post_tag" nicename="%e8%af%95%e9%a2%98"><![CDATA[试题]]></category>
		<category domain="post_tag" nicename="%e9%a2%98%e8%a7%a3"><![CDATA[题解]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869156]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于KMP算法</title>
		<link>http://www.aemiot.com/kmp.html</link>
		<pubDate>Tue, 14 May 2013 05:06:33 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=809</guid>
		<description></description>
		<content:encoded><![CDATA[<p>说到KMP算法，个人还是非常喜欢Matri67写的，因此忍不住就直接引用他的了。</p>

[toggle]
<p>&nbsp;&nbsp;&nbsp;&nbsp;如果机房马上要关门了，或者你急着要和MM约会，请直接跳到第六个自然段。<br/> <br/>&nbsp;&nbsp;&nbsp;&nbsp;我们这里说的KMP不是拿来放电影的（虽然我很喜欢这个软件），而是一种算法。KMP算法是拿来处理字符串匹配的。换句话说，给你两个字符串，你需要回答，B串是否是A串的子串（A串是否包含B串）。比如，字符串A=&#34;I&#39;m matrix67&#34;，字符串B=&#34;matrix&#34;，我们就说B是A的子串。你可以委婉地问你的MM：“假如你要向你喜欢的人表白的话，我的名字是你的告白语中的子串吗？”<br/>&nbsp;&nbsp;&nbsp;&nbsp;解决这类问题，通常我们的方法是枚举从A串的什么位置起开始与B匹配，然后验证是否匹配。假如A串长度为n，B串长度为m，那么这种方法的复杂度是O (mn)的。虽然很多时候复杂度达不到mn（验证时只看头一两个字母就发现不匹配了），但我们有许多“最坏情况”，比如，A= &#34;aaaaaaaaaaaaaaaaaaaaaaaaaab&#34;，B=&#34;aaaaaaaab&#34;。我们将介绍的是一种最坏情况下O(n)的算法（这里假设 m&lt;=n），即传说中的KMP算法。<br/>&nbsp;&nbsp;&nbsp;&nbsp;之所以叫做KMP，是因为这个算法是由Knuth、Morris、Pratt三个提出来的，取了这三个人的名字的头一个字母。这时，或许你突然明白了AVL 树为什么叫AVL，或者Bellman-Ford为什么中间是一杠不是一个点。有时一个东西有七八个人研究过，那怎么命名呢？通常这个东西干脆就不用人名字命名了，免得发生争议，比如“3x+1问题”。扯远了。<br/>&nbsp;&nbsp;&nbsp;&nbsp;个人认为KMP是最没有必要讲的东西，因为这个东西网上能找到很多资料。但网上的讲法基本上都涉及到“移动(shift)”、“Next函数”等概念，这非常容易产生误解（至少一年半前我看这些资料学习KMP时就没搞清楚）。在这里，我换一种方法来解释KMP算法。<br/> <br/>&nbsp;&nbsp;&nbsp;&nbsp;假如，A=&#34;abababaababacb&#34;，B=&#34;ababacb&#34;，我们来看看KMP是怎么工作的。我们用两个指针i和j分别表示，A[i-j+ 1..i]与B[1..j]完全相等。也就是说，i是不断增加的，随着i的增加j相应地变化，且j满足以A[i]结尾的长度为j的字符串正好匹配B串的前 j个字符（j当然越大越好），现在需要检验A[i+1]和B[j+1]的关系。当A[i+1]=B[j+1]时，i和j各加一；什么时候j=m了，我们就说B是A的子串（B串已经整完了），并且可以根据这时的i值算出匹配的位置。当A[i+1]&lt;&gt;B[j+1]，KMP的策略是调整j的位置（减小j值）使得A[i-j+1..i]与B[1..j]保持匹配且新的B[j+1]恰好与A[i+1]匹配（从而使得i和j能继续增加）。我们看一看当 i=j=5时的情况。<br/> <br/><span style="font-family:宋体">&nbsp;&nbsp;&nbsp;&nbsp;i = 1 2 3 4 <span style="color:#ff0000">5</span> 6 7 8 9 ……<br/>&nbsp;&nbsp;&nbsp;&nbsp;A = a b a b <span style="color:#ff0000">a</span> b a a b a b …<br/>&nbsp;&nbsp;&nbsp;&nbsp;B = a b a b <span style="color:#ff0000">a</span> c b<br/>&nbsp;&nbsp;&nbsp;&nbsp;j = 1 2 3 4 <span style="color:#ff0000">5</span> 6 7</span><br/> <br/>&nbsp;&nbsp;&nbsp;&nbsp;此时，A[6]&lt;&gt;B[6]。这表明，此时j不能等于5了，我们要把j改成比它小的值j&#39;。j&#39;可能是多少呢？仔细想一下，我们发现，j&#39;必须要使得B[1..j]中的头j&#39;个字母和末j&#39;个字母完全相等（这样j变成了j&#39;后才能继续保持i和j的性质）。这个j&#39;当然要越大越好。在这里，B [1..5]=&#34;ababa&#34;，头3个字母和末3个字母都是&#34;aba&#34;。而当新的j为3时，A[6]恰好和B[4]相等。于是，i变成了6，而j则变成了 4：<br/> <br/><span style="font-family:宋体">&nbsp;&nbsp;&nbsp;&nbsp;i = 1 2 3 4 5 <span style="color:#ff0000">6</span> 7 8 9 ……<br/>&nbsp;&nbsp;&nbsp;&nbsp;A = a b a b a <span style="color:#ff0000">b</span> a a b a b …<br/>&nbsp;&nbsp;&nbsp;&nbsp;B =&nbsp;&nbsp;&nbsp;&nbsp; a b a <span style="color:#ff0000">b</span> a c b<br/>&nbsp;&nbsp;&nbsp;&nbsp;j =&nbsp;&nbsp;&nbsp;&nbsp; 1 2 3 <span style="color:#ff0000">4</span> 5 6 7</span><br/> <br/>&nbsp;&nbsp;&nbsp;&nbsp;从上面的这个例子，我们可以看到，新的j可以取多少与i无关，只与B串有关。我们完全可以预处理出这样一个数组P[j]，表示当匹配到B数组的第j个字母而第j+1个字母不能匹配了时，新的j最大是多少。P[j]应该是所有满足B[1..P[j]]=B[j-P[j]+1..j]的最大值。<br/>&nbsp;&nbsp;&nbsp;&nbsp;再后来，A[7]=B[5]，i和j又各增加1。这时，又出现了A[i+1]&lt;&gt;B[j+1]的情况：<br/> <br/><span style="font-family:宋体">&nbsp;&nbsp;&nbsp;&nbsp;i = 1 2 3 4 5 6 <span style="color:#ff0000">7</span> 8 9 ……<br/>&nbsp;&nbsp;&nbsp;&nbsp;A = a b a b a b <span style="color:#ff0000">a</span> a b a b …<br/>&nbsp;&nbsp;&nbsp;&nbsp;B =&nbsp;&nbsp;&nbsp;&nbsp; a b a b <span style="color:#ff0000">a</span> c b<br/>&nbsp;&nbsp;&nbsp;&nbsp;j =&nbsp;&nbsp;&nbsp;&nbsp; 1 2 3 4 <span style="color:#ff0000">5</span> 6 7</span><br/> <br/>&nbsp;&nbsp;&nbsp;&nbsp;由于P[5]=3，因此新的j=3：<br/> <br/><span style="font-family:宋体">&nbsp;&nbsp;&nbsp;&nbsp;i = 1 2 3 4 5 6 <span style="color:#ff0000">7</span> 8 9 ……<br/>&nbsp;&nbsp;&nbsp;&nbsp;A = a b a b a b <span style="color:#ff0000">a</span> a b a b …<br/>&nbsp;&nbsp;&nbsp;&nbsp;B =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a b <span style="color:#ff0000">a</span> b a c b<br/>&nbsp;&nbsp;&nbsp;&nbsp;j =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1 2 <span style="color:#ff0000">3</span> 4 5 6 7</span><br/> <br/>&nbsp;&nbsp;&nbsp;&nbsp;这时，新的j=3仍然不能满足A[i+1]=B[j+1]，此时我们再次减小j值，将j再次更新为P[3]：<br/> <br/><span style="font-family:宋体">&nbsp;&nbsp;&nbsp;&nbsp;i = 1 2 3 4 5 6 <span style="color:#ff0000">7</span> 8 9 ……<br/>&nbsp;&nbsp;&nbsp;&nbsp;A = a b a b a b <span style="color:#ff0000">a</span> a b a b …<br/>&nbsp;&nbsp;&nbsp;&nbsp;B =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#ff0000">a</span> b a b a c b<br/>&nbsp;&nbsp;&nbsp;&nbsp;j =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#ff0000">1</span> 2 3 4 5 6 7</span><br/> <br/>&nbsp;&nbsp;&nbsp;&nbsp;现在，i还是7，j已经变成1了。而此时A[8]居然仍然不等于B[j+1]。这样，j必须减小到P[1]，即0：<br/> <br/><span style="font-family:宋体">&nbsp;&nbsp;&nbsp;&nbsp;i = 1 2 3 4 5 6 <span style="color:#ff0000">7</span> 8 9 ……<br/>&nbsp;&nbsp;&nbsp;&nbsp;A = a b a b a b <span style="color:#ff0000">a</span> a b a b …<br/>&nbsp;&nbsp;&nbsp;&nbsp;B =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a b a b a c b<br/>&nbsp;&nbsp;&nbsp;&nbsp;j =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#ff0000">0</span> 1 2 3 4 5 6 7</span><br/> <br/>&nbsp;&nbsp;&nbsp;&nbsp;终于，A[8]=B[1]，i变为8，j为1。事实上，有可能j到了0仍然不能满足A[i+1]=B[j+1]（比如A[8]=&#34;d&#34;时）。因此，准确的说法是，当j=0了时，我们增加i值但忽略j直到出现A[i]=B[1]为止。<br/>&nbsp;&nbsp;&nbsp;&nbsp;这个过程的代码很短（真的很短），我们在这里给出：<br/> <br/>
[code lang="cpp"]
j:=0;
for i:=1 to n do
begin
   while (j&gt;0) and (B[j+1]&lt;&gt;A[i]) do j:=P[j];
   if B[j+1]=A[i] then j:=j+1;
   if j=m then
   begin
      writeln('Pattern occurs with shift ',i-m);
      j:=P[j];
   end;
end;
[/code]
<br/> <br/>&nbsp;&nbsp;&nbsp;&nbsp;最后的j:=P[j]是为了让程序继续做下去，因为我们有可能找到多处匹配。<br/>&nbsp;&nbsp;&nbsp;&nbsp;这个程序或许比想像中的要简单，因为对于i值的不断增加，代码用的是for循环。因此，这个代码可以这样形象地理解：扫描字符串A，并更新可以匹配到B的什么位置。<br/> <br/>&nbsp;&nbsp;&nbsp;&nbsp;现在，我们还遗留了两个重要的问题：一，为什么这个程序是线性的；二，如何快速预处理P数组。<br/>&nbsp;&nbsp;&nbsp;&nbsp;为什么这个程序是O(n)的？其实，主要的争议在于，while循环使得执行次数出现了不确定因素。我们将用到时间复杂度的摊还分析中的主要策略，简单地说就是通过观察某一个变量或函数值的变化来对零散的、杂乱的、不规则的执行次数进行累计。KMP的时间复杂度分析可谓摊还分析的典型。我们从上述程序的j 值入手。每一次执行while循环都会使j减小（但不能减成负的），而另外的改变j值的地方只有第五行。每次执行了这一行，j都只能加1；因此，整个过程中j最多加了n个1。于是，j最多只有n次减小的机会（j值减小的次数当然不能超过n，因为j永远是非负整数）。这告诉我们，while循环总共最多执行了n次。按照摊还分析的说法，平摊到每次for循环中后，一次for循环的复杂度为O(1)。整个过程显然是O(n)的。这样的分析对于后面P数组预处理的过程同样有效，同样可以得到预处理过程的复杂度为O(m)。<br/>&nbsp;&nbsp;&nbsp;&nbsp;预处理不需要按照P的定义写成O(m^2)甚至O(m^3)的。我们可以通过P[1],P[2],...,P[j-1]的值来获得P[j]的值。对于刚才的B=&#34;ababacb&#34;，假如我们已经求出了P[1],P[2],P[3]和P[4]，看看我们应该怎么求出P[5]和P[6]。P[4]=2，那么P [5]显然等于P[4]+1，因为由P[4]可以知道，B[1,2]已经和B[3,4]相等了，现在又有B[3]=B[5]，所以P[5]可以由P[4] 后面加一个字符得到。P[6]也等于P[5]+1吗？显然不是，因为B[ P[5]+1 ]&lt;&gt;B[6]。那么，我们要考虑“退一步”了。我们考虑P[6]是否有可能由P[5]的情况所包含的子串得到，即是否P[6]=P[ P[5] ]+1。这里想不通的话可以仔细看一下：<br/> <br/><span style="font-family:宋体">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 2 3 4 5 6 7<br/>&nbsp;&nbsp;&nbsp;&nbsp;B = a b a b a c b<br/>&nbsp;&nbsp;&nbsp;&nbsp;P = 0 0 1 2 3 ?</span><br/> <br/>&nbsp;&nbsp;&nbsp;&nbsp;P[5]=3是因为B[1..3]和B[3..5]都是&#34;aba&#34;；而P[3]=1则告诉我们，B[1]、B[3]和B[5]都是&#34;a&#34;。既然P[6]不能由P[5]得到，或许可以由P[3]得到（如果B[2]恰好和B[6]相等的话，P[6]就等于P[3]+1了）。显然，P[6]也不能通过P[3]得到，因为B[2]&lt;&gt;B[6]。事实上，这样一直推到P[1]也不行，最后，我们得到，P[6]=0。<br/>&nbsp;&nbsp;&nbsp;&nbsp;怎么这个预处理过程跟前面的KMP主程序这么像呢？其实，KMP的预处理本身就是一个B串“自我匹配”的过程。它的代码和上面的代码神似：<br/> <br/>
[code lang="pas"]
P[1]:=0;
j:=0;
for i:=2 to m do
begin
   while (j&gt;0) and (B[j+1]&lt;&gt;B[i]) do j:=P[j];
   if B[j+1]=B[i] then j:=j+1;
   P[i]:=j;
end;
[/code]
<br/> <br/>&nbsp;&nbsp;&nbsp;&nbsp;最后补充一点：由于KMP算法只预处理B串，因此这种算法很适合这样的问题：给定一个B串和一群不同的A串，问B是哪些A串的子串。<br/> <br/>&nbsp;&nbsp;&nbsp;&nbsp;串匹配是一个很有研究价值的问题。事实上，我们还有后缀树，自动机等很多方法，这些算法都巧妙地运用了预处理，从而可以在线性的时间里解决字符串的匹配。我们以后来说。<br/> <br/>&nbsp;&nbsp;&nbsp;&nbsp;昨天发现一个特别晕的事，知道怎么去掉BitComet的广告吗？把界面语言设成英文就行了。<br/>&nbsp;&nbsp;&nbsp;&nbsp;还有，金山词霸和Dr.eye都可以去自杀了，Babylon素王道。<br/> <br/>Matrix67原创<br/>转贴请注明出处</p>
[/toggle]

<p>以上内容转载自 Matrix67博客</p>
<p>原文链接：<a href="http://www.matrix67.com/blog/archives/115" title="KMP算法详解|Matrix67博客">http://www.matrix67.com/blog/archives/115</a></p> 

<br/>

<h1>附上我按以上算法写出的C语言代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;cstring&gt;
#include &lt;assert.h&gt;
using namespace std;

int* Build(char Patter[], int n)
{
	assert(n&gt;0);
	int *next = new int[n];
	next[0] = -1;
	int j = -1;
	int i;
	for(i=1; i&lt;n; ++i)
	{
		while(j&gt;-1 &amp;&amp; Patter[j+1] != Patter[i])
			j = next[j];
		if(Patter[j+1] == Patter[i])
			++j;
		next[i] = j;
	}
	return next;
}

int Count(char Text[],char Patter[], int Next[], int m, int n)
{
	assert(n&gt;0 &amp;&amp; m&gt;0);
	if(n==0 || m==0)
		return 0;
	int i;
	int j = -1;
	int ans = 0;
	for(i=0; i&lt;m; ++i)
	{
		while(j&gt;-1 &amp;&amp; Patter[j+1] != Text[i])
			j = Next[j];
		if(Patter[j+1] == Text[i])
			++j;
		if(j+1 == n)
		{
			++ans;
			j = Next[j];
		}
	}
	return ans;
}

void Clear(int *next)
{
	delete [] next;

}

int main()
{
	char Patter[] = &quot;aba&quot;;
	char Text[]   = &quot;aabababaaaaaabab&quot;;
	int* Next = NULL;
	Next = Build(Patter,strlen(Patter));
	cout &lt;&lt; Count(Text,Patter,Next,strlen(Text),strlen(Patter)) &lt;&lt; endl;
	Clear(Next);
	return 0;
}

[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>809</wp:post_id>
		<wp:post_date>2013-05-14 13:06:33</wp:post_date>
		<wp:post_date_gmt>2013-05-14 05:06:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>kmp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="kmp"><![CDATA[KMP]]></category>
		<category domain="post_tag" nicename="%e5%ad%97%e7%ac%a6%e4%b8%b2"><![CDATA[字符串]]></category>
		<category domain="post_tag" nicename="%e6%a8%a1%e5%bc%8f%e5%8c%b9%e9%85%8d"><![CDATA[模式匹配]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869157]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e5%85%b3%e4%ba%8ekmp%e7%ae%97%e6%b3%95]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>123</wp:comment_id>
			<wp:comment_author><![CDATA[Aem]]></wp:comment_author>
			<wp:comment_author_email>aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url>http://t.qq.com/yxx3372</wp:comment_author_url>
			<wp:comment_author_IP>218.64.59.174</wp:comment_author_IP>
			<wp:comment_date>2013-05-26 18:05:10</wp:comment_date>
			<wp:comment_date_gmt>2013-05-26 10:05:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[谢谢支持]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_parent_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869231]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>duoshuo_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[1180457673812869232]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>学习资源--麻省理工公开课：线性代数</title>
		<link>http://www.aemiot.com/stures-mit-xxds.html</link>
		<pubDate>Tue, 28 May 2013 02:58:39 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=832</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>讲师介绍</h1>
讲师：Gilbert Strang
职业：麻省理工学院教授

<h1>课程介绍</h1>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;“线性代数”，同微积分一样，是高等数学中两大入门课程之一，不仅是一门非常好的数学课程，也是一门非常好的工具学科，在很多领域都有广泛的用途。本课程讲述了矩阵理论及线性代数的基本知识，侧重于那些与其他学科相关的内容，包括方程组、向量空间、行列式、特征值、相似矩阵及正定矩阵。</p>

<h1>推荐理由</h1>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于有意向进攻计算机图形学的人来说，线性代数是必须掌握的，整个虚拟现实的构建都离不开它。当然，它的身影还出现在网络拓扑学之类（拓扑学在各大研究领域都很重要）。</p>

<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于如此重要的课程，国内高校对线性代数的教学，大多数停留在计算层次，这就使得我们记下了很多枯燥的概念和公式，却忽略了线性代数的灵魂--线性关系。而&nbsp;Gilbert&nbsp;Strang教授的授课方式则不同，它不再要求你记住各种公式，而是引导你在脑海中建立一种线性关系造成的图形，从而让你体会到线性代数之美。所以，在这里向大家推荐&nbsp;Gilbert&nbsp;Strang教授的公开课，我相信看完它，你会体会到线性代数的奇妙之处。</p>

<h1>课程链接</h1>
<a href="http://v.163.com/special/opencourse/daishu.html" title="http://v.163.com/special/opencourse/daishu.html">http://v.163.com/special/opencourse/daishu.html</a>

<h1>课程列表</h1>
[toggle]
<p>[第1集] 方程组的几何解释</p>
<p>[第2集] 乘法和逆矩阵</p>
<p>[第3集] 矩阵消元     </p>
<p>[第4集] A的LU分解     </p>
<p>[第5集] 转置-置换-向量空间R </p>    
<p>[第6集] 列空间和零空间     </p>
<p>[第7集] 求解Ax=0：主变量、特解  </p>   
<p>[第8集] 求解Ax=b：可解性和解的结构    </p> 
<p>[第9集] 线性相关性、基、维数     </p>
<p>[第10集] 四个基本子空间     </p>
<p>[第11集] 矩阵空间、秩1矩阵和小世界图</p>     
<p>[第12集] 图和网络     </p>
<p>[第13集] 复习一     </p>
<p>[第14集] 正交向量与子空间</p>     
<p>[第15集] 子空间投影     </p>
<p>[第16集] 投影矩阵和最小二乘 </p>    
<p>[第17集] 正交矩阵和Gram-Schmidt正交化     </p>
<p>[第18集] 行列式及其性质     </p>
<p>[第19集] 行列式公式和代数余子式     </p>
<p>[第20集] 克拉默法则、逆矩阵、体积 </p>    
<p>[第21集] 特征值和特征向量     </p>
<p>[第22集] 对角化和A的幂     </p>
<p>[第23集] 微分方程和exp(At)     </p>
<p>[第24集] 马尔可夫矩阵;.傅立叶级数 </p>    
<p>[第25集] 复习二     </p>
<p>[第26集] 对称矩阵及正定性     </p>
<p>[第27集] 复数矩阵和快速傅里叶变换 </p>    
<p>[第28集] 正定矩阵和最小值     </p>
<p>[第29集] 相似矩阵和若尔当形 </p>    
<p>[第30集] 奇异值分解     </p>
<p>[第31集] 线性变换及对应矩阵     </p>
<p>[第32集] 基变换和图像压缩     </p>
<p>[第33集] 单元检测3复习   </p>  
<p>[第34集] 左右逆和伪逆</p>     
<p>[第35集] 期末复习   </p>
[/toggle]

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>832</wp:post_id>
		<wp:post_date>2013-05-28 10:58:39</wp:post_date>
		<wp:post_date_gmt>2013-05-28 02:58:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>stures-mit-xxds</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="mit"><![CDATA[MIT]]></category>
		<category domain="post_tag" nicename="%e5%85%ac%e5%bc%80%e8%af%be"><![CDATA[公开课]]></category>
		<category domain="post_tag" nicename="%e7%ba%bf%e6%80%a7%e4%bb%a3%e6%95%b0"><![CDATA[线性代数]]></category>
		<category domain="category" nicename="shape"><![CDATA[资源分享]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e5%ad%a6%e4%b9%a0%e8%b5%84%e6%ba%90-%e9%ba%bb%e7%9c%81%e7%90%86%e5%b7%a5%e5%85%ac%e5%bc%80%e8%af%be%ef%bc%9a%e7%ba%bf%e6%80%a7%e4%bb%a3%e6%95%b0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869158]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>好书分享《C++ Primer 中文版(第4版）》&#124;一本久负盛名的C++经典教程</title>
		<link>http://www.aemiot.com/fx-cplusplusprimer.html</link>
		<pubDate>Thu, 30 May 2013 14:27:39 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=846</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.aemiot.com/wp-content/uploads/2013/05/primer.jpg"><img src="http://www.aemiot.com/wp-content/uploads/2013/05/primer.jpg" alt="primer" width="494" height="607" class="aligncenter size-full wp-image-847" /></a>

<h1>简介</h1>
<p>本书是久负盛名的C++经典教程，其内容是C++大师Stanley B. Lippman丰富的实践经验和C++标准委员会原负责人Josée Lajoie对C++标准深入理解的完美结合，已经帮助全球无数程序员学会了C++。</p>
<p>书中不但新增大量教学辅助内容，用于强调重要的知识点，提醒常见的错误，推荐优秀的编程实践，给出使用提示，还包含大量来自实战的示例和习题。
对C++基本概念和技术全面而且权威的阐述，对现代C++编程风格的强调，使本书成为C++初学者的最佳指南；对于中高级程序员，本书也是不可或缺的参考书。</p>
<p>Ps：第4版不再强调低层编程技术，而把中心转向标准库的使用。书中很早就开始介绍标准库，示例也已经重新改写，充分利用了标准库设施。我们也对语言主题叙述的先后次序进行了重新编排，使讲解更加流畅。</p>

<h1>阅读建议</h1>
<p>对于缺乏编程经验的新手来说，可能难以理解编程范式和面向对象，这种情况你可以选择硬着头皮对全书进行一遍快速阅读（当然，也别走马观花，那是没用的）帮助你理解一些概念，然后第二遍在仔细看，并且完成后面的习题。我相信，当你把书中的内容都理解后，你对C++领悟能得到质的改变。</p>

<h1>目录</h1>
[toggle]
第1章　快速入门
1.1 编写简单的C++程序
1.2 初窥输入/输出
1.3 关于注释
1.4 控制结构 入
1.5 类的简介
1.6 C++程序
小结
术语
第一部分 基本语言
第2章　变量和基本类型
2.1 基本内置类型
2.2 字面值常量
2.3 变量
2.4 const限定符
2.5 引用
2.6 typedef名字
2.7 枚举
2.8 类类型
2.9 编写自己的头文件
小结
术语
第3章　标准库类型
3.1 命名空间的using声明
3.2 标准库string类型
3.3 标准库vector类型
3.4 迭代器简介
3.5 标准库bitset类型
小结
术语
第4章　数组和指针
4.1 数组
4.2 指针的引入
4.3 C风格字符串
4.4 多维数组
小结
术语
第5章　表达式
5.1 算术操作符
5.2 关系操作符和逻辑操作符
5.3 位操作符
5.4 赋值操作符
5.5 自增和自减操作符
5.6 箭头操作符
5.7 条件操作符
5.8 sizeof操作符 　　
5.9 逗号操作符
5.10 复合表达式的求值
5.11 new和delete表达式
5.12 类型转换
小结
术语
第6章　语句
6.1 简单语句
6.2 声明语句
6.3 复合语句（块）
6.4 语句作用域
6.5 if语句
6.6 switch语句
6.7 while语句
6.8 for循环语句
6.9 do while语句
6.10 break语句
6.11 continue语句
6.12 goto语句
6.13 try块和异常处理
6.14 使用预处理器进行调试
小结
术语
第7章　函数
7.1 函数的定义
7.2 参数传递
7.3 return语句
7.4 函数声明
7.5 局部对象
7.6 内联函数
7.7 类的成员函数
7.8 重载函数
7.9 指向函数的指针
小结
术语
第8章　标准IO库
8.1 面向对象的标准库
8.2 条件状态
8.3 输出缓冲区的管理
8.4 文件的输入和输出
8.5 字符串流
小结
术语
第二部分 容器和算法
第9章　顺序容器
第10章　关联容器
第11章　泛型算法
第三部分 类和数据抽象
第12章　类
第13章　复制控制
第14章　重载操作符与转换
第四部分 面向对象编程与泛型编程
第15章　面向对象编程
第16章　模板与泛型编程
第五部分 高级主题
第17章　用于大型程序的工具
第18章　特殊工具与技术
附录　标准库
索引
[/toggle]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>846</wp:post_id>
		<wp:post_date>2013-05-30 22:27:39</wp:post_date>
		<wp:post_date_gmt>2013-05-30 14:27:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fx-cplusplusprimer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[c]]></category>
		<category domain="post_tag" nicename="primer"><![CDATA[primer]]></category>
		<category domain="post_tag" nicename="%e7%bc%96%e7%a8%8b%e4%b9%a6%e7%b1%8d"><![CDATA[编程书籍]]></category>
		<category domain="category" nicename="shape"><![CDATA[资源分享]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869159]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>线段树介绍｜六一大礼包</title>
		<link>http://www.aemiot.com/xds-6-1.html</link>
		<pubDate>Fri, 31 May 2013 17:20:45 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=851</guid>
		<description></description>
		<content:encoded><![CDATA[线段树适合解决N次成段更新的问题。例如，给你N条不超过K的线段，然后有M次询问，每次询问要求你回答一个点出现了几次。当给你的线段是[2,5] [4,6] [0,7] 时，依次问你2出现了多少次？4出现了多少次？7出现了多少次？你应该要给出的答案是 2， 3， 1。

一个很容易想到的算法就是建立一个N*2的数组，读入每个线段的首尾值记录在数组中，每次询问遍历整个数组逐个判断得出结果。
不可否认这是一种解决办法，但是在大数据面前，它显得非常不合理。（数据量的不同决定了算法，在不考虑输入数据的情况下，讨论算法的优劣是没有意义的。）

上面的算法每次询问需要遍历整个数组，因此时间复杂度是O（M*N），空间复杂度是O（N*2）。

另一个很容易想到的算法就是开拓一个很大的数组，读入一个线段的首尾值后，将线段范围内的点都更新。那么询问的时候，每次询问的时候直接读取下标就可以了。

这种算法的复杂度取决于出现的线段最长值K和线段多少的N，时间复杂度是O（K*N），空间复杂度是O（K）。

可以说第一种算法适用于线段数目不多，查询也不多的情况，第二种算法适用于线段的最大长度很小，线段数量不多，但是询问次数非常多的情况。

可以说这两种方法对数据都有种严格的要求。一个较为折中的考虑就是采用线段树来存储数据。基于线段树的算法将会带给你 O（（M+N）*logK）的时间复杂度，代价只是空间复杂度的上升（现在机器内存都已经很大了，在这种问题上时间显得比空间重要）。

首先我们来看看线段的树的基本结构

[code lang="c"]
struct Node{
int left,right;
int val;
Node *lefttree,*righttree;
}
[/code]

除了树的基本结构之外，主要是多了一个左端点值和一个右端点值。

例如，最大长度为7 的线段树，如图所述:

<a href="http://www.aemiot.com/wp-content/uploads/2013/06/xds-1.gif"><img class="size-full wp-image-858 alignnone" alt="xds-1" src="http://www.aemiot.com/wp-content/uploads/2013/06/xds-1.gif" width="400" height="318" /></a>

不难发现，任何一条长度不超过7的线段都可以分割为若干条线段放入树中。（因为我们查找时只关心点，所以线段可以分割。）
因为是二叉树，因此空间复杂度是O（K*2）。

依次向其中加入 [2,5] [4,6] [0,7] 三条线段，线段树结点值的变化：

<a href="http://www.aemiot.com/wp-content/uploads/2013/06/xds-2.gif"><img class="size-full wp-image-859 alignnone" alt="xds-2" src="http://www.aemiot.com/wp-content/uploads/2013/06/xds-2.gif" width="400" height="318" /></a>
<p style="text-align: left;"><strong>                                                   加入[2,5]</strong></p>
<a href="http://www.aemiot.com/wp-content/uploads/2013/06/xds-3.gif"><img class="size-full wp-image-860 alignnone" alt="xds-3" src="http://www.aemiot.com/wp-content/uploads/2013/06/xds-3.gif" width="400" height="318" /></a>
<p style="text-align: left;"><strong>                                                   加入[4,6]</strong></p>
<a href="http://www.aemiot.com/wp-content/uploads/2013/06/xds-4.gif"><img class="size-full wp-image-861 alignnone" alt="xds-4" src="http://www.aemiot.com/wp-content/uploads/2013/06/xds-4.gif" width="400" height="318" /></a>
<p style="text-align: left;"><strong>                                                  加入[0,7]</strong></p>

<p>可以看出，[2,5]被分割为 [2,3]和[4,5]存入了树中,[4,6]被分割为 [4,5]和[6-6]存入了树中,[0-7]直接存入了树中。</p>

<p>因为这种储存方式，使得它在加入一个线段的平均时间复杂度为O（logK）。并且当我们要查询某个点的时候，我们只需要沿着二叉树的某条路径从树的顶部走向底部，将沿途的值都加起来即可。例如，查询端点5，首先在树根[0,7]获得了1，向右走,在[4,7]没有获得，再向左走，在[4,5]获得了2，向右走，在[5,5]没有获得，因此得出结果为 1+2 = 3。正因为它是从树根走向叶子节点所以它的时间复杂度也是O（logK）。因此线段树总体的时间复杂度是O（（M+N）*logK）。</p>

<p>这就使得它在空间足够的时候，对大数据的处理，也是高效的。但是对于小数据，而K又特别大的时候，建树的过程非常耗时，这就很不划算了。因此，是否采用线段树，要看数据的情况。</p>

<h1>线段树样例代码</h1>
[code lang="c"]
#include &lt;stdio.h&gt;
#include &lt;malloc.h&gt;
typedef struct Node{
    int left,right;
    int mid; /*这个只是为了减少重复计算*/
    int val;
    Node *lefttree,*righttree;
}Node,*PNode;

PNode build(PNode pnode,int left,int right)
{
    if(pnode == NULL)
    {
        pnode = (PNode) malloc(sizeof(Node));
        pnode-&gt;left = left;
        pnode-&gt;right= right;
        pnode-&gt;mid  = left+((right - left)/2 + 1);
        pnode-&gt;val  = 0;
        pnode-&gt;lefttree = NULL;
        pnode-&gt;righttree= NULL;
    }
    if(left != right)
    {
        pnode-&gt;lefttree = build(pnode-&gt;lefttree,left,pnode-&gt;mid-1);
        pnode-&gt;righttree= build(pnode-&gt;righttree,pnode-&gt;mid,right);
    }
    return pnode;
}

void add(PNode pnode,int left,int right)
{
    if(left==pnode-&gt;left &amp;&amp; right==pnode-&gt;right)
    {
        ++pnode-&gt;val;
        return ;
    }
    if(left &lt; pnode-&gt;mid)
    {
        add(pnode-&gt;lefttree,left,(right&gt;pnode-&gt;mid-1)?pnode-&gt;mid-1:right);
    }
    if(right &gt;= pnode-&gt;mid)
    {
        add(pnode-&gt;righttree,(left&lt;pnode-&gt;mid)?pnode-&gt;mid:left,right);
    }
}

int search(PNode pnode,int val)
{
    int res = pnode-&gt;val;
    if(val &lt; pnode-&gt;mid &amp;&amp; pnode-&gt;lefttree != NULL)
        res += search(pnode-&gt;lefttree,val);
    if(val &gt;= pnode-&gt;mid &amp;&amp; pnode-&gt;righttree != NULL)
        res += search(pnode-&gt;righttree,val);
    return res;
}

/*用于调试的操作*/
#define MAX 100
PNode buf[MAX];
int first=0, last=0;

void push(PNode x)
{
    if(last &lt;= MAX)
        buf[last++] = x;
    else
        printf(&quot;Quere rangle error!&quot;);
}

PNode pop()
{
    if(first &lt; last)
        return buf[first++];
    else
        printf(&quot;Quere rangle error!&quot;);
    return NULL;
}

int buf_size()
{
    return last-first;
}

void print(PNode pnode)
{
    PNode now;
    push(pnode);
    while(buf_size())
    {
        now = pop();
        printf(&quot;%d - %d\t%d\n&quot;,now-&gt;left,now-&gt;right,now-&gt;val);
        if(now-&gt;lefttree != NULL)
            push(now-&gt;lefttree);
        if(now-&gt;righttree != NULL)
            push(now-&gt;righttree);
    }
    printf(&quot;\n&quot;);
}
/*用于调试的操作--END*/

int main()
{
    PNode root = NULL;
    root = build(root,0,7);
    add(root,2,5);
    add(root,4,6);
    add(root,0,7);
    print(root);
    int t;
    while(scanf(&quot;%d&quot;,&amp;t)==1)
        printf(&quot;%d\n&quot;,search(root,t));
}

[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>851</wp:post_id>
		<wp:post_date>2013-06-01 01:20:45</wp:post_date>
		<wp:post_date_gmt>2013-05-31 17:20:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xds-6-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e7%ba%bf%e6%ae%b5%e6%a0%91"><![CDATA[线段树]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869160]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>直流电路分析2B法的程序设计解决方案</title>
		<link>http://www.aemiot.com/dcap-2b-sub.html</link>
		<pubDate>Sat, 08 Jun 2013 17:49:32 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=887</guid>
		<description></description>
		<content:encoded><![CDATA[直流电路分析中较为普通的一种方法是2B法，这种方法在手工计算上非常麻烦，而且不易编程求解。而回路电流法和结点电压法在手工计算和编程实现上都更为简单（这两种方法在电路分析软件上已经使用）。但是这并不影响我们探究使用2B法编程，因为2B法反映的是一个非常普通的拓扑学运用。

<p>  </p>

<h1>什么是2B法</h1>
例如求下列电路图的各元器件电流电压值

<a href="http://www.aemiot.com/wp-content/uploads/2013/06/dcap-sample.jpg"><img class="aligncenter size-full wp-image-888" alt="dcap-sample" src="http://www.aemiot.com/wp-content/uploads/2013/06/dcap-sample.jpg" width="578" height="310" /></a>

这个电路图有b=5条支路和n=4个节点

列出n-1 = 3个KCL（基尔霍夫电流方程）
<strong>{ -I1 -I5 -I3 = 0
{ +I1 +I2     = 0
{ +I5 -I4     = 0</strong>

列出b-(n-1) = 2个KVL（基尔霍夫电压方程）
<strong>{ -U1 +U2 +U3 = 0
{ -U3 +U4 +U5 = 0</strong>

列出b = 5个CRL（元器件电压电流方程）
<strong>{ U1 = 5
{ U2 = I2 * 1
{ U3 = I3 * 1
{ U4 = I4 * 2
{ U5 = 10</strong>

联立上述方程解得
<strong>I1 =  -1      U1 =   5
I2 =   1      U2 =   1
I3 =   4      U3 =   4
I4 =  -3      U4 =  -6
I5 =  -3      U4 =  -6</strong>

<p>  </p>

<h1>编程实现的要点</h1>
1.电路图信息的储存形式及涉及的概念

2.根据电路信息列出KCL方程

3.根据电路信息列出KVL方程，这也是处理过程中比较耗时的部分（电路分析之所以大量使用结点电压法是因为结点电压法的KVL方程是0个，而且存在很好的矩阵运算来简化计算时间复杂度）

4.根据电路信息列出CRL方程

5.解方程

<p>  </p>

<h1>电路图信息的储存形式及涉及的概念</h1>
首先要用一张拓扑信息表储存读取到的最原始数据，表中的每一个部分实际上可以定义为如下结构体：

[code lang="c"]
struct Data{
char cls[3];   /*元器件符号*/
int   no,      /*元器件编号*/
      beg,     /*起始结点*/
      end;     /*终止结点*/
      /*起始结点到终止结点的方向为假定的正方向*/
float val,     /*元器件属性值*/
      other;   /*保留信息*/
};
[/code]

计算中可能需要的几种储存形式:
关联矩阵形式、回路矩阵形式
（临接矩阵在描述多重图时存在效率上的瓶颈）

其他概念：
生成树、哈密顿回路、连枝

<p>  </p>

<h1>根据电路信息列出KCL方程</h1>
利用电路拓扑信息可以直接填充一个关联矩阵，不难发现关联矩阵的每一行就是一个KCL的系数方程。以上述电路图为例，我们可以得到如下关联矩阵：
I1     I2     I3   I4    I5
-1      0     -1     0    -1
1      1      0     0     0
0     -1      1     1     0
0      0      0    -1     1

不难发现关联矩阵的每一行都是一个KCL方程且它们任意n-1个方程都是线性无关的，那么我们从中任选n-1个方程即可。

<p>  </p>

<h1>根据电路信息列出KVL方程</h1>
首先认识下回路矩阵。回路矩阵的每一行都是一个回路的记录，如果一条边是当前要记录的回路的一部分，则为1或-1（这取决于方向），否则为0

例如，图中电路对应的回路矩阵应为

V1   V2   V3   V4   V5
-1      1      1     0     0
0      0     -1     1     1
-1      1      0     1     1

同理，这个回路矩阵的每一行都是一个KVL方程，任意b-（n-1）个方程都是线性无关的，我们只需要其中的任意b-（n-1）个方程。因为完全构造这个矩阵较为复杂，所以我们只构造我们所需要的b-（n-1）行即可。

构造的过程，基于这样一种性质，一个多重图可以生成一些树，任取其中一颗生成树和它对应的余树，在生成树中加入任意一条连枝（余树中的边称为连枝）都可以构成唯一回路。

因此构建回路矩阵的任务又化为了寻找生成树和余树。

就上述电路图，其中的一颗生成树和它的余数如下图所示：

<a href="http://www.aemiot.com/wp-content/uploads/2013/06/dcap-shu.jpg"><img class="aligncenter size-full wp-image-927" alt="dcap-shu" src="http://www.aemiot.com/wp-content/uploads/2013/06/dcap-shu.jpg" width="578" height="310" /></a>
<p style="text-align: center;"><strong>生成树</strong></p>
<a href="http://www.aemiot.com/wp-content/uploads/2013/06/dcap-yushu.jpg"><img class="aligncenter size-full wp-image-928" alt="dcap-yushu" src="http://www.aemiot.com/wp-content/uploads/2013/06/dcap-yushu.jpg" width="578" height="310" /></a>
<p style="text-align: center;"><strong>它的余树</strong></p>

假设我们得到了这样的一棵树以及它的余树，我们从余数中选择一条连枝加入到树中，想要判断它形成的环，我们需要在树的最基本结构中增加一个指向父节点的指针和一个表示当前层数的整数。这样我们在寻找它形成的环时，只要在树中找到加入的连枝的两个端点，然后一直向上返回，直到两个点汇合，期间经过的路径加上连枝本身就是一个环。

即树的一个结点可如下定义：

[code lang="c"]
struct Node{
    Node*  p;     /*指向父节点*/
    int    now;   /*当前层数*/
    int    no;    /*结点编号*/
    Node** next;  /*指向子结点列表*/
};
[/code]

由于这种方法，需要K叉建树，耗时还不讨好。事实上我们只要在生成树的时候加以一定条件限制，就可以得到一个特殊的树，它非常适合这里的计算。而这条特殊的树其实就是哈密顿通路，毕竟一条链也是一棵树，而且这样的树具备了线性关系。因为它具备线性关系，所以我们也可以称呼它为线性表，正因如此，这就引发了添加连枝后，线性表中在这个两个端点之间的边加上连枝本身构成一个回路。

以之前的电路图为例，可以构造一个这样的特殊树以及它的余树：

<a href="http://www.aemiot.com/wp-content/uploads/2013/06/dcap-tshu.jpg"><img src="http://www.aemiot.com/wp-content/uploads/2013/06/dcap-tshu.jpg" alt="dcap-tshu" width="578" height="310" class="aligncenter size-full wp-image-932" /></a>

<a href="http://www.aemiot.com/wp-content/uploads/2013/06/dcap-tyushu.jpg"><img src="http://www.aemiot.com/wp-content/uploads/2013/06/dcap-tyushu.jpg" alt="dcap-tyushu" width="578" height="310" class="aligncenter size-full wp-image-933" /></a>

假如从余树中选择0-2的连枝加入树中，则它与树中0-2部分构成了一个环。

利用这点，我们就能够轻易的编程实现它。

<p>  </p>

<h1>根据电路信息列出CRL方程</h1>
每个元件的属性，其实以及在拓扑信息存在了，所以我们也可以直接根据拓扑信息填充它。

<p>  </p>

<h1>解方程</h1>
解保证有解的n元非齐次方程组，我们能够想到的两种在笔算上较为常用的方法，一种是利用克莱姆法则的方法，另一种是利用增广矩阵消元的方法。
第一种涉及到行列式的计算，可以通过产生全排列，根据行列式的定义来求解，时空复杂度均较高。
第二种其实在编程算法上称作高斯消元法，虽然它不是当前最好的解方程算法，但是在这里足够用了，因此我选择的是利用高斯消元法解决的方程求解。

既然所有步骤都已经分析过了，那么编程也就是可行的了。赞一个，神奇的编程，思考的乐趣~~
如有算法上的改进，欢迎交流。

<p>  </p>

依据上述解决方案得到的简易DCAP分析软件：<a href="http://www.aemiot.com/simple-dcap.html" title="简易电路辅助分析软件|DCAP">http://www.aemiot.com/simple-dcap.html</a>

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>887</wp:post_id>
		<wp:post_date>2013-06-09 01:49:32</wp:post_date>
		<wp:post_date_gmt>2013-06-08 17:49:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dcap-2b-sub</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dcap"><![CDATA[DCAP]]></category>
		<category domain="post_tag" nicename="%e7%94%b5%e8%b7%af"><![CDATA[电路]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[888]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869162]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>计算机图形学&#124;初涉分形--谢宾斯基(Sierpinski)分形三角形</title>
		<link>http://www.aemiot.com/sierpinski-1.html</link>
		<pubDate>Wed, 26 Jun 2013 13:09:47 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=943</guid>
		<description></description>
		<content:encoded><![CDATA[大自然一切都是随机的，但是很多事物又反应了它自身的规律。
在学习分形的过程中，再一次见到了这种随机中的规律，一切都那么的美妙。

谢宾斯基(Sierpinski)分形三角形,这里使用画点构图的方法。

按照其生成算法：
1.在一个平面里，取三个点ABC，组成一个三角形 
2.在这个三角形附近，任选一点T作为第一个点 
3.在ABC三点中任意选一个点P，画出P与上一个点Q的中点，并画出
4.达到迭代次数退出，否则回第3步 

这样一个充满随机的取点方式下（只规定了中点这一个是明确的取点方式），按理来说应该是一个无限混乱的图案，但是事实却不是这样的。

使用编程技术实现，得到以下图案

迭代次数极少时
<a href="http://www.aemiot.com/wp-content/uploads/2013/06/Sierpinski-dot-1.png"><img src="http://www.aemiot.com/wp-content/uploads/2013/06/Sierpinski-dot-1.png" alt="Sierpinski-dot-1" width="808" height="634" class="aligncenter size-full wp-image-946" /></a>

迭代次数增多时
<a href="http://www.aemiot.com/wp-content/uploads/2013/06/Sierpinski-dot-2.png"><img src="http://www.aemiot.com/wp-content/uploads/2013/06/Sierpinski-dot-2.png" alt="Sierpinski-dot-2" width="808" height="634" class="aligncenter size-full wp-image-947" /></a>

迭代次数极大时
<a href="http://www.aemiot.com/wp-content/uploads/2013/06/Sierpinski-dot-3.png"><img src="http://www.aemiot.com/wp-content/uploads/2013/06/Sierpinski-dot-3.png" alt="Sierpinski-dot-3" width="808" height="634" class="aligncenter size-full wp-image-949" /></a>


<h1>基于OpenGL的实现代码</h1>
[code lang="cpp"]
#include&quot;stdafx.h&quot;
#include&lt;cstdlib&gt;
#include&lt;cmath&gt;
#include&lt;ctime&gt;
#include&lt;gl/glut.h&gt;

#define MY_INIT_RAND() (srand((unsigned int)time(NULL)))
#define MY_RANDOM(A) (rand()%A)

typedef struct
{
	GLint x,
		  y;
}GLintPoint;

void myInit(void)
{
	glClearColor(1.0,1.0,1.0,0.0);
	glColor3f(0.0f,0.0f,0.0f);
	glPointSize(4.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0,640.0,0.0,480.0);
}

void drawDot(GLint x,GLint y)
{
	glBegin(GL_POINTS);
		glVertex2i(x,y);
	glEnd();
}

void sierpinski_render(void)
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	GLintPoint T[3] = {(0,0),(640,480),(480,640)};
	MY_INIT_RAND();
	int index = MY_RANDOM(3);
	GLintPoint point = T[index];
	drawDot(point.x,point.y);
	for(int i=0; i&lt;150000; i++)
	{
		index = MY_RANDOM(3);
		point.x = (point.x + T[index].x) / 2;
		point.y = (point.y + T[index].y) / 2;
		drawDot(point.x,point.y);
	}
	glutSwapBuffers(); 
}

int _tmain(int argc, _TCHAR* argv[])
{
	glutInit(&amp;argc, (char**) argv);
	glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowPosition(100,100);
	glutInitWindowSize(800,600);
	glutCreateWindow(&quot;Hello OpenGL&quot;);
	myInit();
	glutDisplayFunc(sierpinski_render);
	glutMainLoop();
	return 0;
}
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>943</wp:post_id>
		<wp:post_date>2013-06-26 21:09:47</wp:post_date>
		<wp:post_date_gmt>2013-06-26 13:09:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sierpinski-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="sierpinski"><![CDATA[Sierpinski]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e5%bd%a2%e4%b8%89%e8%a7%92%e5%bd%a2"><![CDATA[分形三角形]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e8%b0%a2%e5%ae%be%e6%96%af%e5%9f%ba"><![CDATA[谢宾斯基]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869163]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>解读代码--三角形坐标系&#124;HDU-Problem-4092&#124;2011 Asia Shanghai Regional Contest</title>
		<link>http://www.aemiot.com/hdu-problem-4092.html</link>
		<pubDate>Tue, 09 Jul 2013 12:15:49 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=972</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目    Yummy Triangular Pizza</h1>
题目地址：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4092" title="http://acm.hdu.edu.cn/showproblem.php?pid=4092">http://acm.hdu.edu.cn/showproblem.php?pid=4092</a>
<h1>解题思路</h1>
暴力搜索，打表
比较有意思的地方就是，选择不同的方式表示三角形，在搜索的时候效率差异很大。
<h1>将要解读的代码（重点解析三角形坐标系）</h1>
ps:摘自他人（来源网络），这题之所以摘录他人代码，因为他的这种记录三角形方式非常值得我们学习（比我的渣渣方式好很多）

[code lang="cpp"]
#include &lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;set&gt;
#include&lt;algorithm&gt;
using namespace std;
#define checkn 16
struct tria
{
    short x,y,z;//三角形三条线，每条线一个值
    tria() {}
    tria(short _x,short _y,short _z)
    {
        x=_x;
        y=_y;
        z=_z;
    }
    tria add(short d)//3个方向添加时添加的三角形
    {
        short mov=(x+y+z==0?1:-1);
        if(d==0)
        {
            return tria(x,y+mov,z+mov);
        }
        else if(d==1)
        {
            return tria(x+mov,y,z+mov);
        }
        else
        {
            return tria(x+mov,y+mov,z);
        }
    }

    void rotate()//120度，线变换
    {
        int tmp=x;
        x=y;
        y=z;
        z=tmp;
    }
    void updown()//180度，上下三角形变换
    {
        x=-x+1,y=-y+1,z=-z;
    }

    void mov(short mx,short my,short mz)
    {
        x=x+mx,y=y+my,z=z+mz;
    }
};
bool operator==(const tria &amp;a,const tria &amp;b)
{
    return a.x==b.x&amp;&amp;a.y==b.y&amp;&amp;a.z==b.z;
}
bool operator&lt;(const tria &amp;a,const tria &amp;b)
{
    if(a.x!=b.x)return a.x&lt;b.x;
    else if(a.y!=b.y)return a.y&lt;b.y;
    else return a.z&lt;b.z;
}
#define maxn 16

struct hashnode
{
    short h[16];
    short hn;
};
bool operator&lt;(const hashnode &amp;a,const hashnode &amp;b)
{
    if(a.hn!=b.hn)return a.hn&lt;b.hn;
    for(int i=0;i&lt;a.hn;i++)
    {
        if(a.h[i]&lt;b.h[i])
            return true;
        else if(a.h[i]&gt;b.h[i])
            return false;
    }
    return false;
}

struct pizza
{
    tria arr[maxn];
    short an;
    pizza()
    {
        an=0;
    }

    bool add(const tria &amp;t)
    {
        for(short i=0; i&lt;an; i++)
        {
            if(arr[i]==t)//已经添加过该三角形
            {
                return false;
            }
        }
        arr[an++]=t;
        return true;
    }

    void remove()
    {
        an--;
    }
    hashnode Hash()
    {
        hashnode ret;
        ret.hn=an;
        for(short i=0;i&lt;an;i++)
        {
            ret.h[i]=arr[i].x+8;
            ret.h[i]&lt;&lt;=4;
            ret.h[i]+=arr[i].y+8;
            ret.h[i]&lt;&lt;=4;
            ret.h[i]+=arr[i].z+8;
        }
        return ret;
    }
};


bool operator&lt;(const pizza &amp;a,const pizza &amp;b)
{
    if(a.an!=b.an)return a.an&lt;b.an;
    for(short i=0; i&lt;a.an; i++)
    {
        if(a.arr[i]&lt;b.arr[i])
        {
            return true;
        }
        else if(b.arr[i]&lt;a.arr[i])
        {
            return false;
        }
    }
    return false;
}
int ans[maxn+9]= {0};

set&lt;hashnode&gt; sp;

bool canFind(pizza p)
{
    for(short i=0; i&lt;3; i++)
    {
        sort(p.arr,p.arr+p.an);
        if(sp.find(p.Hash())!=sp.end())
            return true;

        for(short j=0; j&lt;p.an; j++)
        {
            p.arr[j].rotate();
        }
    }
    return false;
}

bool Find(pizza tmp)
{
    for(short i=0; i&lt;tmp.an; i++)
    {
        short x=tmp.arr[i].x,y=tmp.arr[i].y,z=tmp.arr[i].z;
        if(x+y+z==0)
        {
            pizza t2=tmp;

            for(short j=0; j&lt;t2.an; j++)
            {
                t2.arr[j].mov(-x,-y,-z);
            }

            if(canFind(t2))
                return true;

        }
        else
        {
            pizza t2=tmp;
            for(short j=0; j&lt;t2.an; j++)
            {
                t2.arr[j].updown();
                t2.arr[j].mov(x-1,y-1,z);
            }

            if(canFind(t2))
                return true;
        }

    }
    return false;
}
void Insert(pizza p)
{
    sort(p.arr,p.arr+p.an);
    sp.insert(p.Hash());
    for(short i=0;i&lt;p.an;i++)
    {
        p.arr[i].rotate();
    }
    sort(p.arr,p.arr+p.an);
    sp.insert(p.Hash());
    for(short i=0;i&lt;p.an;i++)
    {
        p.arr[i].rotate();
    }
    sort(p.arr,p.arr+p.an);
    sp.insert(p.Hash());
}
void dfs(pizza p)
{
    if(p.an==checkn+1)return ;
    if(Find(p))
    {
        return;
    }
    ans[p.an]++;
    Insert(p);

    for(short i=0; i&lt;p.an; i++)
    {
        for(short j=0; j&lt;3; j++)
        {
            tria t=p.arr[i].add(j);
            if(p.add(t))
            {
                dfs(p);
                p.remove();
            }
        }
    }
}
int ans2[maxn+10]={0,1,1,1,4,6,19,43,120,307,866,
                   2336,6588,18373,52119,147700,422016};
int main()
{
    pizza p;
    p.add(tria(0,0,0));
    dfs(p);
    cout&lt;&lt;&quot;{&quot;;
    for(int i=0; i&lt;=maxn; i++)
    {
        cout&lt;&lt;ans[i]&lt;&lt;',';
    }
    cout&lt;&lt;&quot;};&quot;&lt;&lt;endl;
    return 0;
/*
    int t;
    cin&gt;&gt;t;
    for(int ti=1;ti&lt;=t;ti++)
    {
        int n;
        cin&gt;&gt;n;
        cout&lt;&lt;&quot;Case #&quot;&lt;&lt;ti&lt;&lt;&quot;: &quot;;
        cout&lt;&lt;ans2[n]&lt;&lt;endl;
    }*/
}

[/code]
<h1>代码解析</h1>
<p>刚入手这段代码的时候，因为备注少，愣是没看懂这代码= =
后来慢慢品味，倒也看出些名堂来，于是就拿出来分享了。
首先看他的三角形类（这种结构便于旋转x60度）：
short x,y,z;//三角形三条线，每条线一个值
既然每条线一个值，我们就要建立起一个坐标系，我们大概可以想到的是如图所示的情况：

<a href="http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-1.bmp"><img class="size-full wp-image-985 aligncenter alignnone" alt="hdu-4092-1" src="http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-1.bmp" /></a>
当然就这一点，很难认识到这个坐标系的全貌以及巧妙</p>
接下来看类的这个成员函数----tria add(short d);
在这个成员函数中，mov = (x+y+z==0?1:-1); 这句是最难理解的作用，但是它的作用，其实只要动手画一画就可以知道，如下组图：

<a href="http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-2.bmp"><img src="http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-2.bmp" alt="hdu-4092-2" class="aligncenter size-full wp-image-992" /></a>

<a href="http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-3.bmp"><img src="http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-3.bmp" alt="hdu-4092-3" class="aligncenter size-full wp-image-993" /></a>

<a href="http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-4.bmp"><img src="http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-4.bmp" alt="hdu-4092-4" class="aligncenter size-full wp-image-994" /></a>

最后发现三种线的走势如下图：

<a href="http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-5.bmp"><img src="http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-5.bmp" alt="hdu-4092-5" class="aligncenter size-full wp-image-996" /></a>

可见mov = (x+y+z==0?1:-1);的强大....说实在我不知道这是什么数学性质，只是暂时记住这种用法了（如果数学高手看明白了，望留言告诉我）。

接下来看看在这种坐标系下如何旋转：

<a href="http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-6.bmp"><img src="http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-6.bmp" alt="hdu-4092-6" class="aligncenter size-full wp-image-1000" /></a>

void rotate()//120度，线变换；

<a href="http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-7.bmp"><img src="http://www.aemiot.com/wp-content/uploads/2013/07/hdu-4092-7.bmp" alt="hdu-4092-7" class="aligncenter size-full wp-image-1001" /></a>

void updown()//180度，上下三角形变换
这里可以看到，-x+1的反函数是它自身，-z的反函数也是它自身，这样的数学性质也正好体现两次180度旋转会原地不动的现象。

三角形的x60度的旋转都可以通过上述两种旋转合成得到，因此，使用这种坐标系是非常好的。

接下来的一系列操作时ACMer很熟悉的通过hash进行状态压缩，然后通过搜索获取所有可能，计算结果，输出为数组格式，打表。这里就不详细解释了，重点是介绍下发现的这种三角形坐标系。~

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>972</wp:post_id>
		<wp:post_date>2013-07-09 20:15:49</wp:post_date>
		<wp:post_date_gmt>2013-07-09 12:15:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hdu-problem-4092</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="2011"><![CDATA[2011]]></category>
		<category domain="post_tag" nicename="4092"><![CDATA[4092]]></category>
		<category domain="post_tag" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="post_tag" nicename="hdu"><![CDATA[hdu]]></category>
		<category domain="post_tag" nicename="shanghai"><![CDATA[Shanghai]]></category>
		<category domain="post_tag" nicename="%e5%8c%ba%e5%9f%9f%e8%b5%9b"><![CDATA[区域赛]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869164]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>状态压缩下的BFS&#124;HDU-Problem-1429</title>
		<link>http://www.aemiot.com/hdu-problem-1429.html</link>
		<pubDate>Wed, 10 Jul 2013 10:25:57 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1011</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1429" title="http://acm.hdu.edu.cn/showproblem.php?pid=1429">胜利大逃亡(续)</a>

<h1>题目描述</h1>
Ignatius再次被魔王抓走了(搞不懂他咋这么讨魔王喜欢)……

这次魔王汲取了上次的教训，把Ignatius关在一个n*m的地牢里，并在地牢的某些地方安装了带锁的门，钥匙藏在地牢另外的某些地方。刚开始Ignatius被关在(sx,sy)的位置，离开地牢的门在(ex,ey)的位置。Ignatius每分钟只能从一个坐标走到相邻四个坐标中的其中一个。魔王每t分钟回地牢视察一次，若发现Ignatius不在原位置便把他拎回去。经过若干次的尝试，Ignatius已画出整个地牢的地图。现在请你帮他计算能否再次成功逃亡。只要在魔王下次视察之前走到出口就算离开地牢，如果魔王回来的时候刚好走到出口或还未到出口都算逃亡失败。
 
<h1>Input</h1>
每组测试数据的第一行有三个整数n,m,t(2<=n,m<=20,t>0)。接下来的n行m列为地牢的地图，其中包括:

. 代表路
* 代表墙
@ 代表Ignatius的起始位置
^ 代表地牢的出口
A-J 代表带锁的门,对应的钥匙分别为a-j
a-j 代表钥匙，对应的门分别为A-J

每组测试数据之间有一个空行。
 
<h1>Output</h1>
针对每组测试数据，如果可以成功逃亡，请输出需要多少分钟才能离开，如果不能则输出-1。
 
<h1>Sample Input</h1>
4 5 17
@A.B.
a*.*.
*..*^
c..b*

4 5 16
@A.B.
a*.*.
*..*^
c..b*
 
<h1>Sample Output</h1>
16
-1
 
<h1>出题人</h1>
LL
 
<h1>解题思路</h1>
因为要找小于t的步数的结果，所以很容易想到BFS，但是t值可能很大，不判重的话，很容易爆内存，所以引入哈希表来完成判重，这里的重复并不是简单的坐标，而是坐标加上钥匙，因为钥匙数量不多，可以用位压缩，将钥匙使用一个short int存放，使用它的低10位，因此一共至多有20*20*1024种结点，之后添加结点前先判重就可以通过BFS顺利AC。

<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;queue&gt;
#include &lt;deque&gt;
using namespace std;

class Data
{
public:
	Data():x(0),y(0),key(0) {}
	Data(int x,int y):x(x),y(y),key(0) {}
	~Data() {}
	
	/* data */
	unsigned short key; /*a-j的钥匙*/
	unsigned char x,y;      /*坐标*/
	unsigned short vaule;
};

/*状态压缩*/
bool hash[25][25][2500];
/*xy拓展方向*/
int index[][2] = {{0,-1},{0,1},{-1,0},{1,0}};

int main(int argc, char const *argv[])
{
	int n,m,t;
	char arr[25][25];
	queue&lt;Data&gt; DataBase;
	Data now;
	int vaule = 0;
	int i,j,z;
	while(cin &gt;&gt; n &gt;&gt; m &gt;&gt; t)
	{
		vaule = 0;
		/*清空hash表*/
		for(i = 0; i &lt; 25; ++i)
			for(j = 0; j &lt; 25; ++j)
				for(z = 0; z &lt; 1050; ++z)
					hash[i][j][z] = false;
		/*清空数据库*/
		while(!DataBase.empty()) DataBase.pop();
		/*读入数据*/
		for (i = 0; i &lt; n; ++i)
		{
			for (j = 0; j &lt; m; ++j)
			{
				Data temp;
				cin &gt;&gt; arr[i][j];
				if(arr[i][j]=='@')
				{
					temp.x = i;
					temp.y = j;
					temp.vaule = 0;
					hash[temp.x][temp.y][temp.key] = true; 
					DataBase.push(temp);
				}
			}
		}
		while(vaule &lt;= t)
		{
			if(DataBase.empty())
			{
				cout &lt;&lt; -1 &lt;&lt; endl;
				break;
			}
			now = DataBase.front();
			DataBase.pop();
			vaule = now.vaule;
			if(now.vaule == t)
			{
				cout &lt;&lt; -1 &lt;&lt; endl;
				break;
			}
			/*添加接下来可以走的地方*/
			for(z=0; z&lt;4; ++z)
			{
				char next =
					arr[now.x+index[z][0]][now.y+index[z][1]];
				if(now.y+index[z][1]&gt;=0 
					&amp;&amp; now.y+index[z][1]&lt; m
					&amp;&amp;now.x+index[z][0]&gt;=0 
					&amp;&amp; now.x+index[z][0]&lt; n	
					&amp;&amp; next != '*')
				{
					if(next&gt;='A' &amp;&amp; next&lt;='J')
					{
						if(now.key &amp; (1&lt;&lt;(next-'A')) ) /*有钥匙*/
						{
							Data temp(now);
							temp.x = now.x+index[z][0];
							temp.y = now.y+index[z][1];
							temp.vaule = now.vaule + 1;
							if(next&gt;='a' &amp;&amp; next&lt;='j')/*捡到钥匙*/
								temp.key |= (1 &lt;&lt; (next-'a'));    
							if(!hash[temp.x][temp.y][temp.key])
							{
								hash[temp.x][temp.y][temp.key]=1;
								DataBase.push(temp);
							}
						}
					}
					else
					{
						Data temp(now);
						temp.x = now.x+index[z][0];
						temp.y = now.y+index[z][1];
						temp.vaule = now.vaule + 1;
						if(next&gt;='a' &amp;&amp; next&lt;='j')/*捡到钥匙*/
							temp.key |= (1 &lt;&lt; (next-'a'));    
						if(!hash[temp.x][temp.y][temp.key])
						{
							hash[temp.x][temp.y][temp.key]=1;
							DataBase.push(temp);
						}
					}
				}
			}
			/*判断是否为出口*/
			if(arr[now.x][now.y] == '^')
			{
				cout &lt;&lt; now.vaule &lt;&lt; endl;
				break;
			}
		}
	}
	return 0;
}
[/code]

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1011</wp:post_id>
		<wp:post_date>2013-07-10 18:25:57</wp:post_date>
		<wp:post_date_gmt>2013-07-10 10:25:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hdu-problem-1429</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="post_tag" nicename="bfs"><![CDATA[BFS]]></category>
		<category domain="post_tag" nicename="hdu-problem-1429"><![CDATA[HDU-Problem-1429]]></category>
		<category domain="post_tag" nicename="%e7%8a%b6%e6%80%81%e5%8e%8b%e7%bc%a9"><![CDATA[状态压缩]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869165]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e7%8a%b6%e6%80%81%e5%8e%8b%e7%bc%a9%e4%b8%8b%e7%9a%84bfshdu-problem-1429]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DP解法&#124;吉哥系列故事——临时工计划&#124;Problem - 4502</title>
		<link>http://www.aemiot.com/hdu-problem-4502.html</link>
		<pubDate>Thu, 08 Aug 2013 03:28:25 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1025</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4502" title="http://acm.hdu.edu.cn/showproblem.php?pid=4502">吉哥系列故事——临时工计划</a>

<h1>题目描述</h1>
　　俗话说一分钱难倒英雄汉，高中几年下来，吉哥已经深深明白了这个道理，因此，新年开始存储一年的个人资金已经成了习惯，不过自从大学之后他不好意思再向大人要压岁钱了，只能把唯一的希望放到自己身上。可是由于时间段的特殊性和自己能力的因素，只能找到些零零碎碎的工作，吉哥想知道怎么安排自己的假期才能获得最多的工资。
　　已知吉哥一共有m天的假期，每天的编号从1到m，一共有n份可以做的工作，每份工作都知道起始时间s，终止时间e和对应的工资c，每份工作的起始和终止时间以天为单位(即天数编号)，每份工作必须从起始时间做到终止时间才能得到总工资c，且不能存在时间重叠的工作。比如，第1天起始第2天结束的工作不能和第2天起始，第4天结束的工作一起被选定，因为第2天吉哥只能在一个地方工作。
　　现在，吉哥想知道怎么安排才能在假期的m天内获得最大的工资数（第m+1天吉哥必须返回学校，m天以后起始或终止的工作是不能完成的）。
 
<h1>Input</h1>
第一行是数据的组数T；每组数据的第一行是2个正整数：假期时间m和可做的工作数n；接下来n行分别有3个正整数描述对应的n个工作的起始时间s，终止时间e，总工资c。

[数据范围]
1 <= T <= 1000
9 < m <= 100
0 < n <= 1000
s <= 100, e <= 100, s <= e
c <= 10000
 
<h1>Output</h1>
对于每组数据，输出吉哥可获得的最高工资数。
 
<h1>Sample Input</h1>
1
10 5
1 5 100
3 10 10
5 10 100
1 4 2
6 12 266
 
<h1>Sample Output</h1>
102

<h1>解题思路</h1>
状态转移方程
MAX[Time] = { MAX[Time-1],for_each(MAX[ list[Time][k].begin-1 ]+list[Time][k].cost) }
某一天能获得的最大收入，要么是前一天的最大收入，要么是在这一天结束的某个任务获得的收入加上这个任务开始前获得的最大收入

<h1>我的代码</h1>
[code lang="c"]
#include &lt;stdio.h&gt;
#define SMAX 1005
#define EMAX 1005

/*risk对象拥有开始时间，和结束时能获得的收入*/
struct risk{
    int begin,cost;
};

struct risk list[SMAX][EMAX];
int list_count[SMAX];
/*list[i] 是在第i天完成的一个任务组*/
/*list_count[i] 是在第i天结束的任务数量*/

int DP_MAX[SMAX];

int check(int s,int e,int c,int m)
{
    if(e&gt;m) return 0; /*不能及时返回学校*/
    return 1;
}

void clear(void)
{
    int i;
    for(i=0; i&lt;SMAX; ++i) 
        list_count[i] = 0;
}

int main(void)
{
    int T,m,n,s,e,c;
    int i,j;
    struct risk temp;
    scanf(&quot;%d&quot;,&amp;T);
    while(T--)
    {
        clear();
        scanf(&quot;%d%d&quot;,&amp;m,&amp;n);
        /*读入数据，并预处理*/
        for(i=0; i&lt;n; ++i)
        {
            scanf(&quot;%d%d%d&quot;,&amp;s,&amp;e,&amp;c);
            if(check(s,e,c,m))
            {
                temp.begin = s; temp.cost = c;
                list[e][list_count[e]++] = temp;
            }
        }
        DP_MAX[0] = 0; /*没有时间，当然没有收入*/
        for(i=1; i&lt;=m; ++i)/*假期时间*/
        {
            DP_MAX[i] = DP_MAX[i-1];
            for(j=0; j&lt;list_count[i]; ++j)
            {
                int now_cost = 
                    DP_MAX[ list[i][j].begin - 1 ] + list[i][j].cost;
                if( now_cost &gt; DP_MAX[i])
                    DP_MAX[i] = now_cost;
            }
        }
            printf(&quot;%d\n&quot;,DP_MAX[m]);
    }
    return 0;
}
[/code]

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1025</wp:post_id>
		<wp:post_date>2013-08-08 11:28:25</wp:post_date>
		<wp:post_date_gmt>2013-08-08 03:28:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hdu-problem-4502</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="4502"><![CDATA[4502]]></category>
		<category domain="post_tag" nicename="dp"><![CDATA[DP]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869166]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>依然DP&#124;威威猫系列故事——打地鼠&#124;HDU-Problem-4540</title>
		<link>http://www.aemiot.com/hdu-problem4540.html</link>
		<pubDate>Thu, 15 Aug 2013 01:59:45 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1039</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4540" title="http://acm.hdu.edu.cn/showproblem.php?pid=4540">威威猫系列故事——打地鼠</a>

<h1>题目描述</h1>
威威猫最近不务正业，每天沉迷于游戏“打地鼠”。
每当朋友们劝他别太着迷游戏，应该好好工作的时候，他总是说，我是威威猫，猫打老鼠就是我的工作！
无话可说...
我们知道，打地鼠是一款经典小游戏，规则很简单：每隔一个时间段就会从地下冒出一只或多只地鼠，玩游戏的人要做的就是打地鼠。
假设：
1、每一个时刻我们只能打一只地鼠，并且打完以后该时刻出现的所有地鼠都会立刻消失；
2、老鼠出现的位置在一条直线上，如果上一个时刻我们在x1位置打地鼠，下一个时刻我们在x2位置打地鼠，那么，此时我们消耗的能量为abs( x1 - x2 )；
3、打第一只地鼠无能量消耗。
现在，我们知道每个时刻所有冒出地面的地鼠位置，若在每个时刻都要打到一只地鼠，请计算最小需要消耗多少能量。

<h1>Input</h1>
输入数据包含多组测试用例；
每组数据的第一行是2个正整数N和K（1 <= N <= 20, 1 <= K <= 10 )，表示有N个时刻，每个时刻有K只地鼠冒出地面；
接下来的N行，每行表示一个时刻K只地鼠出现的坐标（坐标均为正整数，且<=500）。
 
<h1>Output</h1>
请计算并输出最小需要消耗的能量，每组数据输出一行。
 
<h1>Sample Input</h1>
2 2
1 10
4 9
3 5
1 2 3 4 5
2 4 6 8 10
3 6 9 12 15
 
<h1>Sample Output</h1>
1
1

<h1>解题思路</h1>
状态转移方程
DP[i][k] = min{for_each->x(DP[x][k-1])}
第k次选择打第i个位置所需最小能量是第k-1次打某个位置中的值加上这次所需能量得到的

<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cmath&gt;

using namespace std;
int DP[510][30];
int t[510];
// DP[i][k] = min{for_each-&gt;x(DP[x][k-1])}
int main()
{
    int m,n;
    int i,j,w;
    while(cin &gt;&gt;m &gt;&gt; n)
    {
        for(i=0; i&lt;510; ++i)
            for(j=0; j&lt;30; ++j)
                DP[i][j] = 100000000;//拒绝标志
        for(i = 1; i&lt;=n; i++)//读入一行
        {
            int x;
            cin &gt;&gt;x;
            DP[x][0] = 0;
        }
        for(w=1; w&lt;m; ++w)
        {
            int x;
            for(i=1; i&lt;=n; i++)
            {
                cin &gt;&gt;x;
                DP[x][w] = DP[1][w-1]+ fabs(x-1);
                // DP[i][k] = min{for_each-&gt;x(DP[x][k-1])}
                for(j=2; j&lt;510; ++j)
                {
                    if(DP[j][w-1]+ fabs(x-j)&lt;DP[x][w])
                        DP[x][w] = DP[j][w-1]+ fabs(x-j);
                }
            }
        }
        int min = 100000000;
        for(i=1; i&lt;510; ++i)
            if(DP[i][m-1]&lt;min) min = DP[i][m-1];
        cout &lt;&lt; min &lt;&lt; endl;
    }
    return 0;
}
[/code]

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1039</wp:post_id>
		<wp:post_date>2013-08-15 09:59:45</wp:post_date>
		<wp:post_date_gmt>2013-08-15 01:59:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hdu-problem4540</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="post_tag" nicename="dp"><![CDATA[DP]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869167]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>一个测试的Unity3D-Web项目</title>
		<link>http://www.aemiot.com/unity3d-130824-01.html</link>
		<pubDate>Sat, 24 Aug 2013 06:31:09 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1044</guid>
		<description></description>
		<content:encoded><![CDATA[<br><iframe src="http://www.aemiot.com/U3D-Web/test/test.html" width="338" height="258" scrolling="no" frameborder="0"></iframe><br>
 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1044</wp:post_id>
		<wp:post_date>2013-08-24 14:31:09</wp:post_date>
		<wp:post_date_gmt>2013-08-24 06:31:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unity3d-130824-01</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="unity3d"><![CDATA[Unity3D]]></category>
		<category domain="post_tag" nicename="web"><![CDATA[Web]]></category>
		<category domain="category" nicename="gamepro"><![CDATA[游戏开发]]></category>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869168]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e4%b8%80%e4%b8%aa%e6%b5%8b%e8%af%95%e7%9a%84unity3d-web%e9%a1%b9%e7%9b%ae]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>好书分享《算法竞赛入门经典》&#124;编程竞赛入门必备</title>
		<link>http://www.aemiot.com/acm-lrj-01.html</link>
		<pubDate>Mon, 09 Sep 2013 04:46:33 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1058</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.aemiot.com/wp-content/uploads/2013/09/ACM-LRJ-1.jpg"><img src="http://www.aemiot.com/wp-content/uploads/2013/09/ACM-LRJ-1.jpg" alt="ACM-LRJ-1" width="419" height="575" class="aligncenter size-full wp-image-1062" /></a>

<h1>简介</h1>
<p>《算法竞赛入门经典》是一本算法竞赛的入门教材，把C/C++语言、算法和解题有机地结合在了一起，淡化理论，注重学习方法和实践技巧。全书内容分为11章，包括程序设计入门、循环结构程序设计、数组和字符串、函数和递归、基础题目选解、数据结构基础、暴力求解法、高效算法设计、动态规划初步、数学概念与方法、图论模型与算法，覆盖了算法竞赛入门所需的主要知识点，并附有大量习题。书中的代码规范、简洁、易懂，不仅能帮助读者理解算法原理，还能教会读者很多实用的编程技巧。另外，书中包含的各种开发、测试和调试技巧也是在传统的语言、算法类书籍中难以见到的。
《算法竞赛入门经典》可作为全国青少年信息学奥林匹克联赛（NOIP）的复赛教材及ACM国际竞赛教程。</p>

<h1>目录</h1>
[toggle]
第1部分 语言篇

第1章 程序设计入门1

第2章 循环结构程序设计16

第3章 数组和字符串33

第4章 函数和递归51

第2部分 算法篇

第5章 基础题目选解69

第6章 数据结构基础89

第7章 暴力求解法114

第8章 高效算法设计138

第3部分 竞赛篇

第9章 动态规划初步158

第10章 数学概念与方法176

第11章 图论模型与算法196

附录
[/toggle]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1058</wp:post_id>
		<wp:post_date>2013-09-09 12:46:33</wp:post_date>
		<wp:post_date_gmt>2013-09-09 04:46:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>acm-lrj-01</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%a5%bd%e4%b9%a6"><![CDATA[好书]]></category>
		<category domain="post_tag" nicename="%e7%ab%9e%e8%b5%9b"><![CDATA[竞赛]]></category>
		<category domain="post_tag" nicename="%e7%ae%97%e6%b3%95"><![CDATA[算法]]></category>
		<category domain="post_tag" nicename="%e7%bc%96%e7%a8%8b"><![CDATA[编程]]></category>
		<category domain="category" nicename="shape"><![CDATA[资源分享]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869169]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>水题-输入输出练习&#124;A Computer Graphics Problem&#124;HDU-4716</title>
		<link>http://www.aemiot.com/hdu-problem-4716.html</link>
		<pubDate>Wed, 25 Sep 2013 02:32:21 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1067</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
<a title="http://acm.hdu.edu.cn/showproblem.php?pid=4716" href="http://acm.hdu.edu.cn/showproblem.php?pid=4716">A Computer Graphics Problem</a>
<h1>题目描述</h1>
In this problem we talk about the study of Computer Graphics. Of course, this is very, very hard.
We have designed a new mobile phone, your task is to write a interface to display battery powers.
Here we use '.' as empty grids.
When the battery is empty, the interface will look like this:
<pre>*------------*
|............|
|............|
|............|
|............|
|............|
|............|
|............|
|............|
|............|
|............|
*------------*</pre>
When the battery is 60% full, the interface will look like this:
<pre>*------------*
|............|
|............|
|............|
|............|
|------------|
|------------|
|------------|
|------------|
|------------|
|------------|
*------------*</pre>
Each line there are 14 characters.
Given the battery power the mobile phone left, say x%, your task is to output the corresponding interface. Here x will always be a multiple of 10, and never exceeds 100.
<h1>Input</h1>
The first line has a number T (T &lt; 10) , indicating the number of test cases.
For each test case there is a single line with a number x. (0 &lt; x &lt; 100, x is a multiple of 10)
<h1>Output</h1>
For test case X, output "Case #X:" at the first line. Then output the corresponding interface.
See sample output for more details.
<h1>Sample Input</h1>
2
0
60
<h1>Sample Output</h1>
Case #1:
<pre>*------------*
|............|
|............|
|............|
|............|
|............|
|............|
|............|
|............|
|............|
|............|
*------------*</pre>
Case #2:
<pre>*------------*
|............|
|............|
|............|
|............|
|------------|
|------------|
|------------|
|------------|
|------------|
|------------|
*------------*</pre>
<h1>解题思路</h1>
<h1>我的代码</h1>
[code lang="c"]
#include&lt;stdio.h&gt;
int main()
{
	int T,t,k,i;
	scanf(&quot;%d&quot;,&amp;T);
	for(i=1; i&lt;=T; ++i)
	{
		scanf(&quot;%d&quot;,&amp;t);
		printf(&quot;Case #%d:\n&quot;,i);
		printf(&quot;*------------*\n&quot;);
		for(k=0; k&lt;10-t/10; ++k)
			printf(&quot;|............|\n&quot;);
		for(k=0; k&lt;t/10; ++k)
			printf(&quot;|------------|\n&quot;);
		printf(&quot;*------------*\n&quot;);
	}
	return 0;
}
[/code]

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1067</wp:post_id>
		<wp:post_date>2013-09-25 10:32:21</wp:post_date>
		<wp:post_date_gmt>2013-09-25 02:32:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hdu-problem-4716</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="4716"><![CDATA[4716]]></category>
		<category domain="post_tag" nicename="%e6%b0%b4%e9%a2%98"><![CDATA[水题]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e8%be%93%e5%85%a5%e8%be%93%e5%87%ba"><![CDATA[输入输出]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869170]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e6%b0%b4%e9%a2%98-%e8%be%93%e5%85%a5%e8%be%93%e5%87%ba%e7%bb%83%e4%b9%a0a-computer-graphics-problemhdu-4716]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>直接BFS&#124;Pet&#124;HDU-4707</title>
		<link>http://www.aemiot.com/hdu-problem-4707.html</link>
		<pubDate>Wed, 25 Sep 2013 02:40:22 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1073</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
<a title="http://acm.hdu.edu.cn/showproblem.php?pid=4707" href="http://acm.hdu.edu.cn/showproblem.php?pid=4707">Pet</a>
<h1>题目描述</h1>
One day, Lin Ji wake up in the morning and found that his pethamster escaped. He searched in the room but didn’t find the hamster. He tried to use some cheese to trap the hamster. He put the cheese trap in his room and waited for three days. Nothing but cockroaches was caught. He got the map of the school and foundthat there is no cyclic path and every location in the school can be reached from his room. The trap’s manual mention that the pet will always come back if it still in somewhere nearer than distance D. Your task is to help Lin Ji to find out how many possible locations the hamster may found given the map of the school. Assume that the hamster is still hiding in somewhere in the school and distance between each adjacent locations is always one distance unit.
<h1>Input</h1>
The input contains multiple test cases. Thefirst line is a positive integer T (0&lt;T&lt;=10), the number of test cases. For each test cases, the first line has two positive integer N (0&lt;N&lt;=100000) and D(0&lt;D&lt;N), separated by a single space. N is the number of locations in the school and D is the affective distance of the trap. The following N-1lines descripts the map, each has two integer x and y(0&lt;=x,y&lt;N), separated by a single space, meaning that x and y is adjacent in the map. Lin Ji’s room is always at location 0.
<h1>Output</h1>
For each test case, outputin a single line the number of possible locations in the school the hamster may be found.
<h1>Sample Input</h1>
1
10 2
0 1
0 2
0 3
1 4
1 5
2 6
3 7
4 8
6 9
<h1>Sample Output</h1>
2
<h1>解题思路</h1>
一次BFS直接把那些距离在D内的找出来，用总数减一下就可以了
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;queue&gt;

using namespace std;

vector&lt;int&gt; arr[100010];

int dep[100010];

int bfs(int D)
{
    int nowData,next;
    int count = 1;
    dep[0] = 0;
    queue&lt;int&gt; DataBase;
    DataBase.push(0);
    while(!DataBase.empty())
    {
        nowData = DataBase.front();
        DataBase.pop();
        while(!arr[nowData].empty())
        {
            next = arr[nowData].back();
            dep[next] = dep[nowData] + 1;
            if(dep[next] &lt;= D)
            {
                ++count;
                DataBase.push(next);
            }
            arr[nowData].pop_back();
        }
    }
    return count;
}

int main()
{
    int T,N,D,t1,t2;
    cin &gt;&gt; T;
    while(T--)
    {
        cin &gt;&gt; N &gt;&gt; D;
        for(int i = 0;i &lt; N; i++)
	arr[i].clear();
        for(int i=0; i&lt;N-1; ++i)
        {
            cin &gt;&gt; t1 &gt;&gt; t2;
            arr[t1].push_back(t2);
        }
        cout &lt;&lt; N-bfs(D) &lt;&lt; endl;
    }
    return 0;
}
[/code]



[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1073</wp:post_id>
		<wp:post_date>2013-09-25 10:40:22</wp:post_date>
		<wp:post_date_gmt>2013-09-25 02:40:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hdu-problem-4707</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="4707"><![CDATA[4707]]></category>
		<category domain="post_tag" nicename="bfs"><![CDATA[BFS]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869171]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>小小的做了张海报</title>
		<link>http://www.aemiot.com/acm-haibao-1.html</link>
		<pubDate>Wed, 25 Sep 2013 02:45:46 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1075</guid>
		<description></description>
		<content:encoded><![CDATA[因为准备宣传ACM就制作了这张海报。
用途是宣传ACM，主题是思维无极限，动手改变世界
于是酷爱水墨风的我就整出来一张这样的。

<a href="http://www.aemiot.com/wp-content/uploads/2013/09/acm-haibao-1.jpg"><img class="aligncenter size-full wp-image-1076" alt="acm-haibao-1" src="http://www.aemiot.com/wp-content/uploads/2013/09/acm-haibao-1.jpg" width="555" height="767" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1075</wp:post_id>
		<wp:post_date>2013-09-25 10:45:46</wp:post_date>
		<wp:post_date_gmt>2013-09-25 02:45:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>acm-haibao-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="post_tag" nicename="%e6%b5%b7%e6%8a%a5"><![CDATA[海报]]></category>
		<category domain="category" nicename="mgzl"><![CDATA[美工之路]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869172]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1076]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Stone&#124;2013-ACM-ICPC长春赛区网选-1006&#124;HDU-4764</title>
		<link>http://www.aemiot.com/hdu-problem-4764.html</link>
		<pubDate>Sat, 28 Sep 2013 11:19:12 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1089</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
Stone

<h1>时空限制</h1>
Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)

<h1>题目描述</h1>
Tang and Jiang are good friends. To decide whose treat it is for dinner, they are playing a game. Specifically, Tang and Jiang will alternatively write numbers (integers) on a white board. Tang writes first, then Jiang, then again Tang, etc... Moreover, assuming that the number written in the previous round is X, the next person who plays should write a number Y such that 1 <= Y - X <= k. The person who writes a number no smaller than N first will lose the game. Note that in the first round, Tang can write a number only within range [1, k] (both inclusive). You can assume that Tang and Jiang will always be playing optimally, as they are both very smart students.

<h1>Input</h1>
There are multiple test cases. For each test case, there will be one line of input having two integers N (0 < N <= 10^8) and k (0 < k <= 100). Input terminates when both N and k are zero.

<h1>Output</h1>
For each case, print the winner's name in a single line.

<h1>Sample Input</h1>
1 1
30 3
10 2
0 0

<h1>Sample Output</h1>
Jiang
Tang
Jiang

<h1>Source</h1>
2013 ACM/ICPC Asia Regional Changchun Online  

<h1>Recommend</h1>
liuyiding

<h1>解题思路</h1>
这就是典型的线性棋游戏问题，采用逆推的思想可以轻易破解。首先数到N以及大于N的数是输的，因为两人都很聪明，所以当一人数到N-1时，那么另一人必然会输，我们称这个位置为必胜位；继续向前推，如果有人走到N-1-1至N-1-K范围内，另外一人必然会走到N-1，而自己必然会输，我们称这个位置为必输位...例如N=10，K=2时，（Y表示必胜位，N表示必输位）
<pre>
0  1  2  3  4  5  6  7  8  9  10  11
Y  N  N  Y  N  N  Y  N  N  Y  N   N  
</pre>
可以发现，0位置就是后报数的人的最终状态，因为这里是必胜位，而后报数的是Jiang，因此最终是Jiang获胜了。而必胜必输位是一个周期为K+1的循环，因此我们可以使用取模运算快速获取后报数人的结局。

<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
using namespace std;

//起始位置的输赢属性，这点是后手人的结局状态
bool check(int n,int k)
{
	return (n%(k+1) == 1);
}

int main()
{
	int N,K;
	while(cin &gt;&gt; N &gt;&gt; K, N)
	{
		if(check(N,K))
		{
			cout &lt;&lt; &quot;Jiang&quot; &lt;&lt; endl;
		}
		else
		{
			cout &lt;&lt; &quot;Tang&quot; &lt;&lt; endl;
		}
	}
	return 0;
}
[/code]

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1089</wp:post_id>
		<wp:post_date>2013-09-28 19:19:12</wp:post_date>
		<wp:post_date_gmt>2013-09-28 11:19:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hdu-problem-4764</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="1006"><![CDATA[1006]]></category>
		<category domain="post_tag" nicename="2013"><![CDATA[2013]]></category>
		<category domain="post_tag" nicename="4764"><![CDATA[4764]]></category>
		<category domain="post_tag" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e7%bd%91%e7%bb%9c%e9%80%89%e6%8b%94%e8%b5%9b"><![CDATA[网络选拔赛]]></category>
		<category domain="post_tag" nicename="%e9%95%bf%e6%98%a5"><![CDATA[长春]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869173]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hashmat the brave warrior&#124;算法竞赛入门习题&#124;UVaOJ-10055</title>
		<link>http://www.aemiot.com/uvaoj-10055.html</link>
		<pubDate>Tue, 22 Oct 2013 04:43:33 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1099</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=94&page=show_problem&problem=996" title="Hashmat the brave warrior"><a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=94&page=show_problem&problem=996" title="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=94&page=show_problem&problem=996">Hashmat the brave warrior</a>
</a>

<h1>时空限制</h1>
Time limit: 3.000 seconds

<h1>题目描述</h1>
Hashmat is a brave warrior who with his group of young soldiers moves from one place to another to fight against his opponents. Before fighting he just calculates one thing, the difference between his soldier number and the opponent's soldier number. From this difference he decides whether to fight or not. Hashmat's soldier number is never greater than his opponent.

<h1>Input</h1>
The input contains two integer numbers in every line. These two numbers in each line denotes the number of soldiers in Hashmat's army and his opponent's army or vice versa. The input numbers are not greater than 2^32. Input is terminated by End of File.

<h1>Output</h1>
For each line of input, print the difference of number of soldiers between Hashmat's army and his opponent's army. Each output should be in seperate line.

<h1>Sample Input</h1>
10 12
10 14
100 200
 
<h1>Sample Output</h1>
2
4
100

<h1>Soure</h1>
UVaOJ - Shahriar Manzoor

<h1>解题思路</h1>
无（Ps：数据很强的一道水题）

<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
using namespace std;
int main()
{
    long long a,b;
    while(cin &gt;&gt; a &gt;&gt; b)
        cout &lt;&lt; (long)(b-a &gt; 0? b-a : a-b) &lt;&lt; endl;
    return 0;
}

[/code]


[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1099</wp:post_id>
		<wp:post_date>2013-10-22 12:43:33</wp:post_date>
		<wp:post_date_gmt>2013-10-22 04:43:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>uvaoj-10055</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="10055"><![CDATA[10055]]></category>
		<category domain="post_tag" nicename="uvaoj"><![CDATA[UVaOJ]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e7%ae%97%e6%b3%95%e7%ab%9e%e8%b5%9b%e5%85%a5%e9%97%a8%e4%b9%a0%e9%a2%98"><![CDATA[算法竞赛入门习题]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869174]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Back to High School Physics&#124;算法竞赛入门习题&#124;UVaOJ-10071</title>
		<link>http://www.aemiot.com/uvaoj-10071.html</link>
		<pubDate>Tue, 22 Oct 2013 05:52:59 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1106</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=1012" title="Back to High School Physics"></a>

<h1>时空限制</h1>
Time limit: 3.000 seconds

<h1>题目描述</h1>
A particle has initial velocity and constant acceleration. If its velocity after certain time is v then what will its displacement be in twice of that time?

<h1>Input</h1>
The input will contain two integers in each line. Each line makes one set of input. These two integers denote the value of v (-100 <= v <= 100) and t(0<=t<= 200) ( t means at the time the particle gains that velocity) 

<h1>Output</h1>
For each line of input print a single integer in one line denoting the displacement in double of that time.

<h1>Sample Input</h1>
0 0
5 12

<h1>Sample Output</h1>
0
120

<h1>Soure</h1>
UVaOJ - Shahriar Manzoor

<h1>解题思路</h1>
回归物理- -还是最擅长的图解吧，简单明了。速度时间图求解路程，就是下图的阴影区域面积，即2*v*t。

<a href="http://www.aemiot.com/wp-content/uploads/2013/10/UvaOj-10071.jpg"><img src="http://www.aemiot.com/wp-content/uploads/2013/10/UvaOj-10071.jpg" alt="UvaOj-10071" width="565" height="260" class="aligncenter size-full wp-image-1107" /></a>

<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
using namespace std;
int main()
{
    int v,t;
    while(cin &gt;&gt; v &gt;&gt; t)
        cout &lt;&lt; 2*v*t &lt;&lt; endl;
    return 0;
}
[/code]


[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1106</wp:post_id>
		<wp:post_date>2013-10-22 13:52:59</wp:post_date>
		<wp:post_date_gmt>2013-10-22 05:52:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>uvaoj-10071</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="10071"><![CDATA[10071]]></category>
		<category domain="post_tag" nicename="uvaoj"><![CDATA[UVaOJ]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e7%ae%97%e6%b3%95%e7%ab%9e%e8%b5%9b%e5%85%a5%e9%97%a8%e4%b9%a0%e9%a2%98"><![CDATA[算法竞赛入门习题]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869175]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ecological Premium&#124;算法竞赛入门习题&#124;UVaOJ-10300</title>
		<link>http://www.aemiot.com/uvaoj-10300.html</link>
		<pubDate>Mon, 11 Nov 2013 15:00:36 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1117</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=94&page=show_problem&problem=1241" title="Ecological Premium">Ecological Premium</a>

<h1>时空限制</h1>
Time limit: 1.000 seconds

<h1>题目描述</h1>
German farmers are given a premium depending on the conditions at their farmyard. Imagine the following simplified regulation: you know the size of each farmer's farmyard in square meters and the number of animals living at it. We won't make a difference between different animals, although this is far from reality. Moreover you have information about the degree the farmer uses environment-friendly equipment and practices, expressed in a single integer greater than zero. The amount of money a farmer receives can be calculated from these parameters as follows. First you need the space a single animal occupies at an average. This value (in square meters) is then multiplied by the parameter that stands for the farmer's environment-friendliness, resulting in the premium a farmer is paid per animal he owns. To compute the final premium of a farmer just multiply this premium per animal with the number of animals the farmer owns.

<h1>Input</h1>
The first line of input contains a single positive integer n (<20), the number of test cases. Each test case starts with a line containing a single integer f (0<f<20), the number of farmers in the test case. This line is followed by one line per farmer containing three positive integers each: the size of the farmyard in square meters, the number of animals he owns and the integer value that expresses the farmer’s environment-friendliness. Input is terminated by end of file. No integer in the input is greater than 100000 or less than 0.

<h1>Output</h1>
For each test case output one line containing a single integer that holds the summed burden for Germany's budget, which will always be a whole number. Do not output any blank lines.

<h1>Sample Input</h1>
3
5
1 1 1
2 2 2
3 3 3
2 3 4
8 9 2
3
9 1 8
6 12 1
8 1 1
3
10 30 40
9 8 5
100 1000 70

<h1>Sample Output</h1>
38
86
7445


<h1>Soure</h1>
UVaOJ - Frank Hutter

<h1>解题思路</h1>
根据条件列出等式，化简可得最终结果是累加a*c

<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
using namespace std;
int main()
{
    int T;
    cin &gt;&gt; T;
    while(T--)
    {
        int f,a,b,c;
        int sum = 0;
        cin &gt;&gt; f;
        while(f--)
        {
            cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;
            sum += a*c; 
        }
        cout &lt;&lt; sum &lt;&lt; endl;
    }
    return 0;
}
[/code]


[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1117</wp:post_id>
		<wp:post_date>2013-11-11 23:00:36</wp:post_date>
		<wp:post_date_gmt>2013-11-11 15:00:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>uvaoj-10300</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="10300"><![CDATA[10300]]></category>
		<category domain="post_tag" nicename="uvaoj"><![CDATA[UVaOJ]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e7%ae%97%e6%b3%95%e7%ab%9e%e8%b5%9b%e5%85%a5%e9%97%a8%e4%b9%a0%e9%a2%98"><![CDATA[算法竞赛入门习题]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869176]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title> The Decoder&#124;算法竞赛入门习题&#124;UVaOJ-458</title>
		<link>http://www.aemiot.com/uvaoj-458.html</link>
		<pubDate>Mon, 11 Nov 2013 15:11:33 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1119</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=94&page=show_problem&problem=399" title="The Decoder">The Decoder</a>

<h1>时空限制</h1>
Time limit: 1.000 seconds

<h1>题目描述</h1>
Write a complete program that will correctly decode a set of characters into a valid message. Your program should read a given file of a simple coded set of characters and print the exact message that the characters contain. The code key for this simple coding is a one for one character substitution based upon a single arithmetic manipulation of the printable portion of the ASCII character set. 

<h1>Input</h1>
For example: with the input file that contains: 

1JKJ'pz'{ol'{yhklthyr'vm'{ol'Jvu{yvs'Kh{h'Jvywvyh{pvu5
1PIT'pz'h'{yhklthyr'vm'{ol'Pu{lyuh{pvuhs'I|zpulzz'Thjopul'Jvywvyh{pvu5
1KLJ'pz'{ol'{yhklthyr'vm'{ol'Kpnp{hs'Lx|pwtlu{'Jvywvyh{pvu5

<h1>Output</h1>
your program should print the message: 
*CDC is the trademark of the Control Data Corporation.
*IBM is a trademark of the International Business Machine Corporation.
*DEC is the trademark of the Digital Equipment Corporation.

Your program should accept all sets of characters that use the same encoding scheme and should print the actual message of each set of characters. 

<h1>Sample Input</h1>
1JKJ'pz'{ol'{yhklthyr'vm'{ol'Jvu{yvs'Kh{h'Jvywvyh{pvu5
1PIT'pz'h'{yhklthyr'vm'{ol'Pu{lyuh{pvuhs'I|zpulzz'Thjopul'Jvywvyh{pvu5
1KLJ'pz'{ol'{yhklthyr'vm'{ol'Kpnp{hs'Lx|pwtlu{'Jvywvyh{pvu5

<h1>Sample Output</h1>
*CDC is the trademark of the Control Data Corporation.
*IBM is a trademark of the International Business Machine Corporation.
*DEC is the trademark of the Digital Equipment Corporation.

<h1>Soure</h1>
UVaOJ

<h1>解题思路</h1>
从样例可以看出就是ASCII值减去7.值得注意的是，用c++的时候注意流设置要关闭空白符跳过。

<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;iomanip&gt;
using namespace std;
int main()
{
    char t;
    while(cin &gt;&gt; noskipws, cin &gt;&gt; t)
	{
		cout &lt;&lt; (char)((t=='\n')? '\n':t-7);
	}
    return 0;
}
[/code]


[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1119</wp:post_id>
		<wp:post_date>2013-11-11 23:11:33</wp:post_date>
		<wp:post_date_gmt>2013-11-11 15:11:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>uvaoj-458</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="458"><![CDATA[458]]></category>
		<category domain="post_tag" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="post_tag" nicename="uvaoj"><![CDATA[UVaOJ]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869177]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2013江西理工大学软件学院ACM新生热身赛题解</title>
		<link>http://www.aemiot.com/jxustnc-2013-xss0.html</link>
		<pubDate>Sat, 16 Nov 2013 18:19:15 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1125</guid>
		<description></description>
		<content:encoded><![CDATA[比赛情况：<a href="http://acm.hdu.edu.cn/diy/contest_ranklist.php?cid=21515&amp;page=1">http://acm.hdu.edu.cn/diy/contest_ranklist.php?cid=21515&amp;page=1</a>

赛后重挂：<a href="http://acm.hdu.edu.cn/diy/contest_show.php?cid=21575">http://acm.hdu.edu.cn/diy/contest_show.php?cid=21575</a>

&nbsp;

[toggle title="第一题题解"]
<h1>Problem Description</h1>
Aem为了提高大家的编程水平，举办了这么一场比赛，但是出题是苦恼的，出难了没人能写。为了保证大家至少能解决一道题，于是有了这道题，你的任务是输出一个字符串 "CONTEST START" 和 一个幸运数字（幸运数字在输入中给出）。
提示：字符串和幸运数字直接有一个空格。
<h1>Input</h1>
一个幸运数字
<h1>Output</h1>
CONTEST START + 空格 + 幸运数字
注意：最后还有一个换行符
<h1>Sample Input</h1>
13
<h1>Sample Output</h1>
CONTEST START 13
<h1>Author</h1>
chuyuaem
<h1>解题思路</h1>
这题真的没啥好说的，直接上标程。
<h1>我的代码</h1>
[code lang="c"]
#include &lt;stdio.h&gt;
int main()
{
	int LUCKY;
	scanf(&quot;%d&quot;,&amp;LUCKY);
	printf(&quot;CONTEST START %d\n&quot;,LUCKY);
	return 0;
}
[/code]

[/toggle]

[toggle title="第二题题解"]
<h1>Problem Description</h1>
Aem的当年的录取通知书附赠了两张手机卡，一张是移动的，一张是电信的。后来我选择了移动的手机卡，因为大一军训充值移动话费，可以免费拿到军训服。

这张移动的手机卡，每个月赠送了300M省内流量，50M国内流量，100条短信。在学校使用手机上网时，会优先消耗省内流量，只有当省内流量用完才会消耗国内流量。

当其中一项使用到80%时，移动的系统会发来一条短信通知。
当其中一项用完时，移动的系统也会发来一条短信通知。

（假设Aem一直在学校）现在Aem知道自己每个月在学校用了多少流量，发了多少短信...但是他不知道自己收到了多少条移动通知短信...但是马虎的Aem总是算不出自己到底收到了多少移动短信，于是他找到了未来的编程高手----你，想借助你编程的力量解决这个问题。
<h1>Input</h1>
第一行一个数字N，表示你要统计之前N个月移动发来的短信通知。
接下来N行（分别对应前N个月，前N-1个月，前N-2个月的情况）
每行2个整数m和n，分别表示这个月在学校使用的流量（Aem每个月使用的流量都是整数哦）和发出的短信。

输入数据范围：
0 &lt; N &lt; 1000
0 &lt;= m &lt;= 350
0 &lt;= n &lt;= 100
<h1>Output</h1>
结果只有一行，这一行只有一个数字，表示在移动发来短信通知的数量。
提示：因为是一行，所以数字后面要加上换行符。
<h1>Sample Input</h1>
2
100 10
300 90
<h1>Sample Output</h1>
3
<h1>Author</h1>
chuyuaem
<h1>解题思路</h1>
300M的省内流量，50M的国内流量。那么对于使用流量达到240M时会收到一条短信，到达300M时会收到一条短信，到达340M时会收到一条短信，到达350M时会收到一条短信。
100条短信。那么对于发送短信到达80条时会收到一条短信，到达100条时会收到一条短信。
不停判断即可。
<h1>我的代码</h1>
[code lang="c"]
#include &lt;stdio.h&gt;
int main()
{
	int N,m,n;
	int res = 0;
	scanf(&quot;%d&quot;,&amp;N);
	while(N--)
	{
		scanf(&quot;%d%d&quot;,&amp;m,&amp;n);
		if(m&gt;=240)
			++res;
		if(m&gt;=300)
			++res;
		if(m&gt;=340)
			++res;
		if(m&gt;=350)
			++res;
		if(n&gt;=80)
			++res;
		if(n&gt;=100)
			++res;
	}
	printf(&quot;%d\n&quot;,res);
	return 0;
}
[/code]


[/toggle]

[toggle title="第三题题解"]
<h1>Problem Description</h1>
你的任务是计算一个数字K的位数。
<h1>Input</h1>
第一行是一个整数N，表示后面会有N行K。
0 &lt;= K &lt; 2^32
<h1>Output</h1>
对于输入的每个K，你需要在相应的行输出K的位数。
如第二个K，对应的输出在第二行。
<h1>Sample Input</h1>
2
12
7474
<h1>Sample Output</h1>
2
4
<h1>Author</h1>
chuyuaem
<h1>解题思路</h1>
有好几种思路呢。
首先，可以利用不断除10，去处理。（这种情况要注意数据范围，首先范围不能小于unsigned int，其次还要注意对0的处理。
其次，你可以用字符串读入，直接看字符串长度。
当然，还有一些其他方法，这里就不多说。
<h1>我的代码</h1>
[code lang="c"]
#include &lt;stdio.h&gt;
int main()
{
	int N;
	unsigned int K;
	scanf(&quot;%d&quot;,&amp;N);
	while(N--)
	{
		int res = 0;
		scanf(&quot;%d&quot;,&amp;K);
		if(K==0)
		{
			printf(&quot;1\n&quot;);
			continue;
		}
		while(K)
		{
			++res;
			K = K/10;
		}
		printf(&quot;%d\n&quot;,res);
	}
	return 0;
}
[/code]


[/toggle]

[toggle title="第四题题解"]
<h1>Problem Description</h1>
Aem的英语非常之差，差到都无法用英文命题。所以你们现在看到的是中文，虽然Aem经常告诉自己要好好学英语，但是除了高考前夕英语突飞猛进了一回外，英语一直是弱到不行。听闻Aem上学期英语挂科了（好不容易才补考通过了），貌似12月份还有英语四级要考，据说英语四级成绩太差，会连成绩单都拿不到的。为了拿到成绩单（Aem第一次参加英语四级都没敢奢望通过），他找到了一份单词表，这张单词表特别长，每个单词一行，Aem想知道这里究竟有多少行，但是单词表实在是太长了。于是他想请身为未来编程高手--你帮帮他。你的任务是计算出单词表中单词的个数。
<h1>Input</h1>
若干个单词，每个单词一行。
一个单词仅仅由大小写字母构成。
（输入结束标志应该以EOF为准，当scanf函数的返回值为EOF时，表示已经没有数据可以读了）
<h1>Output</h1>
输出只有一行，这一行有一个数字，表示单词个数（提示：数字后有换行符）
<h1>Sample Input</h1>
I
like
to
programme
and
make
them
solve
technical
problems
for
me
<h1>Sample Output</h1>
12
<h1>Author</h1>
chuyuaem
<h1>解题思路</h1>
也是很多方法，首先可以就纯粹的统计单词，首先设置一个开关，开始开关（标志是否在一个单词内部）是关闭的。
不断读入字符。
如果读入一个字符，开关是关闭的，并且是一个有效的字母（单词的开始），那么数值加一，将开关打开。
如果读入一个字符，开关是关闭的，并且不是一个有效的字母，那么什么也不做。
如果读入一个字符，开关是打开的，并且是一个有效的字符，也什么都不错。
如果读入一个字符，开关是打开的，并且是一个无效的单词（单词的结束），将开关关闭。

其他思路大致就是，通过统计换行符，统计字符串个数来完成。
<h1>我的代码</h1>
[code lang="c"]
#include &lt;stdio.h&gt;
#include &lt;stdio.h&gt;
int main()
{
	int flag=0;
	int res = 0;
	char t;
	while(scanf(&quot;%c&quot;,&amp;t) != EOF)
	{
		if(flag == 0 &amp;&amp;
		   ((t&gt;='A' &amp;&amp; t&lt;='Z') || (t&gt;='a' &amp;&amp; t&lt;='z'))
		  )
		{
			++res;
			flag = 1;
		}
		if(flag != 0 &amp;&amp;
		  ! ((t&gt;='A' &amp;&amp; t&lt;='Z') || (t&gt;='a' &amp;&amp; t&lt;='z'))
		  )
		{
			flag = 0;
		}
	}
	printf(&quot;%d\n&quot;,res);
	return 0;
}

[/code]


[/toggle]

[toggle title="第五题题解"]
<h1>Problem Description</h1>
传闻很多同学觉得C语言只能够写出一个黑框框的程序。虽然C语言可以画出更加i精美的图案，但是今天的我想说的是，C语言的就算在黑框框下也是可以画图的。

今天我们就来画一些直角三角形吧。

例如：
*
**
***
****

我们今天要画的三角形外形大致就是这样。
具体点就是，我们根据指定的值H画三角形。（上面那个三角形H值为4，即底边上有H个星号，高上也有H个星号）
<h1>Input</h1>
第一行是一个数字N，表示接下来要画N个三角形。
接下来N行，每行一个H值（H值含义，见题目描述）。
<h1>Output</h1>
一些三角形。
<h1>Sample Input</h1>
2
3
5
<h1>Sample Output</h1>
*
**
***
*
**
***
****
*****
<h1>Author</h1>
chuyuaem
<h1>解题思路</h1>
利用循环控制好输出即可。
<h1>我的代码</h1>
[code lang="c"]
#include &lt;stdio.h&gt;
int main()
{
	int T;
	int h;
	int i,j;
	scanf(&quot;%d&quot;,&amp;T);
	while(T--)
	{
		scanf(&quot;%d&quot;,&amp;h);
		for(i=1; i&lt;=h; ++i)
		{
			for(j=1; j&lt;=i; ++j)
				printf(&quot;*&quot;);
			printf(&quot;\n&quot;);
		}
	}
	return 0;
}
[/code]


[/toggle]

[toggle title = "第六题题解"]
<h1>Problem Description</h1>
话说，热身赛虽然是信心赛，但是到现在为止递推，递归，贪心，排序什么都没有。这样不太好吧，万一有人直接通关，那岂不是太无趣了。
（当然，正式比赛可能都会有哦，之前对编程算法了解较少的同学，希望在正式比赛前充分准备，掌握一些基本的递推递归贪心等思想。）
所以Aem设置了一个小小的门槛，就是这道题了。
据说终结这道题，将会获得终结者称号（- -）。

Aem正在玩一个解密类游戏，但是他遇到了一个难题，这里有一些数，想要进入到下一关的话，就需要从数K中删去要求的N个数字使剩下的数字组成的数最大(不改变原有顺序)，为了解决这个问题，Aem请你动用编程的力量为他解决这一难题。
<h1>Input</h1>
第一行有一个数T，表示有T组测试数据。
接下来的T行，每一行有两个数K和N ( 0&lt;= K &lt;= 2^31 ,N小于K的位数)。
<h1>Output</h1>
对每一组数据输出删除若干数字后剩下的数字组成的那个最大数。
<h1>Sample Input</h1>
1
917845 3
<h1>Sample Output</h1>
985
<h1>Author</h1>
chuyuaem
<h1>解题思路</h1>
贪心策略。因为一串数字要组成最大数一定是降序排列的，那么在不能改变原有序列上的删除一个数，也是在尽可能保证高位上的降序排列。（删除N个数，其实也就是N次删除1个数。）
<h1>我的代码</h1>
[code lang="c"]
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include &lt;string.h&gt;

//删去1个数字，使结果最大
void del(char* str)
{
	int i;
	int len = strlen(str);
	for(i=0; i&lt;len-1; ++i)
	{
		if(str[i]&lt;str[i+1])
		{
			strcpy(str+i,str+i+1);
			return ;
		}
	}
	strcpy(str+i,str+i+1);
}

int main()
{
	int i,n,T;
	unsigned k;
	char arr[100];
	scanf(&quot;%d&quot;,&amp;T);
	while(T--)
	{
		scanf(&quot;%u%d&quot;,&amp;k,&amp;n);
		sprintf(arr,&quot;%u&quot;,k);
		for(i=0; i&lt;n; ++i)
		del(arr);
		printf(&quot;%s\n&quot;,arr);
	}
	return 0;
} [/code]


[/toggle]

[toggle title ="第七题题解"]
<h1>Problem Description</h1>
当你完成了终结题，说明你对问题的分析已经略有小成了。
当然，终结题并不是说，比赛结束了，而是以你的水平，足以踏上新的征程，你来参加这场比赛应该也是打酱油的吧。（其实我想说，地球已经不适合你了），那么来试试这题吧。这是为至少竞赛入门水平的人准备的。（也许你的语法还不够熟悉，但是你的分析能力已经成熟了）

一本书的页面从自然数1开始顺序编码直到自然数n。书的页码按照n的位数编排，不足时补充前导数字0。例如，n是149时，第6页用数字006表示，而不是06或6。现在要求你对给定书的总页码n，计算出书的全部页码分别用到多少次数字0,1，2，...，9.
<h1>Input</h1>
有若干组数据，每组数据一行。 （输入结束标志应该以EOF为准，当scanf函数的返回值为EOF时，表示已经没有数据可以读了）
每行一个数字n。（1≤n≤10^9）
<h1>Output</h1>
每组输入数据对应10行。分别是0-9的使用次数。
输出完一组数据后，额外输出一个换行。
<h1>Sample Input</h1>
11
1
<h1>Sample Output</h1>
10
4
1
1
1
1
1
1
1
1

0
1
0
0
0
0
0
0
0
0
<h1>Author</h1>
chuyuaem
<h1>解题思路</h1>
寻找数学规律即可
<h1>我的代码</h1>
[code lang="c"]
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int res[10];

void calc(int num)
{
	int i;
	int yz = num;
	int mid = 1;
	int ws = 1;
	while (yz /= 10)
	{
		/*计算中间值*/
		mid *= 10;
		/*计算位数*/
		ws += 1;
	}
	/*去除 00000...这个数字*/
	res[0] -= ws;
	while (mid)
	{
		/* 除去最高位剩下的数*/
		int ys = num % mid;
		/* 最高位*/
		int zg = num / mid;
		/* 最高位为k时，对于最高位为0~k-1的数，恰有mid个（0~mid-1）*/
		for (i = 0; i &lt; zg; ++i)
		{
			res[i] += mid;
		}
		/* 最高位为k时，对最高位为k的数恰有ys+1个（0~ys）*/
		res[zg] += ys + 1;
		/* 最高位为k时，对于最高位为0~k-1的数，余数是00000...~99999...一共mid个*/
		/* 在00000...~99999..该每个数字出现(ws-1)*mid/10次*/
		for (i = 0; i &lt; 10; ++i)
		{
			res[i] += (mid/10)* zg* (ws - 1) ;
		}
		num = ys;
		--ws;
		mid /= 10;
	}
}

int main()
{
	int i;
	int num;
	while (scanf(&quot;%d&quot;,&amp;num) != EOF)
	{
		memset(res, 0, sizeof(res));
		calc(num);
		for (i = 0; i &lt; 10; ++i)
		{
			printf(&quot;%d\n&quot;,res[i]);
		}
		printf(&quot;\n&quot;);
	}
	return 0;
}
[/code]


[/toggle]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1125</wp:post_id>
		<wp:post_date>2013-11-17 02:19:15</wp:post_date>
		<wp:post_date_gmt>2013-11-16 18:19:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jxustnc-2013-xss0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869178]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>149</wp:comment_id>
			<wp:comment_author><![CDATA[2013江西理工大学软件学院ACM选拔赛题解 | Aem博客]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.aemiot.com/jxustnc-2013-xss1.html</wp:comment_author_url>
			<wp:comment_author_IP>108.166.217.2</wp:comment_author_IP>
			<wp:comment_date>2013-11-24 18:23:26</wp:comment_date>
			<wp:comment_date_gmt>2013-11-24 10:23:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 2013江西理工大学软件学院ACM新生热身赛题解 [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385288606.6804840564727783203125;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>166</wp:comment_id>
			<wp:comment_author><![CDATA[ACM集训队2014上半年第一次练习解题报告 | Aem博客]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.aemiot.com/acmteam-2014-001.html</wp:comment_author_url>
			<wp:comment_author_IP>23.234.195.5</wp:comment_author_IP>
			<wp:comment_date>2014-03-02 18:23:53</wp:comment_date>
			<wp:comment_date_gmt>2014-03-02 10:23:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 贪心。可以参考2013江西理工大学软件学院ACM新生热身赛题解第六题和删除数字问题的数学证明，不过这里因为数据较大的问题，要使用long long类型或者干脆当字符处理。 [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393755833.5009739398956298828125;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>删除数字问题的数学证明</title>
		<link>http://www.aemiot.com/delete-number-problem.html</link>
		<pubDate>Sun, 17 Nov 2013 16:04:49 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1134</guid>
		<description></description>
		<content:encoded><![CDATA[A1...An组成的序列，删除第一个<strong>非递减</strong>数字的<strong>前一个</strong>数字，那么余下的它是一个最大的数。

证明：
设第一个非递减的数字为Ai+1 ，那么前一个数字是Ai，同时有Ai &lt; Ai+1
假设存在其他解....然后要么是<strong>更低位</strong>的数字Aj,要么是<strong>更高位</strong>的 Ak &gt; Ak+1。

对于更低位的数字,
删除Ai， A1  ... Ai-1   <span style="color: #ff0000;"><del>Ai</del></span>   Ai+1  ...  Aj-1  Aj   Aj+1
删除Aj,   A1  ... Ai-1   Ai   Ai+1  ...  Aj-1  <span style="color: #ff0000;"><del>Aj</del></span>   Aj+1

两者比较

A1  ... Ai-1   <span style="color: #ff0000;">Ai+1</span>  ...  Aj-1  Aj   Aj+1
A1  ... Ai-1   <span style="color: #ff0000;">Ai</span>   Ai+1  ...  Aj-1  Aj+1

因为Ai &lt; Ai+1, 所以删除Ai情况组成的数大于删除Ak情况组成的数。

对于更高位的Ak &gt; Ak+1,同理可证。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1134</wp:post_id>
		<wp:post_date>2013-11-18 00:04:49</wp:post_date>
		<wp:post_date_gmt>2013-11-17 16:04:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>delete-number-problem</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e8%af%81%e6%98%8e"><![CDATA[证明]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869179]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>167</wp:comment_id>
			<wp:comment_author><![CDATA[ACM集训队2014上半年第一次练习解题报告 | Aem博客]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.aemiot.com/acmteam-2014-001.html</wp:comment_author_url>
			<wp:comment_author_IP>23.234.195.5</wp:comment_author_IP>
			<wp:comment_date>2014-03-02 20:41:30</wp:comment_date>
			<wp:comment_date_gmt>2014-03-02 12:41:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 贪心。可以参考2013江西理工大学软件学院ACM新生热身赛题解第六题和删除数字问题的数学证明，不过这里因为数据较大的问题，要使用long long类型或者干脆当字符处理。 [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1393764090.7719199657440185546875;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>水题-时间计算&#124;小Q系列故事——为什么时光不能倒流&#124;HDU-4510</title>
		<link>http://www.aemiot.com/hdu-problem-4510.html</link>
		<pubDate>Sun, 24 Nov 2013 05:44:51 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1153</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4510" title="小Q系列故事——为什么时光不能倒流">小Q系列故事——为什么时光不能倒流</a>

<h1>时空限制</h1>
Time Limit: 300/100 MS (Java/Others)    Memory Limit: 65535/32768 K (Java/Others)

<h1>题目描述</h1>
我以为我会是最坚强的那一个 我还是高估了自己
　　我以为你会是最无情的那一个 还是我贬低了自己

　　就算不能够在一起 我还是为你担心
　　就算你可能听不清 也代表我的心意

　　那北极星的眼泪 闪过你曾经的眼角迷离
　　那玫瑰花的葬礼 埋葬的却是关于你的回忆

　　如果时光可以倒流 我希望不要和你分离
　　如果注定分离 我希望不要和你相遇

　　　　——摘自《小Q失恋日记 》第17卷520页

　　这是码农小Q第58次失恋了，也是陷得最深的一次。
　　要知道，小Q自从第一次到腾讯公司报到，就被风姿绰约的前台MM彻底迷住了，这1000多个日日夜夜他无时无刻不在憧憬着他们美好的未来。为了能见到MM，他每天早到晚归，甘愿加班，连续3年被评为优秀员工，并且以全公司最快的速度晋级到四级岗位。就在他终于鼓足勇气准备表白的时候，MM却满面春风地送来了一包喜糖......
　　现在小Q专门请了年休假治疗情伤，但情绪总不见好转，每天足不出户，眼睛盯着墙上的钟表，反复念叨：“表白要趁早，时光不倒流，表白要趁早，时光不倒流......”
　　假设现在已知当前的时间，让时间倒退回若干，你能计算出钟表显示的时间吗？

<h1>Input</h1>
输入首先包含一个整数N，表示有N组测试用例。
接下来的N行表示N个测试用例，每行包括2个时间HH:MM:SS hh:mm:ss
HH:MM:SS表示当前的时间，hh:mm:ss表示希望倒退回去的时间。
[Technical Specification]
00<=HH<=11
00<=hh<=99
00<=MM, SS, mm, ss<=59

<h1>Output</h1>
请计算并输出钟表倒退后显示的时间，要求输出格式为HH:MM:SS（即时分秒均显示2位，不足则补0），每组数据输出占一行。

<h1>Sample Input</h1>
2
11:28:32 02:14:21
05:00:00 96:00:01

<h1>Sample Output</h1>
09:14:11
04:59:59

<h1>解题思路</h1>
直接模拟咯。

<h1>我的代码</h1>
[code lang="cpp"]
#include&lt;stdio.h&gt;
int main()
{
    int n,HH,MM,SS,hh,mm,ss;
    while(~scanf(&quot;%d&quot;,&amp;n))
    {
        while(n--)
        {
            scanf(&quot;%d:%d:%d %d:%d:%d&quot;,&amp;HH,&amp;MM,&amp;SS,&amp;hh,&amp;mm,&amp;ss);
            int th,tm,ts;
            if(SS&lt;ss)
            {
                SS+=60;
                MM--;
            }
            ts=SS-ss;

            if(MM&lt;mm)
            {
                MM+=60;
                HH--;
            }
            tm=MM-mm;

            while(HH&lt;hh)
            {
                HH+=12;
            }
            th=HH-hh;

            printf(&quot;%02d:%02d:%02d\n&quot;,th,tm,ts);
        }
    }
    return 0;
}
[/code]


[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1153</wp:post_id>
		<wp:post_date>2013-11-24 13:44:51</wp:post_date>
		<wp:post_date_gmt>2013-11-24 05:44:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hdu-problem-4510</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="4510"><![CDATA[4510]]></category>
		<category domain="post_tag" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="post_tag" nicename="hdu"><![CDATA[hdu]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869180]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2013江西理工大学软件学院ACM选拔赛题解</title>
		<link>http://www.aemiot.com/jxustnc-2013-xss1.html</link>
		<pubDate>Sun, 24 Nov 2013 10:10:22 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1151</guid>
		<description></description>
		<content:encoded><![CDATA[比赛情况：<a href="http://acm.hdu.edu.cn/diy/contest_ranklist.php?cid=21699&page=1">http://acm.hdu.edu.cn/diy/contest_ranklist.php?cid=21699&page=1</a>

赛后重挂：<a href="http://acm.hdu.edu.cn/diy/contest_show.php?cid=21697">http://acm.hdu.edu.cn/diy/contest_show.php?cid=21697</a>

[toggle title="第一题题解"]
<h1>Problem Description</h1>
Aem最近在阅读一本书《浪潮之巅》，这本书基本上就是IT史，作者用独特的方式，分析了IT届近来大公司（IBM、苹果、微软、甲骨文等）的兴起与衰亡。大多数公司都是随着新的事物出现而迅速发展的，如同互联网的出现，致使大家对长途电话的需求急剧下降，一个刚兴起的互联网小公司甚至就能够击垮老牌的电话大公司。
Aem在阅读了这本书之后，开始思考起自己的人生来，而且最近也有不少新生问我一些我常常思考的问题。这也从侧面反映出新生还是很纠结的，一方面是对自己未来的不确定，对自己要学什么不确定。
所以，我决定运用我最近生活中的感悟以及IT的历史来讲解一下这些问题，接下来是我的见解：
人的一生，重在过程。在我看来，人的一生过的坦坦荡荡，追求自己的理想，充分发挥自己的天赋，挑战困难，品悟世间最宝贵的感情就是最好的结局了。 
大家都是知道的，IT行业是一个发展快速的行业，而现在IT行业促使着世界的快速变革。
在这种大环境下，你学习编程而只是学习一些语法什么的，然后不断复制别人的产品，这将致使你始终是一个二流程序员，而谈不上工程师。就像互联网小公司击垮老牌电话大公司一样。
为此，你所需要的能力应该是，能够为你带来创新技术优势编程灵魂-算法（再一次确定了自己一直以来选择的路是正确的），创新所必须的敏锐眼光（虽然我很不看好乔布斯，但是乔布斯早在第一次见到CD音乐盘时，就想到了音乐播放器将会有很大的市场，事实上iPod在苹果公司最危难的时候救了苹果一命）。在这点上，我希望ACM集训队能够帮助大家，在这里我们主要学习算法，我们也会做一些小产品（将算法变成产品）。并且现在各大公司普遍看好ACM，所以别再犹豫了，时代在快速变革，只有自己不断努力，不要再为自己找借口才能成功。 
好了，废话这么多，其实大家都不耐烦了吧。
正题，为了感谢《浪潮之巅》带给我的知识，我决定号召大家打印这本书作者的名字的拼音字母—Wu Jun
<h1>Input</h1>
没有输入 
<h1>Output</h1>
Wu Jun（提示：后面还有一个换行符） 
注意：最后还有一个换行符
<h1>Sample Input</h1>

<h1>Sample Output</h1>
Wu Jun（提示：后面还有一个换行符）

<h1>Author</h1>
chuyuaem

<h1>解题思路</h1>
这题真的没啥好说的，直接上标程。
<h1>我的代码</h1>
[code lang="c"]
#include &lt;stdio.h&gt;
int main()
{
    printf(&quot;Wu Jun\n&quot;);
    return 0;
}
[/code]

[/toggle]

[toggle title="第二题题解"]
<h1>Problem Description</h1>
你的任务非常简单，对于一系列数，找出每个数中最小的数字。

<h1>Input</h1>
第一行是整数T，表示有T个数。
接下来T行，每行一个数K。（0 <= K <= 2^64 - 1）

<h1>Output</h1>
找出每个数中最小的数字。
每个数字一行。（第一个数对应的最小数字输出在第一行，以此类推）

<h1>Sample Input</h1>
2
456
78

<h1>Sample Output</h1>
4
7

<h1>Author</h1>
chuyuaem

<h1>解题思路</h1>
使用64位无符号整型，或者当字符处理。

<h1>我的代码--64位无符号整型版</h1>
[code lang="c"]
#include &lt;stdio.h&gt;
int main()
{
	unsigned __int64 s;
	int t;
	scanf(&quot;%d&quot;,&amp;t);
	while(t--)
	{
		scanf(&quot;%I64u&quot;, &amp;s);
		int min = s%10;
		while(s)
		{
			if(s%10 &lt; min)
				min = s%10;
			s/=10;
		}
		printf(&quot;%d\n&quot;, min);
	}
	return 0;
}
[/code]


<h1>我的代码--字符处理版本</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
int main()
{
    string s;
    int t;
    cin &gt;&gt; t;
    while(t--)
    {
         cin &gt;&gt; s;
         char c = s[0];
         for(int i=1; i&lt;s.size(); ++i)
         {
             if(s[i] &lt; c)
                 c = s[i];
         }
         cout &lt;&lt; c &lt;&lt; endl;
    }
    return 0;
}
[/code]

[/toggle]

[toggle title="第三题题解"]
<h1>Problem Description</h1>
我们设计了一个新的手机,你的任务是写一个界面来显示电池的状态。
在这里,我们使用”.”空的部分，“-”表示非空部分

每一行有14个字符。
电池的状态用x%，表示剩余电量为x;
这里x将永远是10的倍数,而且从不
超过100。 

<h1>Input</h1>
第一行有一个数T(T < 10),表示有T组数据。
接下来T行，每一行都有一个数x。(0 < x < 100,x是10的倍数) 

<h1>Output</h1>
对于每组数据，画出它对应的电池图形。再每画完一个图形后，需要额外一个空行。 

<h1>Sample Input</h1>
2
0
60

<h1>Sample Output</h1>
<pre>
*------------*
|............|
|............|
|............|
|............|
|............|
|............|
|............|
|............|
|............|
|............|
*------------*

*------------*
|............|
|............|
|............|
|............|
|------------|
|------------|
|------------|
|------------|
|------------|
|------------|
*------------*
</pre>

<h1>Author</h1>
chuyuaem

<h1>解题思路</h1>
找规律，或者直接暴力，反正输入非常有限

<h1>我的代码</h1>
[code lang="c"]
#include &lt;stdio.h&gt;  
int main()  
{  
	int T,t,k,i;
	scanf(&quot;%d&quot;,&amp;T);
	for(i=1; i&lt;=T; ++i)
	{
		scanf(&quot;%d&quot;,&amp;t);
		printf(&quot;*------------*\n&quot;);
		for(k=0; k&lt;10-t/10; ++k)
			printf(&quot;|............|\n&quot;);	
		for(k=0; k&lt;t/10; ++k)
			printf(&quot;|------------|\n&quot;);
		printf(&quot;*------------*\n&quot;);
		printf(&quot;\n&quot;);
	}
	return 0;  
} 
[/code]

[/toggle]

[toggle title="第四题题解"]
<h1>Problem Description</h1>
一天，Aem背着包去买东西。
在商场，逛得眼花缭乱，最后他将以一些东西列入候选列表。
由于Aem认为散装的比包装的更加省钱，所以被列入候选列表的商品都是按重量计费的。
但是Aem的包是有限的，承重量为K，而被土豪附身了的Aem也正在为这个问题困惑。作为一名优秀的程序员，你当然是奋不顾身的冲上去帮助Aem咯。你的任务就是，在一系列候选商品中，告诉Aem每个商品要买多少（不买则相当于购买重量0，另外每个商品都有自己的最大购买重量，毕竟东西也是有限的嘛）才能使自己买的东西价值最高（真心！土豪啊！） 

<h1>Input</h1>
第一行一个整数T，表示有T组数据。
每组数据的第一行，两个数字，包的承重量K和候选商品数量N。
接下来N行，每行2个数，分别是一个商品的单位重量价格和最大购买重量。
(为了便于处理，假定候选列表中没有2个商品的单位重量价格是相同的，并且你只能购买单位重量整数倍的商品) 

<h1>Output</h1>
对每组数据在输出N个数字(每行一个)，分别为编号1...N商品的购买重量。

<h1>Sample Input</h1>
1
10 5
2 4
7 5
3 3
4 5
1 2

<h1>Sample Output</h1>
0
5
0
5
0

<h1>Author</h1>
chuyuaem

<h1>解题思路</h1>
对于商品列表，优先拿单位重量价格大的，拿完一个商品，背包还没满，就继续拿第二大的，以此类推。（其实就是贪心）

<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;cstring&gt;
using namespace std;
int cost[1000];
int wid[1000];
int use[1000];
int main()
{
	int T;
	cin &gt;&gt; T;
	while(T--)
	{
		memset(use,0,sizeof(use));
		int K,N;
		cin &gt;&gt; K &gt;&gt; N;
		for(int i=0; i&lt;N; ++i)
		{
			cin &gt;&gt; cost[i] &gt;&gt; wid[i];
		}
		int sum = 0; //重量计数
		int count = 0; //已拿物品数
		while(sum != K &amp;&amp; count != N)
		{
			int maxIndex = 0;
			for(int i=1; i&lt;N; ++i)
				if(cost[i]&gt;cost[maxIndex])
					maxIndex = i;
			++count; //拿一件
			use[maxIndex] = K-sum&gt;wid[maxIndex] ?wid[maxIndex]:K-sum;
			sum += use[maxIndex];
			cost[maxIndex] = 0;
		}
		for(int i=0; i&lt;N; ++i)
			cout &lt;&lt; use[i] &lt;&lt; endl;
	}
	return 0;
}
[/code]

[/toggle]

[toggle title="第五题题解"]
<h1>Problem Description</h1>
在一个月黑风高的晚上，小白不小心又把小猫惹火了，小猫很生气，后果很严重，轻则伤筋断骨，重则孤苦终老。于是千百年来人们一直在思考一个问题-----MM生气了怎么办，当然，情圣大师一般是XXXXXXXX就搞定的，但是腼腆的小白一直都是有贼心没贼胆的孩子，于是他选择了最古老的方式-----发短信。对于短信来说，有时能让钢铁之躯化为绕指柔，能让东海枯竭，六月飞雪。还能让滚滚财宝汇入一家之手，腰缠万贯，佳丽三千（- =你说的是移动老总吧）。话说天下短信三分天下，文艺青年用土豪金手写，普通青年用智能机拼音，二逼青年用诺基亚按键。小白不幸还是用着高中时期麻麻买的诺基亚核桃机。所以按键如图---
　　 1　　　 2　　　　3
　　　　　　abc　　　def
　　 4　　　 5　　　　6
　　ghi　　　jkl　　　mno
　　 7　　　 8　　　　9
　　pqrs　　tuv　　　wxyz 
机智的小白想来想去还是觉得用高端内涵有深度的英吉利语言比较好突出自身的洋气。但是懒惰的小白又不想想怎么去输入这些话，所以请上档次的你帮他设计一个输入一行英文或者空格然后告诉他需要打哪些数字的程序。
空格输出1.
如输入:big
输出:224444

<h1>Input</h1>
一行字符，保证没有小写字母和空格以外的字符。
长度<1000

<h1>Output</h1>
输出转换手机键盘的数字。
提示：末尾需要输出一个换行符

<h1>Sample Input</h1>
hello girl

<h1>Sample Output</h1>
443355555566614444777555

<h1>Author</h1>
万博文

<h1>解题思路</h1>
暴力判断，然后转换。

<h1>我的代码</h1>
[code lang="c"]
#include&lt;stdio.h&gt;
int main()
{
     char s[1000];
     int i,n,k;
     int t;
     i=0;n=0;
     while (scanf(&quot;%c&quot;,&amp;s[i])==1)
     {
         i=i+1;      
     }
     n=i;
     for (i=0;i&lt;n;i++)
     {
         if (s[i]==' ') {printf(&quot;1&quot;);continue;}
         if (s[i]=='a') {printf(&quot;2&quot;);continue;}
         if (s[i]=='b') {printf(&quot;22&quot;);continue;}
         if (s[i]=='c') {printf(&quot;222&quot;);continue;}
         if (s[i]=='d') {printf(&quot;3&quot;);continue;}
         if (s[i]=='e') {printf(&quot;33&quot;);continue;}
         if (s[i]=='f') {printf(&quot;333&quot;);continue;}
         if (s[i]=='g') {printf(&quot;4&quot;);continue;}
         if (s[i]=='h') {printf(&quot;44&quot;);continue;}
         if (s[i]=='i') {printf(&quot;444&quot;);continue;}
         if (s[i]=='j') {printf(&quot;5&quot;);continue;}
         if (s[i]=='k') {printf(&quot;55&quot;);continue;}
         if (s[i]=='l') {printf(&quot;555&quot;);continue;}
         if (s[i]=='m') {printf(&quot;6&quot;);continue;}
         if (s[i]=='n') {printf(&quot;66&quot;);continue;}
         if (s[i]=='o') {printf(&quot;666&quot;);continue;}
         if (s[i]=='p') {printf(&quot;7&quot;);continue;}
         if (s[i]=='q') {printf(&quot;77&quot;);continue;}
         if (s[i]=='r') {printf(&quot;777&quot;);continue;}
         if (s[i]=='s') {printf(&quot;7777&quot;);continue;}
         if (s[i]=='t') {printf(&quot;8&quot;);continue;}
         if (s[i]=='u') {printf(&quot;88&quot;);continue;}
         if (s[i]=='v') {printf(&quot;888&quot;);continue;}
         if (s[i]=='w') {printf(&quot;9&quot;);continue;}
         if (s[i]=='x') {printf(&quot;99&quot;);continue;}
         if (s[i]=='y') {printf(&quot;999&quot;);continue;}
         if (s[i]=='z') {printf(&quot;9999&quot;);continue;}
     }
        printf(&quot;\n&quot;);  
        return 0;   
}
[/code]

[/toggle]

[toggle title = "第六题题解"]
<h1>Problem Description</h1>
果然是最传统的方法，发短信过去后，小猫略有回应，不愧是上得了厅堂，下得了厨房，打得过流氓，砸的开核桃的诺基亚。但是一切就这样完美的结束了吗？答案当然是否定的，很悲催，由于惹恼了小猫，所以现在小白要将功赎罪帮小猫帮一件事情，因为小猫在玩一个Valley of Dragon的游戏，就是里面乒乒乓乓的打架啦打怪啦，但是人和人都有强弱之分，所以小猫希望小白能做出一个计算软件，通过输入其他人的数据就求出别人最大能力。首先是输入护甲---T，然后是DPS---D，再是控制能力----C，接下来是移动速度V，在接下来是他所拥有的佣兽个数s。最后是输入性别N。

而要求的power=(t*d^3+c^2*v)*s
最后如果性别是B则power最终要输出原来的0.8，如果是A则不变。（不要问我为什么要性别，我已经和谐了）

<h1>Input</h1>
第一行是一个整数N，表示接下来有N组数据。
每组数据由6个整数构成，分别是t,d,c,v,s,n （0<t,d,c,v,s<15）

<h1>Output</h1>
power值。（输出到小数点后3位） 

<h1>Sample Input</h1>
1
5 1 7 4 3 A

<h1>Sample Output</h1>
603.000

<h1>Author</h1>
万博文

<h1>解题思路</h1>
直接计算。注意精度，float是不够的。

<h1>我的代码</h1>
[code lang="cpp"]
#include&lt;iostream&gt;
#include&lt;cstdio&gt;
using namespace std;
int main()
{
    int T,t,d,c,v,s;
    char n;
    cin &gt;&gt; T;
    while(T--)
    {
        cin &gt;&gt; t&gt;&gt; d&gt;&gt; c&gt;&gt; v&gt;&gt; s&gt;&gt; n;
        if(n=='B')
            printf(&quot;%.3f\n&quot;,(double)(t*d*d*d+c*c*v)*s*0.8);
        else
            printf(&quot;%.3f\n&quot;,(double)(t*d*d*d+c*c*v)*s);
    }
    return 0;
}
[/code]

[/toggle]

[toggle title ="第七题题解"]
<h1>Problem Description</h1>
功夫不负有心人，在小白左右讨好之后，小猫最终还是原谅了小白，于是小白迈向了最后一步---------去小猫家.....................帮小猫打通关游戏，是的，我相信大家一定没有想歪，学编程的都是最最纯洁的孩子。但是每次去小猫家都会遇到一个很令小白蛋疼的问题----爬楼梯，很普通的楼梯，但是层数会经常换，小白可以一次上一层也能一次两层，甚至一次三层，这得益于多年运动的结果，但是在这里却是个累赘。因为大门的密码是从一层上到最后一层有多少种方法~
比如有三层阶梯，则他上去的方法有4中。
 分别是 1 1 1 
 1 2 
 2 1 
 3 
并且这一次由于常年失修，在其中会出现坏掉的阶梯，坏的阶梯不能够踩踏。
于是小白又来请你帮他设计一个程序，让他轻易就得知方法的种数。

<h1>Input</h1>
有多组数据。
每组数据的第一行输入N（n<=100）层楼梯，K(k<=10)个坏的楼梯
每组数据的第二行到k+1行输入坏掉的阶梯。
当N，K同时为0时，意味着没有数据了，并且这对0不要计算.

<h1>Output</h1>
对于每组数据，输出方案总数ans mod 89223后的值。

<h1>Sample Input</h1>
5 2
4 
2
7 2
4
6
0 0

<h1>Sample Output</h1>
2
6

<h1>Author</h1>
万博文

<h1>解题思路</h1>
递推，当遇到坏的电梯时，特殊处理下。

<h1>我的代码</h1>
[code lang="c"]
#include&lt;stdio.h&gt;
int main()
{
    int f[101],a[101];
    int i,n,k,m,ans;
    while(scanf(&quot;%d %d&quot;,&amp;n,&amp;k) != EOF)
    {
	if(n==0 &amp;&amp; k==0) 
		break;
    	for (i=1;i&lt;=n;i++)
    	{
    	    a[i]=0;
    	    f[i]=0;
    	}
    	for (i=0;i&lt;k;i++)
    	{
    	  scanf(&quot;%d&quot;,&amp;m);
    	  a[m]=1;
    	}
    	
    	if (a[1]==0) f[1]=1;
    	if (a[2]==0) f[2]=f[1]+1;
    	if (a[3]==0) f[3]=f[1]+f[2]+1;
    	
    	for (i=4;i&lt;=n;i++)
    	{
    	    if (a[i]==1) f[i]=0;
    	    else
    	    {
    	       f[i]=(f[i-3]+f[i-2]+f[i-1])%89223;
    	    }
    	}    
   	ans=f[n];
   	printf(&quot;%d\n&quot;,ans);
    }
    return 0;    
} 	
[/code]

[/toggle]

[toggle title ="第八题题解"]
<h1>Problem Description</h1>
我以为我会是最坚强的那一个 我还是高估了自己
我以为你会是最无情的那一个 还是我贬低了自己
就算不能够在一起 我还是为你担心
就算你可能听不清 也代表我的心意
那北极星的眼泪 闪过你曾经的眼角迷离
那玫瑰花的葬礼 埋葬的却是关于你的回忆
如果时光可以倒流 我希望不要和你分离
如果注定分离 我希望不要和你相遇
——摘自《XX失恋日记》第XX卷520页

XX暗恋失败了。
XX是某公司的一名员工。
XX自从第一次遇到自己心仪的女神，这1000多个日夜他一直憧憬着他们美好的未来。为见到心中的女神，他每天都是早到晚归，夺得了不少荣誉。当他鼓足了勇气准备去表白的时候，心中的女神却满面春风地送来了一包喜糖......
现在XX满脑子就只有一件事，如果时间能倒流多好啊！（ps：其实出题人认为没缘分就是没缘分！）
假设现在已知当前的时间，让时间倒退回若干，你能计算出钟表显示的时间吗？

<h1>Input</h1>
第一行是一个整数N，表示有N组数据。
接下来的N行，每行包括2个时间HH:MM:SS hh:mm:ss
HH:MM:SS为当前的时间
hh:mm:ss是希望倒退时间的多少。
[数据范围]
00<=HH<=11
00<=hh<=99
00<=MM, SS, mm, ss<=59

<h1>Output</h1>
输出时光倒流后的时间
输出格式，每组数据输出占一行。
这一行打印一个如下形式的时间。
HH:MM:SS
每个显示2位，如果不足则补0。

<h1>Sample Input</h1>
2
11:28:32 02:14:21
05:00:00 96:00:01

<h1>Sample Output</h1>
09:14:11
04:59:59

<h1>Author</h1>
chuyuaem

<h1>解题思路</h1>
这题，我原来单独发过题解的，这里就不重复了，附上一个链接。
<a href="http://www.aemiot.com/hdu-problem-4510.html" title="水题-时间计算|小Q系列故事——为什么时光不能倒流|HDU-4510" target="_blank"><strong>查看此题题解</strong></a>

[/toggle]

[toggle title ="第九题题解"]
<h1>Problem Description</h1>
曾经有人问我，正式比赛会不会有跟热身赛一样的题。我当时说这是个坑。嗯，没错，坑一次。反正，你们都没有在比赛结束后好好思考过这道题吧~~啦啦啦~~啦啦啦~~

一本书的页面从自然数1开始顺序编码直到自然数n。书的页码按照n的位数编排，不足时补充前导数字0。例如，n是149时，第6页用数字006表示，而不是06或6。现在要求你对给定书的总页码n，计算出书的全部页码分别用到多少次数字0,1，2，...，9。

<h1>Input</h1>
有若干组数据，每组数据一行。 （输入结束标志应该以EOF为准，当scanf函数的返回值为EOF时，表示已经没有数据可以读了）
每行一个数字n。（1≤n≤10^9）

<h1>Output</h1>
每组输入数据对应10行。分别是0-9的使用次数。 
输出完一组数据后，额外输出一个换行。

<h1>Sample Input</h1>
11
1

<h1>Sample Output</h1>
10
4
1
1
1
1
1
1
1
1

0
1
0
0
0
0
0
0
0
0

<h1>Author</h1>
chuyuaem

<h1>解题思路</h1>
这题，也是我原来发过题解的，这里就不重复了，附上一个链接。
<a href="http://www.aemiot.com/jxustnc-2013-xss0.html" title="2013江西理工大学软件学院ACM新生热身赛题解" target="_blank"><strong>点击查看题解（该比赛第七题）</strong></a>

[/toggle]


[toggle title ="第十题题解"]
<h1>Problem Description</h1>
这是最后一题，是不是觉得很恐怖，是不是觉得很难！
如果你这么认为，那你就输了。
当然，这题也不是那么的简单。

两个数的最大公约数与最小公倍数的关系如下：两数之积除以最大公约数就可得到最小公倍数。

现在，要求你求出一系列数的最小公倍数。

<h1>Input</h1>
第一行是一个数字T，表示有T组数据。
接下来T行，每行第一个数m表示后面还有m个数。

<h1>Output</h1>
对每组数据输出这m个数的最小公倍数。

<h1>Sample Input</h1>
2
3 5 7 15
6 4 10296 936 1287 792 1

<h1>Sample Output</h1>
105
10296

<h1>Author</h1>
chuyuaem

<h1>解题思路</h1>
这题，还是是我原来发过题解的，这里就不重复了，附上一个链接。
<a href="http://www.aemiot.com/gcd-lcm.html" title="易于编程的最大公约数算法和最小公倍数算法|HDU-Problem-1019" target="_blank">点击查看题解</a>

[/toggle]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1151</wp:post_id>
		<wp:post_date>2013-11-24 18:10:22</wp:post_date>
		<wp:post_date_gmt>2013-11-24 10:10:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jxustnc-2013-xss1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869181]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[2013%e6%b1%9f%e8%a5%bf%e7%90%86%e5%b7%a5%e5%a4%a7%e5%ad%a6%e8%bd%af%e4%bb%b6%e5%ad%a6%e9%99%a2acm%e9%80%89%e6%8b%94%e8%b5%9b%e9%a2%98%e8%a7%a3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>贪心&#124;Dragon of Loowater&#124;UVaOJ-11292</title>
		<link>http://www.aemiot.com/uvaoj-11292.html</link>
		<pubDate>Tue, 21 Jan 2014 13:32:15 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1174</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
<p><a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=2267" title="Dragon of Loowater">Dragon of Loowater</a></p>

<h1>时空限制</h1>
Time limit: 1.000 seconds

<h1>题目描述</h1>
Once upon a time, in the Kingdom of Loowater, a minor nuisance turned into a major problem.
The shores of Rellau Creek in central Loowater had always been a prime breeding ground for geese. Due to the lack of predators, the geese population was out of control. The people of Loowater mostly kept clear of the geese. Occasionally, a goose would attack one of the people, and perhaps bite off a finger or two, but in general, the people tolerated the geese as a minor nuisance.

One day, a freak mutation occurred, and one of the geese spawned a multi-headed fire-breathing dragon. When the dragon grew up, he threatened to burn the Kingdom of Loowater to a crisp. Loowater had a major problem. The king was alarmed, and called on his knights to slay the dragon and save the kingdom.

The knights explained: "To slay the dragon, we must chop off all its heads. Each knight can chop off one of the dragon's heads. The heads of the dragon are of different sizes. In order to chop off a head, a knight must be at least as tall as the diameter of the head. The knights' union demands that for chopping off a head, a knight must be paid a wage equal to one gold coin for each centimetre of the knight's height."

Would there be enough knights to defeat the dragon? The king called on his advisors to help him decide how many and which knights to hire. After having lost a lot of money building Mir Park, the king wanted to minimize the expense of slaying the dragon. As one of the advisors, your job was to help the king. You took it very seriously: if you failed, you and the whole kingdom would be burnt to a crisp!
<h1>Input</h1>
The input contains several test cases. The first line of each test case contains two integers between 1 and 20000 inclusive, indicating the number n of heads that the dragon has, and the number m of knights in the kingdom. The next n lines each contain an integer, and give the diameters of the dragon's heads, in centimetres. The following m lines each contain an integer, and specify the heights of the knights of Loowater, also in centimetres.

The last test case is followed by a line containing:

0 0

<h1>Output</h1>
For each test case, output a line containing the minimum number of gold coins that the king needs to pay to slay the dragon. If it is not possible for the knights of Loowater to slay the dragon, output the line:

Loowater is doomed!

<h1>Sample Input</h1>
2 3
5
4
7
8
4
2 1
5
5
10
0 0

<h1>Sample Output</h1>
11
Loowater is doomed!

<h1>解题思路</h1>
贪心策略，排序后即可得出答案。

<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;

int marr[300000],narr[300000];
int main()
{
    int m,n;
    while(cin &gt;&gt; n &gt;&gt; m, m|n)
    {
        for(int i=0; i&lt;n; ++i)
            cin &gt;&gt; narr[i];
        for(int i=0; i&lt;m; ++i)
            cin &gt;&gt; marr[i];
        sort(marr,marr+m);
        sort(narr,narr+n);
        int j = 0;
        int sum = 0;
        int flag = 1;
        for(int i=0; i&lt;n; ++i)
        {
            while(j&lt;m &amp;&amp;marr[j] &lt; narr[i])
                ++j;
            if(j&lt;m)
                sum += marr[j++];
            else
            {
                flag = 0;
                cout &lt;&lt; &quot;Loowater is doomed!&quot; &lt;&lt; endl;
                break;
            }
        }
        if(flag)
            cout &lt;&lt; sum &lt;&lt; endl;
    }
    return 0;
}
[/code]

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1174</wp:post_id>
		<wp:post_date>2014-01-21 21:32:15</wp:post_date>
		<wp:post_date_gmt>2014-01-21 13:32:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>uvaoj-11292</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="11292"><![CDATA[11292]]></category>
		<category domain="post_tag" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="post_tag" nicename="uvaoj"><![CDATA[UVaOJ]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869182]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e8%b4%aa%e5%bf%83dragon-of-loowateruvaoj-11292]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>春雪、黑雪姬&#124;加速世界数码绘一张&#124;动画上色法</title>
		<link>http://www.aemiot.com/smh-jssj-1.html</link>
		<pubDate>Wed, 22 Jan 2014 20:17:41 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1177</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>动画上色法</h1>
<a href="http://www.aemiot.com/wp-content/uploads/2014/01/jssj-xjcx-last.jpg"><img src="http://www.aemiot.com/wp-content/uploads/2014/01/jssj-xjcx-last.jpg" alt="黑雪姬、春雪--动画上色法" width="1053" height="744" class="size-full wp-image-1211" /></a> 

<h1>动画上色法--上色中说点什么</h1>
线稿还是一如既往的糟糕（表示在处理细节的时候发现不少线条太粗了，又跑回去修改线稿），膜拜大触╮(╯_╰)╭
对色彩还是不敏感，细节，细节...Orz！！！

<h1>动画上色法--学习小笔记</h1>
动画上色法--明暗界限清晰（虽然这图最后还是稍微添加了一些渐变，但是主体上还是动画上色法）。
小技巧--脸部红晕 -- 在新图层将画笔硬度设置为0，命中不透明度随压力变化，在大致位置画上红色块，然后使用高斯模糊滤镜展开。
小技巧--面积明暗调整（人物头发）-- 在新图层使用硬度为0的画笔，用钢笔画线，然后使用高斯模糊滤镜展开，调整图层混合模式变亮/变暗。
小技巧--局部渐变1 -- 选择涂抹工具，设置适当长度，延方向涂抹。
小技巧--局部渐变2 -- 先使用较暗的颜色填充区域，选择减淡工具（一般模式），逐渐擦亮，然后使用模糊工具展开。这种渐变在制造反光时的效果更容易。

[warning]
本次绘图是参照来源于网络的一张图，仅作为学习使用。请勿将图片用于其他用途。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1177</wp:post_id>
		<wp:post_date>2014-01-23 04:17:41</wp:post_date>
		<wp:post_date_gmt>2014-01-22 20:17:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>smh-jssj-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e4%b8%8a%e8%89%b2%e6%b3%95"><![CDATA[上色法]]></category>
		<category domain="post_tag" nicename="%e5%8a%a0%e9%80%9f%e4%b8%96%e7%95%8c"><![CDATA[加速世界]]></category>
		<category domain="post_tag" nicename="%e6%95%b0%e7%a0%81%e7%bb%98"><![CDATA[数码绘]]></category>
		<category domain="post_tag" nicename="%e6%98%a5%e9%9b%aa"><![CDATA[春雪]]></category>
		<category domain="category" nicename="mgzl"><![CDATA[美工之路]]></category>
		<category domain="post_tag" nicename="%e9%bb%91%e9%9b%aa%e5%a7%ac"><![CDATA[黑雪姬]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1211]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869183]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>更新Win8.1后浏览器无法打开网页解决办法</title>
		<link>http://www.aemiot.com/win8-1-program-kill-1.html</link>
		<pubDate>Wed, 29 Jan 2014 16:27:59 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1218</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="color: #333333;"><strong>最近有朋友反映在更新至Win8.1后出现了，浏览器无法打开网页但是可以登陆QQ的症状。</strong></span>

以下便是当时的<strong>解决办法</strong>：

1.以管理员身份进入命令行模式。

<a href="http://www.aemiot.com/wp-content/uploads/2014/01/20140130001927.jpg"><img class="size-full wp-image-1219" alt="以管理员身份进入命令行模式" src="http://www.aemiot.com/wp-content/uploads/2014/01/20140130001927.jpg" width="427" height="262" /></a>

按下WIN（徽标键）+R，出现如上图界面，勾选以管理员权限创建任务，然后输入CMD，点击确定，弹出一个命令行窗口。

2.输入netsh winsock reset，按照提示重启后即可。

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1218</wp:post_id>
		<wp:post_date>2014-01-30 00:27:59</wp:post_date>
		<wp:post_date_gmt>2014-01-29 16:27:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>win8-1-program-kill-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="qrs"><![CDATA[应用开发]]></category>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869184]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>入手树莓派&#124;Raspberry Pi</title>
		<link>http://www.aemiot.com/raspberry-pi-001.html</link>
		<pubDate>Wed, 19 Feb 2014 15:02:35 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1229</guid>
		<description></description>
		<content:encoded><![CDATA[过年期间入手树莓派一个，在ICKEY买的UK-B板，顺便把外围配件SD卡、USB-HUB、无线网卡买了，屏幕和HDMI转VGA适配器之类的就没打算买了。

<a href="http://www.aemiot.com/wp-content/uploads/2014/02/raspi-001.jpg"><img class="aligncenter size-full wp-image-1230" alt="raspi-001" src="http://www.aemiot.com/wp-content/uploads/2014/02/raspi-001.jpg" width="648" height="486" /></a>

基础参数：

CPU：700 MHz（超频到1.0GHz没问题）， ARM11（ARMv8构架）
内存：512M
支持GPU加速（高清视频无压力）
两个USB2.0接口
一个HDMI接口
一个百兆网卡接口
一个电源接口（mini-USB）
一个3.5mm耳机接口
一个RCA视频输出接口（家里旧显示器也能派上用场了）
一个SD卡槽

选择树莓派的理由是它相比PC机多了可编程的IO口，相比之前接触的STM32开发板具备较为完整的Linux,对于更加擅长软件的我这无疑是个好消息，相比于ARM11等学习开发板接口和价格更加合理，最为重要的是关于它的开源社区是个学习的好地方。选择它能够更加轻易实现自己的想法，这应该就是创客的追求吧。不过利用它更加深入的理解LINUX也是个不错的主意。

打算利用树莓派动手研究的方向:

1.家庭服务器/智能家居控制系统

树莓派耗电低，其硬件性能完全可以胜任家庭服务器的角色，而完整的Linux意味着可以更加轻易的使用USB无线网卡连上广域网，从而可以远距离用广域网访问到树莓派（由于没有公网IP，需要通过特殊方式完成信息传递），而树莓派利用硬件接口控制家庭线路或者让树莓派作为上位机控制下位机控制家庭线路。

2.给智能机器人提高更加高级的功能。完整的Linux使得opencv等库能更加便捷的使用，从而能更加轻松的实现功能。（这里同样可以使用网络加强信息采集）。

3.虚拟现实设备。其实这个自己设计的信息感应板直接把采集的信息发给PC也可以做~只是开源社区的力量能够帮助我们解决很多问题（PS：前面几个研究方向一样可以利用开源社区）。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1229</wp:post_id>
		<wp:post_date>2014-02-19 23:02:35</wp:post_date>
		<wp:post_date_gmt>2014-02-19 15:02:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>raspberry-pi-001</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="qrs"><![CDATA[应用开发]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1230]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869185]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>拓扑排序&#124;确定比赛名次&#124;HDU-1285</title>
		<link>http://www.aemiot.com/hdu-1285.html</link>
		<pubDate>Tue, 25 Feb 2014 07:34:31 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1239</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
<a title="http://acm.hdu.edu.cn/showproblem.php?pid=1285" href="http://acm.hdu.edu.cn/showproblem.php?pid=1285">确定比赛名次</a>
<h1>题目描述</h1>
有N个比赛队（1<=N<=500），编号依次为1，2，3，。。。。，N进行比赛，比赛结束后，裁判委员会要将所有参赛队伍从前往后依次排名，但现在裁判委员会不能直接获得每个队的比赛成绩，只知道每场比赛的结果，即P1赢P2，用P1，P2表示，排名时P1在P2之前。现在请你编程序确定排名。
<h1>Input</h1>
输入有若干组，每组中的第一行为二个数N（1<=N<=500），M；其中N表示队伍的个数，M表示接着有M行的输入数据。接下来的M行数据中，每行也有两个整数P1，P2表示即P1队赢了P2队。
<h1>Output</h1>
给出一个符合要求的排名。输出时队伍号之间有空格，最后一名后面没有空格。
其他说明：符合条件的排名可能不是唯一的，此时要求输出时编号小的队伍在前；输入数据保证是正确的，即输入数据确保一定能有一个符合要求的排名。
<h1>Sample Input</h1>
4 3
1 2
2 3
4 3
<h1>Sample Output</h1>
1 2 4 3
<h1>Author</h1>
SmallBeer(CML)
<h1>解题思路</h1>
拓扑排序即可。
但是注意“输出时编号小的队伍在前”这个要求，在刘汝佳的《算法竞赛入门》提到了试用DFS的方式去拓扑排序。但是这个这样的拓扑排序有如下缺陷：
1.速度较慢
2.难以控制顺序
关于难以控制顺序这一点，表现为即使在DFS使用for循环从小到大节点试探，但是遇到类似这样的输入数据：
5 4
5 1
3 5
2 5
4 1
你会先访问到4，然后是通过5访问到2和3，最终输出：4 2 3 5 1。这显然不符合编号小的队伍在前这个要求。
而使用经典的拓扑排序算法（不断进行如下操作，取出一个入度为0的节点，并且将和该节点关联的边删除）。
在经典的拓扑排序算法中，可以通过维护一个入度线性表来实现。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;cstring&gt;
using namespace std;

int G[1000][1000];
int flag[1000];
int topo[1000];
int dg[1000];
int topoNum;

int topoSort(int n)
{
	//入度表预处理
	for(int i=0; i&lt;n; ++i)
		for(int j=0; j&lt;n; ++j)
			if(G[j][i])
				++dg[i];
	for(int k=0; k&lt;n; ++k)
		for(int i=0; i&lt;n; ++i)
			if(!flag[i] &amp;&amp; dg[i] == 0)
			{
				for(int j=0; j&lt;n; ++j)
					if(G[i][j])
						--dg[j];
				topo[topoNum++] = i;
				flag[i] = 1;
				break;
			}
	if(topoNum == n)
		return 1;
	else
		return 0;//存在环
}

int main()
{
	int N,M,t1,t2;
	while(cin &gt;&gt; N &gt;&gt; M)
	{
		topoNum = 0;
		memset(G,0,sizeof(G));
		memset(flag,0,sizeof(flag));
		memset(dg,0,sizeof(dg));
		for(int i=0; i&lt;M; ++i)
		{
			cin &gt;&gt; t1 &gt;&gt; t2;
			G[t1-1][t2-1] = 1;
		}
		if(topoSort(N))
		{
			for(int i=0; i&lt;N; ++i)
				if(i == 0)
					cout &lt;&lt; topo[i]+1;
				else
					cout  &lt;&lt; &quot; &quot; &lt;&lt; topo[i]+1;
					cout &lt;&lt; endl;
		}
		else
			cerr &lt;&lt; &quot;Loop&quot; &lt;&lt; endl;
	}
	return 0;
}
[/code]

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1239</wp:post_id>
		<wp:post_date>2014-02-25 15:34:31</wp:post_date>
		<wp:post_date_gmt>2014-02-25 07:34:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hdu-1285</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="1285"><![CDATA[1285]]></category>
		<category domain="post_tag" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="post_tag" nicename="hdu"><![CDATA[hdu]]></category>
		<category domain="post_tag" nicename="%e6%8b%93%e6%89%91%e6%8e%92%e5%ba%8f"><![CDATA[拓扑排序]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>duoshuo_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[1180457673812869186]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>横向打印二叉树&#124;历届试题&#124;蓝桥杯</title>
		<link>http://www.aemiot.com/lanqiao-001.html</link>
		<pubDate>Sat, 01 Mar 2014 13:33:43 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1248</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
<a href="http://lx.lanqiao.org/problem.page?gpid=T34" title="http://lx.lanqiao.org/problem.page?gpid=T34">横向打印二叉树</a>
<h1>题目描述</h1>
二叉树可以用于排序。其原理很简单：对于一个排序二叉树添加新节点时，先与根节点比较，若小则交给左子树继续处理，否则交给右子树。
当遇到空子树时，则把该节点放入那个位置。
比如，10 8 5 7 12 4 的输入顺序，应该建成二叉树如下图所示，其中.表示空白。
<pre>
...|-12
10-|
...|-8-|
.......|...|-7
.......|-5-|
...........|-4
</pre>
本题目要求：根据已知的数字，建立排序二叉树，并在标准输出中横向打印该二叉树。
<h1>Input</h1>
输入数据为一行空格分开的N个整数。 N<100，每个数字不超过10000。
输入数据中没有重复的数字。
<h1>Output</h1>
输出该排序二叉树的横向表示。为了便于评卷程序比对空格的数目，请把空格用句点代替。
<h1>Sample Input 1</h1>
10 5 20
<h1>Sample Output 1</h1>
<pre>
...|-20
10-|
...|-5
</pre>
<h1>Sample Input 2</h1>
5 10 20 8 4 7
<h1>Sample Output 2</h1>
<pre>
.......|-20
..|-10-|
..|....|-8-|
..|........|-7
5-|
..|-4
</pre>
<h1>解题思路</h1>
二叉搜索树加遍历，输出格式控制略麻烦。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;cstdio&gt;
using namespace std;

char G[110][450]={0};
int gp = 0;
char buf[450];

int max_clen = 0;
struct T
{
	/* data */
	T(): val(0),ltree(NULL),rtree(NULL) {}
	int val,c,len,no;/*值，横向树数字开始位置，长度,图行号*/
	T *ltree,*rtree;
	//~T() { cout &lt;&lt; &quot;del &quot; &lt;&lt; val &lt;&lt; endl;}
};

T* make(T* node, int val, int c)
{
	if(node == NULL)
	{
		node = new T;
		node-&gt;c = c;
		node-&gt;len = sprintf(buf,&quot;%d&quot;,val);
		node-&gt;val = val;
		if(c+node-&gt;len &gt; max_clen)
			max_clen = c + node-&gt;len;
	}
	else
	{
		if(val &lt; node-&gt;val)
			node-&gt;ltree = make(node-&gt;ltree, val, c+3+node-&gt;len);
		else
			node-&gt;rtree = make(node-&gt;rtree, val, c+3+node-&gt;len);
	}
	return node;
}

void print(T* node)
{
	if(node != NULL)
		cout &lt;&lt; node-&gt;val &lt;&lt; endl;
	if(node-&gt;ltree != NULL)
		print(node-&gt;ltree);
	if(node-&gt;rtree != NULL)
		print(node-&gt;rtree);
}

void hprint(T* node)
{
	if(node-&gt;rtree != NULL)
		hprint(node-&gt;rtree);
	if(node != NULL)
	{
		//cout &lt;&lt; node-&gt;val &lt;&lt; &quot;-&quot;&lt;&lt; node-&gt;c &lt;&lt; endl;
		for(int i=0; i&lt;node-&gt;c; ++i)
			G[gp][i] = '.';	
		sprintf(G[gp]+node-&gt;c,&quot;%d&quot;,node-&gt;val);
		node-&gt;no = gp;
		++gp;
	}
	if(node-&gt;ltree != NULL)
		hprint(node-&gt;ltree);
}
void linkTree(T* node)
{
	if(node-&gt;rtree != NULL)
	{
		G[node-&gt;no][node-&gt;c+node-&gt;len] = '-';
		for(int i=node-&gt;rtree-&gt;no; i&lt;=node-&gt;no; ++i)
			G[i][node-&gt;c+node-&gt;len+1] = '|';
		G[node-&gt;rtree-&gt;no][node-&gt;c+node-&gt;len+2] = '-';
		linkTree(node-&gt;rtree);
	}
	if(node != NULL)
	{

	}
	if(node-&gt;ltree != NULL)
	{
		G[node-&gt;no][node-&gt;c+node-&gt;len] = '-';
		for(int i=node-&gt;no; i&lt;=node-&gt;ltree-&gt;no; ++i)
			G[i][node-&gt;c+node-&gt;len+1] = '|';
		G[node-&gt;ltree-&gt;no][node-&gt;c+node-&gt;len+2] = '-';
		linkTree(node-&gt;ltree);
	}
}

void printTree()
{
	for(int i=0; i&lt;gp; ++i)
	{
		for(int j=0; j&lt;max_clen; ++j)
		{
			if(G[i][j])
				cout &lt;&lt; G[i][j];
		}
		cout &lt;&lt; endl;
	}
}

T* clear(T* node)
{
	if(node-&gt;ltree != NULL)
		node-&gt;ltree = clear(node-&gt;ltree);
	if(node-&gt;rtree != NULL)
		node-&gt;rtree = clear(node-&gt;rtree);
	if(node != NULL)
		delete node;
	return NULL;
}

int main()
{
	T* root = NULL;
	int t;

	while(cin &gt;&gt; t)
	{
		root = make(root,t,0);
	}
	//cout &lt;&lt; &quot;------------&quot; &lt;&lt; endl;
	//print(root);
	//cout &lt;&lt; &quot;------------&quot; &lt;&lt; endl;
	hprint(root);
	linkTree(root);
	printTree();
	//cout &lt;&lt; &quot;------------&quot; &lt;&lt; endl;
	root = clear(root);
}
[/code]

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1248</wp:post_id>
		<wp:post_date>2014-03-01 21:33:43</wp:post_date>
		<wp:post_date_gmt>2014-03-01 13:33:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lanqiao-001</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%8e%86%e5%b1%8a%e8%af%95%e9%a2%98"><![CDATA[历届试题]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e7%bb%83%e4%b9%a0%e7%b3%bb%e7%bb%9f"><![CDATA[练习系统]]></category>
		<category domain="post_tag" nicename="%e8%93%9d%e6%a1%a5%e6%9d%af"><![CDATA[蓝桥杯]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ACM集训队2014上半年第一次练习解题报告</title>
		<link>http://www.aemiot.com/acmteam-2014-001.html</link>
		<pubDate>Sun, 02 Mar 2014 08:31:09 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1252</guid>
		<description></description>
		<content:encoded><![CDATA[题目以及所有源码，在博文尾部附有下载链接。

[toggle title="第一题题解"]
<h1>解题思路</h1>
按照题目图片中的xyz轴建立三维空间坐标系,给各方块编号，从[0][0][0]-[1][1][1],每次旋转x,y或z实质上就是对固定x=1,y=1或z=1构成的平面顺时针旋转。
这次旋转具体可拆分为2步，首先是小方块自转，方块位置轮换。按照这个思路即可完成模拟从而AC。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
const int g = 0;
const int r = 1;
const int w = 2;
const int b = 3;
const int h = 4;
const int y = 5;
const int hide = 6;
struct T
{
	/* data */
	int t,b,l,r,f,u;
	void set(int at,int ab,int al,int ar,int af,int au)
	{
		t = at;
		b = ab;
		l = al;
		r = ar;
		f = af;
		u = au;
	}
	void rotate_x()
	{
		int temp;
		temp = t;
		t = l;
		l = b;
		b = r;
		r = temp;
	}
	void rotate_y()
	{
		int temp;
		temp = f;	
		f = b;
		b = u;
		u = t;
		t = temp;
	}
	void rotate_z()
	{
		int temp;
		temp = f;
		f = r;	
		r = u;
		u = l;
		l = temp;
	}
};

T A[2][2][2];

//void set(int at,int ab,int al,int ar,int af,int au);
	
void def()
{
	A[0][0][0].set(hide,y,h,hide,hide,b);
	A[0][1][0].set(hide,y,hide,r,hide,b);
	A[1][1][0].set(hide,y,hide,r,g,hide);
	A[1][0][0].set(hide,y,h,hide,g,hide);
	
	A[0][0][1].set(w,hide,h,hide,hide,b);
	A[0][1][1].set(w,hide,hide,r,hide,b);
	A[1][1][1].set(w,hide,hide,r,g,hide);
	A[1][0][1].set(w,hide,h,hide,g,hide);
}

void opertor_x()
{
	A[1][1][0].rotate_x();
	A[1][0][0].rotate_x();
	A[1][0][1].rotate_x();
	A[1][1][1].rotate_x();
	T temp = A[1][1][1];
	A[1][1][1] = A[1][0][1];
	A[1][0][1] = A[1][0][0];
	A[1][0][0] = A[1][1][0];
	A[1][1][0] = temp;
}

void opertor_y()
{
	A[0][1][0].rotate_y();
	A[1][1][0].rotate_y();
	A[1][1][1].rotate_y();
	A[0][1][1].rotate_y();
	T temp = A[0][1][1];
	A[0][1][1] = A[1][1][1];
	A[1][1][1] = A[1][1][0];
	A[1][1][0] = A[0][1][0];
	A[0][1][0] = temp;
}

void opertor_z()
{
	A[0][0][1].rotate_z();
	A[0][1][1].rotate_z();
	A[1][1][1].rotate_z();
	A[1][0][1].rotate_z();
	T temp = A[1][0][1];
	A[1][0][1] = A[1][1][1];
	A[1][1][1] = A[0][1][1];
	A[0][1][1] = A[0][0][1];
	A[0][0][1] = temp;
}
void print(int c)
{
	switch(c)
	{
		case 0: cout &lt;&lt; &quot;绿&quot;; break;
		case 1: cout &lt;&lt; &quot;红&quot;; break;
		case 2: cout &lt;&lt; &quot;白&quot;; break;
		case 3: cout &lt;&lt; &quot;蓝&quot;; break;
		case 4: cout &lt;&lt; &quot;橙&quot;; break;
		case 5: cout &lt;&lt; &quot;黄&quot;; break;
		case 6: break;
	}
}

int main(int argc, char const *argv[])
{
	/* code */
	def();
	string str;
	cin &gt;&gt; str;
	for(int i=0; i&lt;str.size(); ++i)
	{
		if(str[i]=='x')
			opertor_x();
		if(str[i]=='y')
			opertor_y();
		if(str[i]=='z')
			opertor_z();
	}
	print(A[1][1][1].f); 
	cout &lt;&lt; &quot; &quot;;
	print(A[1][1][1].r);
	cout &lt;&lt; &quot; &quot;;
	print(A[1][1][1].t); 
	cout &lt;&lt; endl;	
	return 0;
}
[/code]
[/toggle]

[toggle title="第二题题解"]
<h1>解题思路</h1>
文件操作+排序+遍历
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;fstream&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
using namespace std;

struct recode
{
	/* data */
	string code;
	string name;
	int unit;
	int num;
	long money;
};

vector&lt;recode&gt; v;

bool compare(recode a,recode b)
{
	if(a.code != b.code)
	{
		return a.code &lt; b.code;
	}
	return a.money &gt; b.money;
}

string max_code;
long long max_money;

int main(int argc, char const *argv[])
{
	/* code */
	ifstream is(&quot;A_01_in.dat&quot;);
	ofstream os(&quot;A_01_out.dat&quot;);
	int n;
	recode t;
	string st;
	int it;
	long long lt;
	while(is &gt;&gt; n)
	{
		v.clear();
		for(int i=0; i&lt;n; ++i)
		{
			is &gt;&gt; st;
			t.code = st;
			is &gt;&gt; st;
			t.name = st;
			is &gt;&gt; it;
			t.unit = it;
			is &gt;&gt; it;
			t.num = it;
			is &gt;&gt; lt;
			t.money = lt;
			v.push_back(t);
		}
		sort(v.begin(),v.end(),compare);
		int t_money = 0;
		for(int i=0; i != v.size(); ++i)
		{
			if(i==0)
			{
				t_money = v[i].money;
				max_code = v[i].code;
				max_money = t_money;
			}
			else
			{
				if(v[i].code == v[i-1].code)
				{
					t_money += v[i].money;
				}
				else
				{
					t_money = v[i].money;
				}
				if(t_money &gt; max_money)
				{
					max_code = v[i].code;
					max_money = t_money;
				}
			}
		}
		for(int i=0; i != v.size(); ++i)
		{
			os &lt;&lt; v[i].code &lt;&lt; &quot;,&quot;
				 &lt;&lt; v[i].name &lt;&lt; &quot;,&quot;
				 &lt;&lt; v[i].unit &lt;&lt; &quot;,&quot;
				 &lt;&lt; v[i].num  &lt;&lt; &quot;,&quot;
				 &lt;&lt; v[i].money&lt;&lt; endl;
		}
		os &lt;&lt; max_code &lt;&lt; endl;
	}
	is.close();
	os.close();
	return 0;
}
[/code]
[/toggle]

[toggle title="第三题题解"]
<h1>解题思路</h1>
合理枚举，适当优化。为了避免输出重复的一对,例如<a,b> <b,a>，可以使用标志数组，或者是强加次序(即假定a小于b或a大于b)。我的代码采用的是标志数组方案。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
using namespace std;
int flag[5002] = {0};
int main()
{
	for(int a = 1; a &lt; 5000; ++a)
	{
		if(flag[a]) continue;
		int sum = 0;
		for(int i=1; i&lt;a; ++i)
			if(a%i == 0)
				sum += i;
		if (a==sum || sum &gt; 5000)
			continue;
		else
		{
			int t = 0;
			for(int i=1; i&lt;sum; ++i)
				if(sum%i == 0)
					t += i;
			if(t == a)
			{
				flag[a] = flag[sum] = 1;
				cout &lt;&lt; '(' &lt;&lt; a &lt;&lt; ',' &lt;&lt; sum &lt;&lt; ')' &lt;&lt; endl;
			}
		}
	}
	return 0;
}
[/code]
[/toggle]

[toggle title="第四题题解"]
<h1>解题思路</h1>
贪心。可以参考<a href="http://www.aemiot.com/jxustnc-2013-xss0.html" title="2013江西理工大学软件学院ACM新生热身赛题解" target="_blank">2013江西理工大学软件学院ACM新生热身赛题解</a>第六题和<a href="http://www.aemiot.com/delete-number-problem.html" title="删除数字问题的数学证明" target="_blank">删除数字问题的数学证明</a>，不过这里因为数据较大的问题，要使用long long类型或者干脆当字符处理。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
using namespace std;

char del(char num[], int len)
{
	for(int i=0; i&lt;len-1; ++i)
		if(num[i]&lt;num[i+1])
		{	
			char t = num[i];
			strcpy(num+i,num+1+i);
			return t;
		}
	char t = num[len-1];
	num[len-1] = '&#92;&#48;';
	return t;
}

int main()
{
	long long n = 9208134618538LL;
	char num[20];
	sprintf(num,&quot;%lld&quot;,n);
	for(int i=0; i&lt;10; ++i)
	{
		cout &lt;&lt; del(num,strlen(num)) &lt;&lt; &quot;,&quot;
		     &lt;&lt; num &lt;&lt; endl;
	}
	return 0;
}
[/code]
[/toggle]

[toggle title="第五题题解"]
<h1>解题思路</h1>
排列组合或递推。(其实这题是HDU-2190 悼念512汶川大地震遇难同胞——重建希望小学)

<strong>排列组合</strong>:
res = C[k,0]*2^0 + C[(k-1),1]*2^1 + C[(k-2),2]*2^2 + ... + C[(k-k/2),k/2]*2^(k/2)
公式中除法为整除。
公式可解释为：在k*3的格子中放n个2*2块有C[k-n,n]*2^n种方法，对于k*3的格子，至少放0个2*2块，至多放k/2个2*2块，因此各项累加就能得到最后的答案，值得注意的就是编写计算组合公式的时候要考虑好数据范围，当然这道题数据范围不是问题。
其中关于C[k-n,n]是在1*k的方块中选择n个不相交的1*2方块，可理解为在k-n个1*1方块中选择n个变为1*2方块。

<strong>递推一</strong>:
F[n] = F[n-1] + 2*F[n-2]
递推式解释：对于n*3的格子,其铺设方案要么是在(n-1)*3的格子的基础上加1*3个格子，在1*3的格子上铺设方案有1种，要么是在(n-2)*3的格子基础上加2*3个格子，在2*3个格子上铺设方案有3种，但因为用6个1*1块铺设所构成的整体方案其实已经算在(n-1)*3的格子上加1*3格子的方案中了，因此有效方案只有2种。所以得到如上的递推式。

<strong>递推二</strong>:
F[n] = 2*F[n-1] + (-1)^n
关于这个公式，是在看到了一些数之后猜出来的，并且在一段时间内既没有找到合理的形象解释，也没有合理的推导(事后，发现我绝对是脑子短路了~！)
其实,
F[n] = 2*F[n-1] +(-1)^n
F[n-1] = 2*F[n-2] +(-1)^(n-1)
左右相加得：F[n] = F[n-1] + 2*F[n-2] + 0
这不就是之前那个递推式么...不过这个形式比较容易推导出通项公式。

其通项公式计算过程(中学阶段的方法)为：
F[n+1] = 2*F[n] - (-1)^n
等式两边同除(-1)^(n+1)得
F[n+1]/(-1)^(n+1) = (-2)*F[n]/(-1)^(n+1) + 1
令T[n] = F[n]/(-1)^n得
T[n+1] = (-2)*T[n] + 1
此等式必然符合 T[n+1]+k = (-2)*(T[n]+k)
解得k = - 1/3
即T[n]-1/3是以-2为距离的等比数列
将F[n]回代T[n]得通项公式(化简后) F[n] = [(-1)^n + 2^(n+1)] / 3

<h1>我的代码--排列组合版本</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
using namespace std;

unsigned long long J2[30] = {0};

/*V中选N个*/
unsigned long long C(int v,int n)
{
	unsigned long long res = 1;
	if(n==0) return 1;
	for(int i=0; i&lt;n; ++i)
	{
		res *= v-i;
	}
	for(int i=2; i&lt;=n; ++i)
	{
		res /= i;
	}
	return res;
}
void calc2()
{
	J2[0] = 1;
	for(int i=1; i&lt;30; ++i)
	{
		J2[i] = J2[i-1] * 2;
	}
}

int main()
{
	int k,T;
	calc2();
	cin &gt;&gt; T;
	while(T--)
	{
		unsigned long long res = 1;
		cin &gt;&gt; k;
		for(int i=1; i&lt;=k/2; ++i)
			res += C(k-i,i)*J2[i];
		cout &lt;&lt; res &lt;&lt; endl;
	}
	return 0;
}
[/code]

<h1>我的代码--递推版本</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
using namespace std;

int main(void)
{
    int n;
    int m;
    int a[31];
    a[1] = 1;
    a[2] = 3;
    for(n=3; n&lt;31; ++n)
        a[n] = a[n-1] + 2*a[n-2];
    cin &gt;&gt; n;
    while(n--)
    {
        cin &gt;&gt; m;
        cout &lt;&lt; a[m] &lt;&lt; endl;
    }
    return 0;
}
[/code]
[/toggle]

[toggle title="第六题题解"]
<h1>解题思路</h1>
约瑟夫环问题。
这里直接模拟,没什么好说的，实现的话，可以采用数组的方式（出列的做好标记，下次到来直接跳过，数组末尾再回到头部，如此循环即可）和链表的方式（将每个结点先记录自己的编号，随后直接删除即可，到链表尾再回到链表头部，如此循环即可，当然采用循环链表避免自己对指针的控制就更好了）。（后面我的代码中实现了数组和循环链表的方案。）

<h1>我的代码--数组版本</h1>
[code lang="cpp"]
#include &lt;iostream&gt;

using namespace std;
int A[10000] = {0};
int main(void)
{
    int n,m;
    cin &gt;&gt; n &gt;&gt; m;
    int t = n;
    int p = 1;//下一个人
    int num = 1;//将要报的数字
    while(t)
    {
        while(A[p])
        {
            if(p == n)
                p = 1;
            else
                ++p;
        } 
        //报数字
        if(num == m)
        {
            //出列
            cout &lt;&lt; p &lt;&lt; &quot; &quot;;
            A[p] = 1;
            --t;
            num = 1;
        }
        else
            ++num;

        if(p == n)
            p = 1;
        else
            ++p;
    }
    return 0;
}
[/code]

<h1>我的代码--循环链表版本</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
using namespace std;
struct T
{
    int id;
    T* next;
};

T* build(int n)
{
    if(n==0) return NULL;
    T* head = new T;
    head-&gt;id = 1;
    head-&gt;next = NULL;
    T* p = head;
    for(int i=2; i&lt;=n; ++i)
    {
        p-&gt;next = new T;
        p = p-&gt;next;
        p-&gt;id = i;
        p-&gt;next = NULL;
    }
    p-&gt;next = head;
    return head;
}

T* erase_next(T* node)
{
    T* t = node-&gt;next-&gt;next;
    if(node-&gt;next != node)
    {
        delete node-&gt;next;
        node-&gt;next = t;
        return node;
    }
    else
    {
        delete node;
        return NULL;
    }
}

int main(void)
{
    int n,m;
    cin &gt;&gt; n &gt;&gt; m;
    T* head = build(n);
    T* p = head;
    int num=1;
    while(1)
    {
        if(num == m)
        {
            num = 1;
        }
        else
        {
            ++num;
            if(num == m)
            {
                cout &lt;&lt; p-&gt;next-&gt;id &lt;&lt; &quot; &quot;;
                p = erase_next(p);
                if(p == NULL) break;
            }
            p = p-&gt;next;
        }
    }
    return 0;
}
[/code]
[/toggle]

[toggle title="第七题题解"]
<h1>解题思路</h1>
k个人，那么将会分成v=(k-1)/8+1组(这个公式是k/8.0向上取整纯整数版本，算是一个小技巧吧)。
k个人分成v组,每组的人数是k/v或者k/v+1。因为不可能出现人数互相不同的三个组，试想一下，假如出现了，为什么不从最大的组抽人给最小的组呢。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
using namespace std;

int main()
{
	int k;
	cin &gt;&gt; k;
	int dv = (k-1)/8+1;
	if(k%dv)
	{
		for(int i=0; i&lt;k%dv; ++i)
			cout &lt;&lt; k/dv+1 &lt;&lt; endl;
		for(int i=k%dv; i&lt;dv; ++i)
			cout &lt;&lt; k/dv &lt;&lt; endl;
	}
	else
	{
		for(int i=0; i&lt;dv; ++i)
			cout &lt;&lt; k/dv &lt;&lt; endl;
	}
	return 0;
}
[/code]
[/toggle]

[toggle title="第八题题解"]
<h1>解题思路</h1>
开辟一个二维数组，这就相当于是在绘图。据规律绘制即可。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
using namespace std;
int A[110][110] = {0};
int main()
{
	int n;
	cin &gt;&gt; n;
	for(int k=0; k&lt;n/2+1; k=k+2)
	{
		for(int i=k; i&lt;n-k; ++i)
		{
			A[i][k] = 1;
			A[i][n-k-1] = 1;
		}
		for(int j=k; j&lt;n-k; ++j)
		{
			A[k][j] = 1;
			A[n-k-1][j] = 1;
		}
	}
	for(int i=0; i&lt;n; ++i)
	{
		for(int j=0; j&lt;n; ++j)
			if(A[i][j])
				cout &lt;&lt; '*';
			else
				cout &lt;&lt; ' ';
		cout &lt;&lt; endl;
	}
	return 0;
}
[/code]
[/toggle]

[toggle title="第九题题解"]
<h1>解题思路</h1>
纯模拟。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
using namespace std;

int main()
{
	char str[211];
	char res[600];
	gets(str);
	int pn = 0;
	int len = strlen(str);
	for(int i=0; i&lt;len; ++i)
	{
		if(str[i]&gt;='a' &amp;&amp; str[i]&lt;='z')//is word
		{
			if(i==0 || (i&gt;0 &amp;&amp; str[i-1]==' '))
				res[pn++] = str[i]-'a'+'A';
			else
				res[pn++] = str[i];
		}
		if(str[i]&gt;='0' &amp;&amp; str[i]&lt;='9')
		{
			if(i&gt;0 &amp;&amp; str[i-1]&gt;='a' &amp;&amp; str[i-1]&lt;='z')
				res[pn++] = '_';
			res[pn++] = str[i];
			if(i&lt;len-1 &amp;&amp; str[i+1]&gt;='a' &amp;&amp; str[i+1]&lt;='z')
				res[pn++] = '_';
		}
		if(str[i]==' ')
		{
			if(i&gt;0 &amp;&amp; str[i-1] != ' ')
				res[pn++] = ' ';
		}
	}
	res[pn] = '&#92;&#48;';
	cout &lt;&lt; res &lt;&lt; endl;
	return 0;
}
[/code]
[/toggle]

[toggle title="第十题题解"]
<h1>解题思路</h1>
预处理一个素数表，然后枚举一对素数，计算出其中的距离，然后让较大的素数加上这段距离得到一个新的数，判断这个新的数是否还在范围内并且是素数（期间随时保存当前发现的最长等差素数组）。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;vector&gt;
using namespace std;

vector&lt;int&gt; v;
vector&lt;int&gt; link;
int flag[2000] = {0};

void def(int l,int r)
{
	v.clear();
	for(int i=2; i&lt;r; ++i)
	{
		int is_prime = 1;
		for(int k=0; k!=v.size(); ++k)
		{
			if(i%v[k] == 0)
			{
				is_prime = 0;
				break;
			}
		}
		if(is_prime)
			v.push_back(i);
	}
}

int main()
{
	int l = 100, r = 1000;
	int max_len = 2;
	def(l,r);
	for(int i=0; i!=v.size(); ++i)
		flag[v[i]] = 1;
	for(int i=0; i!=v.size(); ++i)
	{
		for(int j=i; j!=v.size(); ++j)
		{
			if(i==j) continue;
			int len = 2;
			int ok = 1;
			int tex = v[j]-v[i];
			int lt = v[j];
			while(ok &amp;&amp; lt&lt;=r)
			{
				if(flag[lt+tex])
				{
					++len;
					if(len &gt; max_len)
					{
						max_len = len;
						link.clear();
						for(int k=0; k&lt;len; ++k)
							link.push_back(v[i]+k*tex);
					}
					lt = lt+tex;
				}
				else
					ok = 0;
			}
		}
	}
	cout &lt;&lt; max_len &lt;&lt; endl;
	for(int i=0; i!=link.size(); ++i)
		cout &lt;&lt; link[i] &lt;&lt; &quot; &quot;;
	return 0;
}
[/code]
[/toggle]

<h1>题目及源码下载</h1>
<ul>
    <li>[download link="http://www.aemiot.com/download/acmteam-2014-001exm.rar"]<span style="color: #050505;"><big><b>&nbsp;&nbsp;&nbsp;本地下载</b></big></span>[/download]</li>
</ul>

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1252</wp:post_id>
		<wp:post_date>2014-03-02 16:31:09</wp:post_date>
		<wp:post_date_gmt>2014-03-02 08:31:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>acmteam-2014-001</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e8%a7%a3%e9%a2%98%e6%8a%a5%e5%91%8a"><![CDATA[解题报告]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Graphivz中文乱码的解决过程&#124;关于编码的那些事</title>
		<link>http://www.aemiot.com/graphivz-001.html</link>
		<pubDate>Wed, 05 Mar 2014 14:56:28 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1279</guid>
		<description></description>
		<content:encoded><![CDATA[我在Windows上装了Graphivz，当我将中文输入进Dot文件中，并运行指令：
[code]
dot grep.dot -Tpng -o grep.png 
[/code]
试图生成例图时发现中文无法正常显示。
于是首先就想到了Windows对新建的文本文档保存默认是用ANSI(GBK)编码的，并且给出了警告：
<strong>Warning: Invalid 2-byte UTF8 found in input of graph G - treated as Latin-1. Perhaps "-Gcharset=latin1" is needed?</strong>

于是，我试图将文档编码改为UTF8，于是我用notepad.exe打开文档另存为，然后编码选择UTF8，重新运行指令，得到如下警告：
<strong>Warning: grep.dot: syntax error in line 1 near '锘縟igraph'。</strong>

接着我在互联网上查找资料，不少资料是说需要将文档用UTF8保存，接着设置顶点和边的文字描述字体为中文字体，即：
[code]
edge [fontname=&quot;FangSong&quot;];
node [shape=box, fontname=&quot;SimSun&quot; size=&quot;20,20&quot;];
[/code]
或者
或者用命令行参数
<strong>-Nfontname="Adobe Kaiti Std"</strong>。字体名可以用fc-list命令得到的任意字体名，也可以指定字体路径。

接着我加上了上述语句，依然失败，而且之前错误提示那两个乱码的字符覆盖了原本的d，这个很让我在意，接着我看到了一篇文章，作者说自己用Java生成的UTF8文本文档就可以正确使用中文，而新建文本文档写的代码就不可以。这时候我想到了之前一直没有在意的一个细节，<strong>BOM（Byte order Mark）</strong>，它会导致文档前多3个字节（这三个字节是微软擅自加上去的），那么如果dot解析不知道多了这3个字节，那么就会连带d字符一起解释为2个字符，那么这也就可以解释之前的警告了。想到这里，我立刻将编码改成了无BOM的标准UTF8文档，执行指令，这次没有给出任何警告，并且成功得到了含有中文的图。
[code]
digraph G {
edge [fontname=&quot;simsun&quot;];
node [fontname=&quot;simsun&quot;];
&quot;编码&quot;-&gt;&quot;GBK&quot;;
&quot;编码&quot;-&gt;&quot;UTF-8&quot;;
&quot;编码&quot;-&gt;&quot;UTF-8(BOM)&quot;;
}
[/code]

[caption id="attachment_1288" align="aligncenter" width="383"]<a href="http://www.aemiot.com/wp-content/uploads/2014/03/graphivz-001.gif"><img src="http://www.aemiot.com/wp-content/uploads/2014/03/graphivz-001.gif" alt="Graphivz显示中文示例图Graphivz显示中文示例图Graphivz显示中文示例图" width="383" height="155" class="size-full wp-image-1288" /></a>[/caption]

不过至今有一个比较麻烦的事情就是，无法很好的在输出ps格式的时候保持中文，貌似和ps格式本身有关。
在linux下可以用cairo引擎来处理：
[code]
dot -Tps:cairo chs.dot &gt; chs.ps
[/code]
此外，输出pdf也是个不错的方案。

关于BOM更多内容可以看这篇文章：
<a href="http://blog.163.com/li_wangyuan/blog/static/52060062010511151146/" title="http://blog.163.com/li_wangyuan/blog/static/52060062010511151146/">http://blog.163.com/li_wangyuan/blog/static/52060062010511151146/</a> 
(ps:这文章中提到的无BOM会被notepad.exe识别为ANSI，这点在WIN7中已经能正确识别了)

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1279</wp:post_id>
		<wp:post_date>2014-03-05 22:56:28</wp:post_date>
		<wp:post_date_gmt>2014-03-05 14:56:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>graphivz-001</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="graphivz"><![CDATA[Graphivz]]></category>
		<category domain="post_tag" nicename="%e4%b8%ad%e6%96%87%e4%b9%b1%e7%a0%81"><![CDATA[中文乱码]]></category>
		<category domain="category" nicename="jyzt"><![CDATA[经验之谈]]></category>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1288]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>最大公约数&#124;Cutting Sausages&#124;Sicily-10330</title>
		<link>http://www.aemiot.com/sicily-10330.html</link>
		<pubDate>Tue, 11 Mar 2014 05:50:07 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1303</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
<a href="http://soj.me/10330" title="http://soj.me/10330">Cutting Sausages</a>
<h1>题目描述</h1>
Mirko has given up on the difficult coach job and switched to food tasting instead. Having skipped breakfast like a professional connoisseur, he is visiting a Croatian cured meat festival. The most renowned cook at the festival, Marijan Bajs, has prepared N equal sausages which need to be distributed to M tasters such that each taster gets a precisely equal amount. He will use his trusted knife to cut them into pieces. 
In order to elegantly divide the sausages, the number of cuts splitting individual sausages must be as small as possible. For instance, if there are two sausages and six tasters (the first test case below), it is sufficient to split each sausage into three equal parts, making a total of four cuts. On the other hand, if there are three sausages and four tasters (the second test case below), one possibility is cutting off three quarters of each sausage. Those larger parts will each go to one of the tasrers, while the fourth taster will get the three smaller pieces (quarters) left over.
Mirko wants to try the famous sausages, so he volunteered to help Bajs. Help them calculate the minimum total number of cuts needed to carry out the desired division. 
<h1>Input</h1>
The first and only line of input contains two positive integers, N and M (1 ≤ N, M ≤ 100), the number of sausages and tasters, respectively.
<h1>Output</h1>
The first and only line of output must contain the required minimum number of cuts.
<h1>Sample Input 1</h1>
样例1：
2 6
样例2：
3 4
样例3：
6 2
<h1>Sample Output 1</h1>
样例1：
4
样例2：
3
样例3：
0
<h1>Source</h1>
COCI 2013.9/2014年每周一赛第一场
<h1>题目大意</h1>
有n根一样的香肠要切成若干段，现在要分给m个人，使每个人得到的一样多，至少切几刀？
<h1>解题思路</h1>
<!--
首先可以知道，N等于M时，一刀都不用切；N大于M时，当N是M的倍数时，一刀都不用切；当N大于M时，可以每人给(N div M)根,将N缩小到比M小；当N小于M时，如果M是N的整数倍，那么每根香肠分成M/N根就可以了，即需要切M/N-1刀，如果M不是N的整数倍，那么我们可以多切一些，即把每根香肠分成(M div N)+1根，即需要切M/N刀，将M=M%N（这个不明白，求大神指点），继续迭代就能得到答案。
-->
<a href="http://www.aemiot.com/wp-content/uploads/2014/03/sicily-10330.gif"><img src="http://www.aemiot.com/wp-content/uploads/2014/03/sicily-10330.gif" alt="西西里岛10330解题示意图" width="549" height="277" class="size-full wp-image-1309" /></a>

首先，将所有香肠串在一起，可以知道至多切m-1刀（可以看成是两把刻度不同等长的尺子，求上门有多少个刻度对上了）。
假设每根长l，那么总长就是n*l，每人得到n*l/m。
设，切q根后正好得到了p个人的份，q*l=p*n*l/m，化简后得到p*n=q*m。
关于p和q有若干组解，这里要求最小的一组，可以发现p*n=q*m=LCM(n,m)。
接着可以得到q=n/GCD(n,m)，q的整数倍都可能是一个解，将公式化简为n/q=GCD(n,m)。
那么就知道已经有GCD(n,m)-1处是已经断开的（刻度对上的）。
<h1>我的代码</h1>
[code lang="cpp"]
#include&lt;iostream&gt;

using namespace std;
//n&gt;m
int gcd(int n,int m)
{
    if(m == 0)
        return n;
    return gcd(m,n%m);
}
int main()
{
    int n,m;
    cin &gt;&gt; n &gt;&gt; m;
    if(n&gt;m)
        cout &lt;&lt; m - gcd(n,m) &lt;&lt; endl;
    else
        cout &lt;&lt; m - gcd(m,n) &lt;&lt; endl;    
}
[/code]

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1303</wp:post_id>
		<wp:post_date>2014-03-11 13:50:07</wp:post_date>
		<wp:post_date_gmt>2014-03-11 05:50:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sicily-10330</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="10330"><![CDATA[10330]]></category>
		<category domain="post_tag" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="post_tag" nicename="sicily"><![CDATA[sicily]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>动态规划&#124;LCS(最长公共子序列)&#124;Common Subsequence&#124;HDU-1159</title>
		<link>http://www.aemiot.com/hdu-1159.html</link>
		<pubDate>Fri, 21 Mar 2014 07:51:54 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1317</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1159" title="http://acm.hdu.edu.cn/showproblem.php?pid=1159">Common Subsequence</a>
<h1>题目描述</h1>
A subsequence of a given sequence is the given sequence with some elements (possible none) left out. Given a sequence X = <x1, x2, ..., xm> another sequence Z = <z1, z2, ..., zk> is a subsequence of X if there exists a strictly increasing sequence <i1, i2, ..., ik> of indices of X such that for all j = 1,2,...,k, xij = zj. For example, Z = <a, b, f, c> is a subsequence of X = <a, b, c, f, b, c> with index sequence <1, 2, 4, 6>. Given two sequences X and Y the problem is to find the length of the maximum-length common subsequence of X and Y. 
The program input is from a text file. Each data set in the file contains two strings representing the given sequences. The sequences are separated by any number of white spaces. The input data are correct. For each set of data the program prints on the standard output the length of the maximum-length common subsequence from the beginning of a separate line. 
<h1>Input</h1>
RT
<h1>Output</h1>
RT
<h1>Sample Input 1</h1>
abcfbc abfcab
programming contest 
abcd mnp
<h1>Sample Output 1</h1>
4
2
0
<h1>Source</h1>
Southeastern Europe 2003
<h1>题目大意</h1>
求连个串的LCS（最长公共子序列，可以不连续）。
<h1>解题思路</h1>
典型动归问题。动归方程见代码注释。
<h1>我的代码</h1>
[code lang="cpp"]
//长度为i j的a b的子串动归
//DP[i,j] = {
//        DP[i-1][j-1]+1 ,while Ai == Aj
//        max{DP[i-1][j],DP[i][j-1]} while Ai != Aj
//}

//0 0 0 0 0
//0 - - - -
//0 - - - -
//0 - - - -
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;cstring&gt;
#define max(a,b) ((a)&gt;(b)?(a):(b))
using namespace std;
int DP[1000][1000];
int main()
{
    string a,b;
    while(cin &gt;&gt; a &gt;&gt; b)
    {
        memset(DP,0,sizeof(DP));
        for(int i=1; i&lt;=a.size(); ++i)
            for(int j=1; j&lt;=b.size(); ++j)
            {
                if(a[i-1] == b[j-1])
                    DP[i][j] = DP[i-1][j-1] + 1;
                else
                    DP[i][j] = max(DP[i-1][j],DP[i][j-1]);
            }
        cout &lt;&lt; DP[a.size()][b.size()] &lt;&lt; endl;
    }
    return 0;
}
[/code]

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1317</wp:post_id>
		<wp:post_date>2014-03-21 15:51:54</wp:post_date>
		<wp:post_date_gmt>2014-03-21 07:51:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hdu-1159</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dp"><![CDATA[DP]]></category>
		<category domain="post_tag" nicename="lcs"><![CDATA[LCS]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>蓝桥杯&#124;江西财经麦庐游记&#124;记2014年3月22日</title>
		<link>http://www.aemiot.com/2014-03-22-lanqiao.html</link>
		<pubDate>Sun, 23 Mar 2014 06:43:08 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1320</guid>
		<description></description>
		<content:encoded><![CDATA[看到小KD发了篇游记~我也决定记一下这一天。
前一天晚上，简单的复习了下图论，线段树，并查集，动归后就先睡了。
因为第一次带队出赛，给自己预留的时间比较多，让大家7点在校门口集合。一大早爬起来，随便吃了一点东西= =(ps:吃多了比赛上厕所就坑了)。
因为到的比较早吧，带大家把财大麦庐校区逛了一遍。
----------------比赛开始分割线------------------
No.1
暴力枚举啤酒之。
No.2
纯数学问题= =
No.3
全排列-测试之~
暴力之。
No.4
结合前后文，猜了一个，run下，ok。
No.5
刚开始没看明白，跳了，回过头来，结合前后文，瞬间就ok了。
No.6
暴力枚举abcd之
No.7
因为忘了C++标准库algorithm中全排列函数名字，只有自己手敲DFS全排
No.8
模拟- -不过不确定有没有BUG
No.9
DP，但是到最后比赛结束都没调出来....期间很想去暴力下第十题...不过还是把时间耗在这题上了。
No.10
中间粗略扫了一下，跳过了。10W数据- -nlogn啊
-------------------------比赛结束分割线------------------
今年没像去年一样大脑发热，不过完全没发挥出优势啊！！！都是答案填空题...
之后，我们还是和去年一样，找公交大费周章....（同样的错误啊！~！）
然后去财大另一个校区，聚餐了一回~就回去了~很和谐啊]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1320</wp:post_id>
		<wp:post_date>2014-03-23 14:43:08</wp:post_date>
		<wp:post_date_gmt>2014-03-23 06:43:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>2014-03-22-lanqiao</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="yrz"><![CDATA[生活杂记]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e8%93%9d%e6%a1%a5%e6%9d%af%e6%b1%9f%e8%a5%bf%e8%b4%a2%e7%bb%8f%e9%ba%a6%e5%ba%90%e6%b8%b8%e8%ae%b0%e8%ae%b02014%e5%b9%b43%e6%9c%8822%e6%97%a5]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>真值表在线计算器</title>
		<link>http://www.aemiot.com/truth-table-online-calculator-index.html</link>
		<pubDate>Mon, 31 Mar 2014 18:25:39 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1328</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.aemiot.com/wp-content/uploads/2014/04/truth-table-online-calculator.gif"><img src="http://www.aemiot.com/wp-content/uploads/2014/04/truth-table-online-calculator.gif" alt="truth-table-online-calculator" width="452" height="228" class="aligncenter size-full wp-image-1336" /></a>
<h1>真值表在线计算器</h1>

C系编程语言变量命名(表达式至少要有一个变量)，常量只能是0和1，与* 或+ 非！。
运算符优先级：！> * > + ,支持圆括号更改优先级。样例输入: !a+(b+c)*d*1

刚写完，界面随手布置的，功能上可能也存在一些BUG，发现BUG希望能即时反馈。

详情见该页面:<a href="http://www.aemiot.com/tool/truth-table-online-calculator.html" title="http://www.aemiot.com/tool/truth-table-online-calculator.html">http://www.aemiot.com/tool/truth-table-online-calculator.html</a>

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1328</wp:post_id>
		<wp:post_date>2014-04-01 02:25:39</wp:post_date>
		<wp:post_date_gmt>2014-03-31 18:25:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>truth-table-online-calculator-index</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="zp"><![CDATA[作品]]></category>
		<category domain="post_tag" nicename="%e5%9c%a8%e7%ba%bf"><![CDATA[在线]]></category>
		<category domain="post_tag" nicename="%e7%9c%9f%e5%80%bc%e8%a1%a8"><![CDATA[真值表]]></category>
		<category domain="post_tag" nicename="%e8%ae%a1%e7%ae%97"><![CDATA[计算]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1339]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2014第五届蓝桥杯C/C++程序设计本科B组省赛试题下载及解题报告（更新至第八题）</title>
		<link>http://www.aemiot.com/2014blue.html</link>
		<pubDate>Wed, 02 Apr 2014 10:06:13 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1344</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
相比去年心态好了些，发挥也正常了些。
</p>

<h1>第一题</h1>
[toggle]
<h1>解题思路</h1>
直接枚举。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;
int main()
{
	for(int i=0; i*2.3&lt;=82.3; ++i)
	{
		//j = (82.3-2.3*i)/1.9
		//j is positive number?  i less then j?
		double j = (82.3-2.3*i)/1.9;
		//cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; endl;
		if(j-(int)j&lt;1E-9 &amp;&amp; i&lt;(int)j)
		{
			cout &lt;&lt; i &lt;&lt; endl;
			break;
		}
	}
	return 0;
}
[/code]
[/toggle]

<h1>第二题</h1>
[toggle]
<h1>解题思路</h1>
数学题，对折n次就是得到 2^n+1次。
[/toggle]

<h1>第三题</h1>
[toggle]
<h1>解题思路</h1>
暴力(搜索，全排列-测试，二进制枚举-测试)或者根据根据规律递推。详情见代码。
<h1>我的代码-C++STL全排列-测试</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;
bool check(char a[])
{
	if(a[14] == 'a')
		return false;
	int v = 2;
	for(int i=0; i&lt;15; ++i)
	{
		if(a[i]=='a')
			v *= 2;
		else
			v -= 1; 
	}
	if(v == 0)
		return true;
	else
		return false;
}
int main()
{
	char a[]= &quot;aaaaabbbbbbbbbb&quot;;
	//char a[] = &quot;babaabbabbabbbb&quot;;
	int ans = 0;
	do
	{
		if(check(a))
		{
			++ans;
			//for(int i=0; i&lt;15; ++i)
			//	cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;
			//cout &lt;&lt; endl;
		}
	}while(next_permutation(a,a+15));
	cout &lt;&lt; ans &lt;&lt; endl;
	return 0;
}
[/code]
<h1>我的代码-二进制枚举</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;
//a-&gt;0
//b-&gt;1
bool check(int k)
{
	if(~k &amp; 1)
		return false;
	int v = 2;
	int t = 15;
	int a = 0;
	int b = 0;
	while(t--)
	{
		if(k &amp; (1&lt;&lt;t))
		{
			++b;
			v -= 1;
		}
		else
		{
			++a;
			v *= 2;
		}
	}
	if(v==0 &amp;&amp; a==5 &amp;&amp; b==10)
		return true;
	return false;
}
int main()
{
	int ans = 0;
	for(int i=0; i&lt; (1&lt;&lt;15); ++i)
	{
		if(check(i))
			++ans;
	}
	cout &lt;&lt; ans &lt;&lt; endl;
	return 0;
}
[/code]
<h1>我的代码-递归</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;

//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
int fun(int v,int cur,int anum,int bnum)
{
	if(cur==0 &amp;&amp; v==2 &amp;&amp; anum==0 &amp;&amp; bnum==0)
		return 1;
	if((cur==0 &amp;&amp; v!=2) || anum&lt;0 || bnum&lt;0)
		return 0;
	//当前位填a和b情况之和
	int ans = fun(v+1,cur-1,anum,bnum-1);
	if(v%2 == 0)
		ans += fun(v/2,cur-1,anum-1,bnum);
	return ans;
}

int main()
{
	cout &lt;&lt; fun(1,14,5,9);
	return 0;
}
[/code]
[/toggle]

<h1>第四题</h1>
[toggle]
看代码，推断是 return i
[/toggle]

<h1>第五题</h1>
[toggle]
还是看代码，推断是 f(a, rank-1, row, col+w/2)
[/toggle]

<h1>第六题</h1>
[toggle]
<h1>解题思路</h1>
枚举4个数字a,b,c和d（假设两个分数是a/b和c/d）。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;cmath&gt;
using namespace std;
int main()
{
	int ans = 0;
	for(int a=1; a&lt;=9; ++a)
		for(int b=1; b&lt;=9; ++b)
			for(int c=1; c&lt;=9; ++c)
				for(int d=1; d&lt;=9; ++d)
				{
					//(a*c)/(b*d) == (a*10+c)/(b*10+d)
					if(a==b || c==d)
						continue;
					double t1 = (a*c);
					t1 /= b*d;
					double t2 = (a*10+c);
					t2 /= b*10+d;
					if(fabs(t1-t2)&lt;1E-9)
						++ans;
				}
	cout &lt;&lt; ans &lt;&lt; endl;
	return 0;
}
[/code]
[/toggle]

<h1>第七题</h1>
[toggle]
<h1>解题思路</h1>
给位置编号，然后暴力（搜索，全排列-测试）。详情见代码。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;
//---------------
//       1
// 8   *   *   *
//
//   *       *
//
// *   *   *   *
//       3
//---------------
//convert No
//---------------
//       1
// 3   4   5   6
//
//   7       8
//
// 9  10  11  12
//       2
//---------------
bool check(int a[])
{
	if(a[1]+a[4]+a[7]+a[9] == a[3]+a[4]+a[5]+a[6] 
		&amp;&amp; a[3]+a[4]+a[5]+a[6] == a[1]+a[5]+a[8]+a[12]
		&amp;&amp; a[1]+a[5]+a[8]+a[12] == a[6]+a[8]+a[11]+a[2]
		&amp;&amp; a[6]+a[8]+a[11]+a[2] == a[9]+a[10]+a[11]+a[12]
		&amp;&amp; a[9]+a[10]+a[11]+a[12] == a[3]+a[7]+a[10]+a[2]
		)
		return true;
	return false;
}

int main()
{
	int a[] = {0,1,3,8,2,4,5,6,7,9,10,11,12};
	do
	{
		if(check(a))
			cout &lt;&lt; a[7] &lt;&lt; endl;
	}while(next_permutation(a+4,a+13));
	return 0;
}
[/code]
[/toggle]

<h1>第八题</h1>
[toggle]
<h1>解题思路</h1>
模拟。
<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;
int a[60];
int flag[60] = {1};
int main()
{
	int n;
	int ans = 1;
	cin &gt;&gt; n;
	for(int i=0; i&lt;n; ++i)
		cin &gt;&gt; a[i];
	while(1)
	{
		//当蚂蚁到0和100时离开，不可能出现-100位置。
		//对每只蚂蚁进行位置更新
		int k = 0;
		for(int i=0; i&lt;n; ++i)
		{
			// -x &gt;&gt; -(x-1)=-x+1
			// x &gt;&gt; x+1
			if(a[i]==100 || a[i]==0)
				continue;
			++a[i];
		}
		//感染判断
		for(int i=0; i&lt;n; ++i)
		{
			if(a[i]==100 || a[i]==0)
			{
				++k;
				continue;
			}
			for(int j=i+1; j&lt;n; ++j)
			{
				if(a[j]==100 || a[j]==0)
					continue;
				int siteA = a[i]&gt;=0?a[i]:-a[i];
				int siteB = a[j]&gt;=0?a[j]:-a[j];
				//两种情况:两只蚂蚁到同一位置，两只蚂蚁交叉
				if(((!flag[i]&amp;&amp;flag[j])||(flag[i]&amp;&amp;!flag[j])) &amp;&amp; siteA==siteB)
				{
					flag[i] = flag[j] = 1;
					++ans;
				}
				if(((!flag[i]&amp;&amp;flag[j])||(flag[i]&amp;&amp;!flag[j])) &amp;&amp; (a[i]/siteA+a[j]/siteB==0) &amp;&amp; (siteA==siteB+1 || siteA+1==siteB))
				{
					flag[i] = flag[j] = 1;
					++ans;
				}
			}
		}
		if(k &gt;= n)
			break;
	}
	cout &lt;&lt; ans &lt;&lt; endl;
	return 0;
}
[/code]
[/toggle]

<h1>第九题（暂未更新）</h1>
<p> </p>

<h1>第十题（暂未更新）</h1>
<p> </p>
<br />

<h1>试题下载</h1>

[download link="http://www.aemiot.com/download/2014第五届蓝桥杯C程序设计本科B组省赛试题.rar"]<span style="color: #050505;"><big><b>&nbsp;&nbsp;&nbsp;本地下载</b></big></span>[/download]
[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1344</wp:post_id>
		<wp:post_date>2014-04-02 18:06:13</wp:post_date>
		<wp:post_date_gmt>2014-04-02 10:06:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>2014blue</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="2014"><![CDATA[2014]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<category domain="post_tag" nicename="%e8%93%9d%e6%a1%a5%e6%9d%af"><![CDATA[蓝桥杯]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>动规&#124;LCS&#124;History Grading&#124;UVaOJ-111</title>
		<link>http://www.aemiot.com/uvaoj-111-html.html</link>
		<pubDate>Mon, 28 Apr 2014 10:29:59 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1359</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
<a href="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=114&page=show_problem&problem=47" title="http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=114&page=show_problem&problem=47">History Grading
</a>

<h1>题目大意</h1>
历史考试中，要学生对一系列历史事件按发生事件排序。以学生填写的答案和标准答案相同的最多项目计算得分。(理论是为了避免一错全错的情况)

<h1>解题思路</h1>
又见LCS。注意输入数据的内容。

<h1>我的代码</h1>
[code lang="cpp"]
#include &lt;iostream&gt;
using namespace std;
int n;
int a[25],r[25];
int dp[25][25];
int main()
{
	cin &gt;&gt; n;
	for(int i=1; i&lt;=n; ++i)
	{
		int t;
		cin &gt;&gt; t;
		a[t] = i;
	}
	while(1)
	{
		for(int i=1; i&lt;=n; ++i)
		{
			int t;
			cin &gt;&gt; t;
			r[t] = i;
		}
		if(!cin)
			break;
		//LCS
		//f[i,j] = f[i-1,j-1]+1 where a[i]==r[j]
		//		   max{f[i-1,j],f[i,j-1]} where a[i]!=r[j]
		for(int i=1; i&lt;=n; ++i)
			for(int j=1; j&lt;=n; ++j)
			{
				if(a[i] == r[j])
					dp[i][j] = dp[i-1][j-1] + 1;
				else if(dp[i-1][j]&gt;dp[i][j-1])
					dp[i][j] = dp[i-1][j];
				else
					dp[i][j] = dp[i][j-1];
			}
		cout &lt;&lt; dp[n][n] &lt;&lt; endl;
	}
	return 0;
}
[/code]

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1359</wp:post_id>
		<wp:post_date>2014-04-28 18:29:59</wp:post_date>
		<wp:post_date_gmt>2014-04-28 10:29:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>uvaoj-111-html</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="acm"><![CDATA[ACM]]></category>
		<category domain="post_tag" nicename="uvaoj"><![CDATA[UVaOJ]]></category>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[1359]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cocos2dx-3.0版本项目创建</title>
		<link>http://www.aemiot.com/cocos2dx3-create-project.html</link>
		<pubDate>Fri, 06 Jun 2014 07:54:40 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1368</guid>
		<description></description>
		<content:encoded><![CDATA[自3.0发布以来，多次更新了项目创建的方式。网上的教程也很混乱，作为自己尝试了数次才搞定的事情，决定把过程记录下来。

首先，要注意的是版本问题。
打开cocos2dx根目录下找到CHANGELOG用记事本打开，可以看到版本更新的记录。
大致发布顺序是：
cocos2d-x-3.0alpha0
cocos2d-x-3.0alpha1
cocos2d-x-3.0beta
cocos2d-x-3.0beta2
<strong>cocos2d-x-3.0rc0
cocos2d-x-3.0rc1
cocos2d-x-3.0rc2
cocos2d-x-3.0 Apr.23 2014</strong>

现在介绍的是较新的方式，应该也是最后确定的创建工程方式。（版本至少要在<strong>3.0rc0之后</strong>）
使用控制台python脚本方式创建。

优点：跨平台性强，自由。

1.安装Python，并将其目录加入环境变量中（据说3.0以后可能会有问题，推荐使用2.7）。

2.将 <strong>[cocos-root]/tools/cocos2d-console/bin/ </strong>加入环境变量的系统路径中。
      这时，打开终端/命令行允许<strong>cocos</strong>命令，应该可以看到使用方法。

3.创建工程，我们可以使用cocos new命令。
<pre>
cocos new [-h] [-p PACKAGE_NAME] -l {cpp,lua,js} [-d DIRECTORY]
          [-t TEMPLATE_NAME] [--no-native]
          [PROJECT_NAME]
</pre>
例如我们要在当前目录创建一个名为test的c++项目，应该执行指令<strong>cocos new -l cpp test</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1368</wp:post_id>
		<wp:post_date>2014-06-06 15:54:40</wp:post_date>
		<wp:post_date_gmt>2014-06-06 07:54:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cocos2dx3-create-project</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cocos2dx"><![CDATA[cocos2dx]]></category>
		<category domain="post_tag" nicename="%e5%b7%a5%e7%a8%8b%e5%88%9b%e5%bb%ba"><![CDATA[工程创建]]></category>
		<category domain="category" nicename="gamepro"><![CDATA[游戏开发]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cocos2dx-3.0公共基类和拷贝机制的改变</title>
		<link>http://www.aemiot.com/cocos2dx-3x-001.html</link>
		<pubDate>Fri, 06 Jun 2014 12:47:17 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1379</guid>
		<description></description>
		<content:encoded><![CDATA[在cocos2dx-2.x的实现中，公共基类是CCObject。
打开[cocos-root]/cocos2dx/cocoa/CCObject.h查看定义：
[code lang="cpp"]

/**
 * @js NA
 * @lua NA
 */
class CC_DLL CCCopying
{
public:
    virtual CCObject* copyWithZone(CCZone* pZone);
};

/**
 * @js NA
 */
class CC_DLL CCObject : public CCCopying
{
public:
    // object id, CCScriptSupport need public m_uID
    unsigned int        m_uID;
    // Lua reference id
    int                 m_nLuaID;
protected:
    // count of references
    unsigned int        m_uReference;
    // count of autorelease
    unsigned int        m_uAutoReleaseCount;
public:
    CCObject(void);
    /**
     *  @lua NA
     */
    virtual ~CCObject(void);
    
    void release(void);
    void retain(void);
    CCObject* autorelease(void);
    CCObject* copy(void);
    bool isSingleReference(void) const;
    unsigned int retainCount(void) const;
    virtual bool isEqual(const CCObject* pObject);

    virtual void acceptVisitor(CCDataVisitor &amp;visitor);

    virtual void update(float dt) {CC_UNUSED_PARAM(dt);};
    
    friend class CCAutoreleasePool;
};

[/code]

CCObject继承自CCCopying(没有其他类派生自CCCopying，这里的派生其实是接口机制，其功能很单一，所以不会称CCCopying是公共基类)。
CCCopying的唯一成员函数，其默认实现简单到只通过一个断言提示一个未实现。

[code lang="cpp"]
CCObject* CCCopying::copyWithZone(CCZone *pZone)
{
    CC_UNUSED_PARAM(pZone);
    CCAssert(0, &quot;not implement&quot;);
    return 0;
}
[/code]

CCObject为对象提供了拷贝机制、内存管理机制以及一些基本逻辑。
其中我认为一个设计不合理的地方，就是绑定了过多功能，而且设计人员也考虑到了不是每个派生类都需要拷贝机制，但是却强制实现了一个默认接口，而该实现居然是提示未生实现。（因此在cocos2dx-3.x中被重写）

但是在cocos2dx-3.x之中就找不到CCObject类了，取而代之的是Ref类。
在[cocos-root]/cocos/base下可以找到CCRef.h文件，查看定义：

[code lang="cpp"]

/**
 * @addtogroup base_nodes
 * @{
 */

class Ref;

/** Interface that defines how to clone an Ref */
class CC_DLL Clonable
{
public:
	/** returns a copy of the Ref */
    virtual Clonable* clone() const = 0;
    /**
     * @js NA
     * @lua NA
     */
	virtual ~Clonable() {};

    /** returns a copy of the Ref.
     @deprecated Use clone() instead
     */
    CC_DEPRECATED_ATTRIBUTE Ref* copy() const
    {
        // use &quot;clone&quot; instead
        CC_ASSERT(false);
        return nullptr;
    }
};

class CC_DLL Ref
{
public:
    /**
     * Retains the ownership.
     *
     * This increases the Ref's reference count.
     *
     * @see release, autorelease
     * @js NA
     */
    void retain();
    
    /**
     * Release the ownership immediately.
     *
     * This decrements the Ref's reference count.
     *
     * If the reference count reaches 0 after the descrement, this Ref is
     * destructed.
     *
     * @see retain, autorelease
     * @js NA
     */
    void release();

    /**
     * Release the ownership sometime soon automatically.
     *
     * This descrements the Ref's reference count at the end of current
     * autorelease pool block.
     *
     * If the reference count reaches 0 after the descrement, this Ref is
     * destructed.
     *
     * @returns The Ref itself.
     *
     * @see AutoreleasePool, retain, release
     * @js NA
     * @lua NA
     */
    Ref* autorelease();

    /**
     * Returns the Ref's current reference count.
     *
     * @returns The Ref's reference count.
     * @js NA
     */
    unsigned int getReferenceCount() const;
    
protected:
    /**
     * Constructor
     *
     * The Ref's reference count is 1 after construction.
     * @js NA
     */
    Ref();
    
public:
    /**
     * @js NA
     * @lua NA
     */
    virtual ~Ref();
    
protected:
    /// count of references
    unsigned int _referenceCount;
    
    friend class AutoreleasePool;
    
#if CC_ENABLE_SCRIPT_BINDING
public:
    /// object id, ScriptSupport need public _ID
    unsigned int        _ID;
    /// Lua reference id
    int                 _luaID;
#endif
};

[/code]

这次的Ref就规范得多，首先为拷贝定义了clonable接口，Ref也没有去实现clonable接口，这就相当于将拷贝机制独立出来了。如果一个继承Ref的类需要拷贝功能，就要自己实现clonable接口。
而Ref作为公共基类提供内存管理功能，以及和Lua脚本通信的数据维护。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1379</wp:post_id>
		<wp:post_date>2014-06-06 20:47:17</wp:post_date>
		<wp:post_date_gmt>2014-06-06 12:47:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cocos2dx-3x-001</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ccobject"><![CDATA[CCObject]]></category>
		<category domain="post_tag" nicename="ref"><![CDATA[Ref]]></category>
		<category domain="post_tag" nicename="%e5%85%ac%e5%85%b1%e5%9f%ba%e7%b1%bb"><![CDATA[公共基类]]></category>
		<category domain="post_tag" nicename="%e6%8b%b7%e8%b4%9d%e6%9c%ba%e5%88%b6"><![CDATA[拷贝机制]]></category>
		<category domain="category" nicename="gamepro"><![CDATA[游戏开发]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[QT5裁剪]重编译icu&#124;替换icuxxxx.dll&#124;减少qt5发布体积</title>
		<link>http://www.aemiot.com/qt5-icu-compile.html</link>
		<pubDate>Fri, 29 Aug 2014 19:08:10 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1393</guid>
		<description></description>
		<content:encoded><![CDATA[[toggle title="应用背景"]
<p>最近需要使用QT写一个程序，选择了比较新的QT5.3以获得更多特性进行快速开发。但是QTCreator编译出来的程序是动态链接版本，接着就头痛了，自己程序很小，但是所需要携带的动态链接库却很大，即使是发布版本，依然需要携带一个庞大的qt库，那么如何减小发布体积呢？（ps：开源版本的qt，其lib文件夹下的*.lib文件不是真正意义上的静态库文件，其装载的是dll的入口地址等信息）</p>

<p>大概有这么两种方案：</p>
<p>1.重编译qt生成真正的静态链接版本，然后以静态链接方式生成程序。（这方案理论效果应该是最好的，毕竟在编译前，还可以去掉qt中你用不到的模块，可惜静态编译过程复杂，而且容易出错）</p>
<p>2.继续使用动态版本，但是想办法重编译qt或者部分qt，通过裁减qt减小依赖的dll体积。

<p>这里决定从第二种方案入手。</p>

<p>观察一个普通的qt5桌面工程，依赖下列DLL文件：</p>
<ul>
<dt>platforms/*.dll</dt>
<dt>Qt5Core.dll</dt>
<dt>Qt5Widgets.dll</dt>
<dt>Qt5Gui.dll</dt>
<dt>icuuc52.dll</dt>
<dt>icuin52.dll</dt>
<dt>icudt52.dll</dt>
</ul>

<p>其中Qt5开头的dll，平均每个占用4M，而且看样子是不重编译qt是无法减小其体积的。（通过重编译qt，可以去除对icu等模块的依赖，从根本上解决问题，不过过程比较复杂，需要对qt各个模块的关系有所了解，暂时不说）。</p>
<p>但是，另一方面，可以发现其中第三方库的icudt52.dll高达22M，其实这是一个国际化资源库，携带了各种语言信息等。其中大多数你都是用不到的。（貌似qt4不需要这几个dll文件）也就是说，如果能够重订制icu库，去除不需要的资源，就能大幅减少发布程序依赖DLL体积。</p>
[/toggle]

[note]
如果你的项目使用了Qt5Webkit，不推荐裁减ICU库。
[/note]

ICU库本身就提供了定制的服务，因此非常方便。

1： 安装编译环境

     (1) 安装MSYS： <a href="http://sourceforge.net/projects/mingw/files/MSYS/Base/msys-core/msys-1.0.11/MSYS-1.0.11.exe/download?use_mirror=garr. " title="http://sourceforge.net/projects/mingw/files/MSYS/Base/msys-core/msys-1.0.11/MSYS-1.0.11.exe/download?use_mirror=garr. ">http://sourceforge.net/projects/mingw/files/MSYS/Base/msys-core/msys-1.0.11/MSYS-1.0.11.exe/download?use_mirror=garr. </a>

     (2)可用的MinGW编译器，直接用Qt自带的MinGW. 

2：下载ICU源码： <a href="http://site.icu-project.org/download " title="http://site.icu-project.org/download ">http://site.icu-project.org/download </a>

3：打开MSYS Shell:（这里注意ICU版本，这里使用的是<strong>52l</strong>） 

[code lang="shell"]
    $ cd icu/source 
    $ export PATH=/C/Qt/Qt5.1.0/Tools/mingw48_32/bin:$PATH 
    $ ./runConfigureICU MinGW –prefix=$PWD/../install 
[/code]

4：到ICU网站定制数据文件：<a href="http://apps.icu-project.org/datacustom/ICUData50.html " title="http://apps.icu-project.org/datacustom/ICUData50.html ">http://apps.icu-project.org/datacustom/ICUData50.html </a>

    把不需要的选项点掉后，点“Get Data Library”按钮下载定制的文件：“icudt52l.dat” 

5：把“icudt52l.dat”文件复制到： <strong>icu/source/data/in</strong> 目录内。 

6：MSYS Shell 再执行： 

[code lang="shell"]
    $ make 
    $ make install 
[/code]

7：全部完成后dll文件可以在icu/install/bin目录里找到。

[note title="参考文章"]
1. <a href="http://www.hellprototypes.com/archives/161#postcomment" title="http://www.hellprototypes.com/archives/161#postcomment">Windows MinGW下编译ICU，用于替换Qt 5.1.0(MinGW 4.8)自带的DLL</a>
2. <a href="http://qt-project.org/wiki/Compiling-ICU-with-MinGW" title="http://qt-project.org/wiki/Compiling-ICU-with-MinGW">Compiling ICU with MinGW</a>
[/note]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1393</wp:post_id>
		<wp:post_date>2014-08-30 03:08:10</wp:post_date>
		<wp:post_date_gmt>2014-08-29 19:08:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>qt5-icu-compile</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="icu"><![CDATA[icu]]></category>
		<category domain="post_tag" nicename="qt"><![CDATA[QT]]></category>
		<category domain="category" nicename="qrs"><![CDATA[应用开发]]></category>
		<category domain="post_tag" nicename="%e8%a3%81%e5%89%aa"><![CDATA[裁剪]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[bug fix]CocosStudio动画编辑器取消补间动画在程序中加载后无效</title>
		<link>http://www.aemiot.com/cocos-studio-bugfix-001.html</link>
		<pubDate>Fri, 29 Aug 2014 19:41:35 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1422</guid>
		<description></description>
		<content:encoded><![CDATA[[note title="开发环境"]
<strong>库版本： Cocos2d-x 3.0
编辑器版本： Cocos Studio 1.6.0</strong>
[/note]

<a href="http://www.aemiot.com/wp-content/uploads/2014/08/CocosStudio-001.png"><img src="http://www.aemiot.com/wp-content/uploads/2014/08/CocosStudio-001.png" alt="CocosStudio-001" width="346" height="234" class="aligncenter size-full wp-image-1426" /></a>

<strong>异常描述： 取消补间动画后，在编辑器中看到已经没有了补间动画，但是将动画导出后加载到程序中还是有补间动画的。</strong>

用记事本打开导出的Json文件，发现存在属性 "tweenFrame": false。 可以看到导出的信息是完整的。

那么问题就在程序上，跟踪程序，发现成员变量isTween一直是true。 继续跟踪，发现<strong>CCDatas.cpp中FrameData::copy函数没有对isTween进行拷贝</strong>。所以在函数中加上isTween的拷贝过程就好。

修正后的代码:
[code lang="cpp"]
//CCDatas.cpp
void FrameData::copy(const BaseData *baseData)
{
    BaseData::copy(baseData);
    
    if (const FrameData *frameData = dynamic_cast&lt;const FrameData*&gt;(baseData))
    {
        duration = frameData-&gt;duration;
        displayIndex = frameData-&gt;displayIndex;
        
        tweenEasing = frameData-&gt;tweenEasing;
        easingParamNumber = frameData-&gt;easingParamNumber;
        
        CC_SAFE_DELETE(easingParams);
        if (easingParamNumber != 0)
        {
            easingParams = new float[easingParamNumber];
            for (int i = 0; i&lt;easingParamNumber; i++)
            {
                easingParams[i] = frameData-&gt;easingParams[i];
            }
        }

        blendFunc = frameData-&gt;blendFunc;
		// Bug Fix
		isTween = frameData-&gt;isTween;
    }
}

[/code]

[note title="参考文章"]
<a href="http://blog.csdn.net/leafvmaple/article/details/24894015" title="http://blog.csdn.net/leafvmaple/article/details/24894015">cocos2dx3.0无法取消Armatrue骨骼动画中的补间效果问题的解决办法</a>
[/note]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1422</wp:post_id>
		<wp:post_date>2014-08-30 03:41:35</wp:post_date>
		<wp:post_date_gmt>2014-08-29 19:41:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cocos-studio-bugfix-001</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bug"><![CDATA[Bug]]></category>
		<category domain="post_tag" nicename="cocos2dx"><![CDATA[cocos2dx]]></category>
		<category domain="post_tag" nicename="cocosstudio"><![CDATA[CocosStudio]]></category>
		<category domain="category" nicename="gamepro"><![CDATA[游戏开发]]></category>
		<category domain="post_tag" nicename="%e8%a1%a5%e9%97%b4%e5%8a%a8%e7%94%bb"><![CDATA[补间动画]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[1426]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wheezy安装笔记 &#124; Linux &#124; Debian</title>
		<link>http://www.aemiot.com/wheezy-install.html</link>
		<pubDate>Mon, 20 Oct 2014 12:55:34 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1448</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>安装规划</h1>
用途： 稳定的图形/服务器开发环境
机器环境：Y470P (i5-2450M/8G/HD7690M)
Linux使用磁盘总额： 90G
磁盘分配：

|---2G  /
|---2G  /tmp
|---30G /usr
|---10G /var
|---10G /swap
|---36G /home

桌面环境：Gnome3

<h1>准备安装</h1>
1.下载光盘镜像: debian-7.6.0-amd64-netinst.iso
2. 将光盘镜像引导至U盘
3.AMD官网: 下载闭源驱动 fglrx
4.Intel Wifi: 下载无线网卡驱动
5.Flash Player: 下载install_flash_player_11_linux.x86_64.tar.gz
6.网络环境

<h1>安装＆＆配置</h1>

<strong>1.从U盘引导，按照提示进行最小化安装系统。</strong>

<strong>2.安装GRUB至硬盘</strong>

<strong>3.结束安装，重启</strong>

<strong>4.进入root</strong>

<strong>5.更新软件源</strong>

[code lang="bash"]
# /etc/apt/sources.list

# deb cdrom:[Debian GNU/Linux 7 _Wheezy_ - Official Snapshot amd64 LIVE/INSTALL Binary 20140723-17:11]/ wheezy main

# deb cdrom:[Debian GNU/Linux 7 _Wheezy_ - Official Snapshot amd64 LIVE/INSTALL Binary 20140723-17:11]/ wheezy main

deb http://mirrors.163.com/debian/ wheezy main non-free contrib
deb-src http://mirrors.163.com/debian/ wheezy main non-free contrib

deb http://mirrors.163.com/debian/ wheezy-updates main non-free contrib
deb-src http://mirrors.163.com/debian/ wheezy-updates main non-free contrib

[/code]

接着执行.

[code lang="bash"]
apt-get update &amp;&amp; apt-get upgrade
[/code]

<strong>6.安装xorg</strong>

[code lang="bash"]
apt-get install xorg
[/code]

<strong>7.安装驱动</strong>

[code lang="bash"]
# copy files
cp /media/usb0/{wifi-driver}.deb ~/
cp /media/usb0/{amd-driver}.run ~/
cd ~/

# start install wifi-driver
dpkg -i ./{wifi-driver}.deb

# start install amd-driver
chmod +x {amd-driver}
./{amd-driver}.run
[/code]

[note title="安装AMD显卡驱动"]
安装中，它可能会提示你缺少依赖组件，让你查看/usr/share/ati/fglrx-install.log。
这时需要查阅缺少的组件并安装，再回去按照AMD显卡驱动。
我安装时提示的是缺少gcc make linux-header三个包，利用apt安装之后OK。
[/note]

<strong>8.安装桌面</strong>

[code lang="bash"]
# only install gnome-core
apt-get install gnome-core
[/code]

<strong>9.配置中文环境</strong>

[code lang="bash"]
# reconfigure locales
# select en_GB.UTF-8 UTF-8, en_US.UTF-8 UTF-8, zh_CN GB2312, zh_CN.GB18030 GB18030, zh_CN.GBK GBK, zh_CN.UTF-8 UTF-8 
dpkg-reconfigure locales

# install chinese input
apt-get install ibus ibus-googlepinyin

# install chinese font
apt-get install xfont-wqy

[/code]

<strong>10.安装＆＆配置Vim</strong>

(1)安装vim and gvim

[code lang="bash"]
apt-get install vim-gtk
[/code]

(2)配置vim and gvim

[code lang="bash"]
# ~/.vimrc
if has(&quot;gui_running&quot;)
  let g:isGUI = 1
else
  let g:isGUI = 0
endif

set nocompatible
syntax enable
set shortmess=atI
set autoindent
autocmd BufEnter * :syntax sync fromstart
set number
set showcmd
set lz
set hid
set incsearch
set hlsearch
set showmatch
set ai
set si
set cindent
set wildmenu
set nofen
set fdl=10

&quot; quick shell
nmap &lt;C-Z&gt; :shell&lt;cr&gt;
inoremap &lt;leader&gt;n &lt;esc&gt;

set laststatus=2
highlight StatusLine cterm=bold ctermfg=yellow ctermbg=blue

set expandtab
set smarttab
set shiftwidth=2
set tabstop=2

set background=dark
colorscheme desert

set history=400
set autoread
set mouse=n

set encoding=utf8
set fileencodings=utf8,gb2312,gb18030,ucs-bom,latin1

&quot; system copy cat paste
map &lt;F7&gt; &quot;+y
map &lt;F8&gt; &quot;+x
map &lt;F9&gt; &quot;+p

&quot; quick enter
inoremap &lt;leader&gt;1 ()&lt;esc&gt;:let leavechar=&quot;)&quot;&lt;cr&gt;i
inoremap &lt;leader&gt;2 []&lt;esc&gt;:let leavechar=&quot;]&quot;&lt;cr&gt;i
inoremap &lt;leader&gt;3 {}&lt;esc&gt;:let leavechar=&quot;}&quot;&lt;cr&gt;i
inoremap &lt;leader&gt;4 {&lt;esc&gt;o}&lt;esc&gt;:let leavechar=&quot;}&quot;&lt;cr&gt;O
inoremap &lt;leader&gt;q ''&lt;esc&gt;:let leavechar=&quot;'&quot;&lt;cr&gt;i
inoremap &lt;leader&gt;w &quot;&quot;&lt;esc&gt;:let leavechar='&quot;'&lt;cr&gt;i

if (g:isGUI)
  set cursorline
  colorscheme desert
  hi cursorline guibg=#333333
  hi CursorColumn guibg=#333333
  &quot;set guifont=Consolas\ 10
  &quot;set guifontwide=Consolas\ 10
  set guifont=Droid\ Sans\ Mono\ 12
  set gfw=Droid\ Sans\ Mono\ 12                 
  set guioptions-=T
  set guioptions-=m
else
  colorscheme desert
endif
[/code]

<strong>11. 安装浏览器Flash插件</strong>
[code lang="bash"]
# copy files
cp /media/usb0/install_flash_player_11_linux.x86_64.tar.gz ~/
cd ~/

# install plugins
tar -xvf install_flash_player_11_linux.x86_64.tar.gz
cp ./libflashplayer.so ~/.mozilla/plugins

[/code]

<strong>12. 编译＆＆安装其他包，配置各种开发环境</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1448</wp:post_id>
		<wp:post_date>2014-10-20 20:55:34</wp:post_date>
		<wp:post_date_gmt>2014-10-20 12:55:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wheezy-install</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debian"><![CDATA[debian]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="wheezy"><![CDATA[wheezy]]></category>
		<category domain="category" nicename="qrs"><![CDATA[应用开发]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[wheezy-update-jessie]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>558</wp:comment_id>
			<wp:comment_author><![CDATA[aem3372]]></wp:comment_author>
			<wp:comment_author_email>aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.aemiot.com</wp:comment_author_url>
			<wp:comment_author_IP>113.194.235.252</wp:comment_author_IP>
			<wp:comment_date>2014-12-25 01:59:05</wp:comment_date>
			<wp:comment_date_gmt>2014-12-24 17:59:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="#comment-557" rel="nofollow">@威客 </a>这篇只是个笔记吧。就没写太多了，wheezy这个发行版，用了才知道好不好，也不好说的~]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1419443945.3757131099700927734375;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>520</wp:comment_id>
			<wp:comment_author><![CDATA[kdwycz]]></wp:comment_author>
			<wp:comment_author_email>kdwycz+0318@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://kdwycz.com</wp:comment_author_url>
			<wp:comment_author_IP>111.76.47.142</wp:comment_author_IP>
			<wp:comment_date>2014-11-16 19:41:20</wp:comment_date>
			<wp:comment_date_gmt>2014-11-16 11:41:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[话说这个和树莓派的wheezy是一样的么？自带mathematica和Minecraft等一堆软件么？]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1416138081.1627209186553955078125;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>531</wp:comment_id>
			<wp:comment_author><![CDATA[aem3372]]></wp:comment_author>
			<wp:comment_author_email>aem3372@163.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.aemiot.com</wp:comment_author_url>
			<wp:comment_author_IP>171.34.122.150</wp:comment_author_IP>
			<wp:comment_date>2014-11-19 15:18:20</wp:comment_date>
			<wp:comment_date_gmt>2014-11-19 07:18:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<a href="#comment-520" rel="nofollow">@kdwycz </a>不是呢。。。这个wheezy是指debian的发行代号。。也就是debian7]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>520</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1416381501.1651270389556884765625;s:7:"message";s:32:"Akismet 检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>解析EON&#124;Hierarchical Notation&#124;ZOJ 3826&#124;2014 Regional 牡丹江</title>
		<link>http://www.aemiot.com/zoj-3826.html</link>
		<pubDate>Sat, 09 May 2015 14:19:44 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1440</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>题目</h1>
<a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=5380" title="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=5380">Hierarchical Notation</a>

<h1>题目大意</h1>
解析一个EON格式的字符串，然后查询内容。

<h1>解题思路</h1>
EON格式是树状结构。扫描字符串，根据状态转换解析各个node。

[code lang="cpp"]
#include &lt;cstdio&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;cstring&gt;
#include &lt;stack&gt;
#include &lt;iostream&gt;
using namespace std;

#define T_KEY 0
#define T_VALUE 1
#define T_ARRAY 2

struct Node
{
	int st;
	int ed;
	int type;
	Node* ft;
	vector&lt;Node*&gt; lt;
}*root;

const char* pjson;

void parse(const string&amp; json)
{
	root = new Node();
	root-&gt;st = 0;
	root-&gt;ed = 0;
	Node* now = root;
	Node* lastS = NULL;
	stack&lt;Node*&gt; Qdb;
	int flag = 0; //标记&quot;&quot;内外
	int p = 0;
	while(p&lt;json.size())
	{
		if(json[p] == '{')
		{
			Node* t = new Node();
			t-&gt;st = p;
			t-&gt;ft = now;
			Qdb.push(t);
			t-&gt;type = T_ARRAY;
			now-&gt;lt.push_back(t);
			now = t;
		}
		if(json[p] == '}')
		{
			Qdb.top()-&gt;ed = p;
			Qdb.pop();
			if(!Qdb.empty())
				now = Qdb.top();
		}
		if(json[p] == ':')
		{
			now = lastS;
		}
		if(json[p] == '\&quot;')
		{
			if(flag) //string结束
			{
				lastS-&gt;ed = p;
				if(lastS-&gt;type == T_VALUE)
					now = now-&gt;ft;
				flag = 0;
			}
			else //string开始
			{
				Node* t = new Node();
				lastS = t;
				t-&gt;st = p;
				t-&gt;ft = now;
				if(now-&gt;type == T_KEY)
					t-&gt;type = T_VALUE;
				else
					t-&gt;type = T_KEY;
				now-&gt;lt.push_back(t);
				flag = 1;
			}
		}
		++p;
	}
}

Node* findNode(Node* now, const string&amp; key)
{
	for(int i=0; i&lt;now-&gt;lt.size(); ++i)
	{
		if(now-&gt;lt[i]-&gt;type == T_ARRAY)
		{
			Node* t = findNode(now-&gt;lt[i],key);
			if(t != NULL)
				return t;
		}
		if(now-&gt;lt[i]-&gt;type == T_KEY)
		{
			if(!strncmp(key.c_str(), pjson+now-&gt;lt[i]-&gt;st, key.size()))
				return now-&gt;lt[i];
		}
	}
	return NULL;
}

string query(const string&amp; json, const string&amp; q)
{
	Node* now = root;
	int flag = 0;
	int p = 0;
	int st = 0;
	while(p &lt; q.size())
	{
		if (q[p] == '\&quot;')
		{
			if (flag) //string结束
			{
				now = findNode(now, q.substr(st, p - st + 1));
				if (now == NULL)
					return &quot;Error!&quot;;
				flag = 0;
			}
			else //string开始
			{
				st = p;
				flag = 1;
			}
		}
		++p;
	}
	return 	json.substr(now-&gt;lt[0]-&gt;st, now-&gt;lt[0]-&gt;ed - now-&gt;lt[0]-&gt;st + 1);
}

void clear(Node* now)
{
	for(int i=0; i&lt;now-&gt;lt.size(); ++i)
	{
		clear(now-&gt;lt[i]);
	}
	clear(now);
}

int main()
{
	int T;
	cin &gt;&gt; T;
	while(T--)
	{
		string json;
		cin &gt;&gt; json;
		pjson = json.c_str();
		parse(json);
		//db(json, root-&gt;lt[0]);
		int Q;
		cin &gt;&gt; Q;
		while(Q--)
		{
			string key;
			cin &gt;&gt; key;
			cout &lt;&lt; query(json,key) &lt;&lt; endl;
		}
	}
}
/*
	1
	{&quot;a&quot;:{&quot;b&quot;:&quot;b&quot;,&quot;f&quot;:{&quot;c&quot;:{&quot;a&quot;:{&quot;b&quot;:&quot;s&quot;,&quot;v&quot;:&quot;k&quot;}},&quot;sdf&quot;:&quot;r&quot;}}}

	8
	&quot;a&quot;
	&quot;b&quot;
	&quot;b&quot;.&quot;b&quot;
	&quot;a&quot;.&quot;f&quot;
	&quot;a&quot;.&quot;f&quot;.&quot;c&quot;
	&quot;a&quot;.&quot;f&quot;.&quot;c&quot;.&quot;a&quot;.&quot;b&quot;
	&quot;a&quot;.&quot;f&quot;.&quot;c&quot;.&quot;a&quot;.&quot;v&quot;
	&quot;a&quot;.&quot;f&quot;.&quot;sdf&quot;
*/
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1440</wp:post_id>
		<wp:post_date>2015-05-09 22:19:44</wp:post_date>
		<wp:post_date_gmt>2015-05-09 14:19:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zoj-3826</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e8%a7%a3%e6%9e%90eonhierarchical-notation2014-regional-%e7%89%a1%e4%b8%b9%e6%b1%9f]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>《Java核心技术：卷1—基础篇》二次阅读笔记</title>
		<link>http://www.aemiot.com/java-reader-note.html</link>
		<pubDate>Sun, 03 May 2015 12:11:52 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1484</guid>
		<description></description>
		<content:encoded><![CDATA[第一日
1. strictfp对函数约定使用精准浮点运算，要求运算过程中都截取，已保证在不同机器上结果一致
2. 类型转换规则与c++不同，详情见反思录
3. subString之类的函数实际上返回的都是新建的String（其实想想也知道，毕竟String不可修改）
4. Scanner接受的文件可能不存在，PrintWriter接受的文件或文件名可能也不存在，java将报告一个异常
5. Scanner直接接受一个字符串作为参数，将会将字符串解析为输入的内容，而不是文件名
6. break和continue都有带标签版本
7. 如果启动java程序的环境支持控制台，则可以使用System.console
8. java的启动参数没有文件名，args就是第一个参数

第二日
1. PrintWriter.printf中对场宽的限定，中文字符实际长宽2，而Java认为是1
2. 将final应用在可变的类上，将导致混乱。不可变的类是指没有任何一个方法能改变类数据的类，如String
3. System.out是public static final的，但是System存在一个setOut可以修改final属性的out是因为setOut是Native方法，它能绕开java的存取控制机制。
4. c++中的static有3种语义（前两种沿用c）：多次函数调用保持值不变、关闭变量的外部链接、隶属于类的成员/方法属性，而Java只取了第三种语义。
5. c++因为宽松的隐式转换导致容易出现重载多个参数时的二义性，而Java相对好很多。详情见反思录
6. c允许在全局作用域上多次定义未初始化的全局变量，而c++不允许
7. c++初始化分为静态初始化和动态初始化，动态初始化发生在静态初始化之后。
8. c++对构造函数初始化列表中没有提及的内置类型成员的初始值依赖于对象的作用域（在局部作用域中这些变量不被初始化，而在全局作用域中他们被初始化成0），而Java对类成员始终初始化。
9. Java对类成员的显式域初始化的过程是严格顺序执行的，即使用方法初始化（动态初始化）也不会被推迟（这里可能会使用还未初始化的变量，毕竟编译方法时类所有变量都已经可见）。
10. Java调用构造器的具体处理步骤：
(1)将所有数据域初始化为默认值
(2)按照类声明中出现的次序，依次执行域初始语句或初始化块（注意执行域初始化语句时和初始化块时，所有变量都是可见的）
(3)如果构造器第一行调用了其他构造器，则执行其他构造器
(4)执行构造器主体
11. Java的finalize方法在对象被垃圾回收机销毁时调用，但是调用实际无法被预测，紧缺的资源最后还是手动释放。
12. 当一次导入包中所有类时，若导入的两个包存在同一个类时，当这个类被使用时将会出现二义性，而得到编译错误，解决办法就是使用import指明导入的是哪个类。
13. 没有被导入的类，也可以直接使用包名使用。
14. import static静态导入，使用静态导入则可以不使用类名访问其他类的静态成员。
15. C++更改父类部分成员的访问权限可以在要设置的访问权限下使用using。
16. 如果在构造函数或析构函数中调用虚函数，则运行的是为构造函数或析构函数自身类型定义的版本，毕竟在构造或析构时，对象可能不完整。
17. C++如果采用非public继承将导致无法将子类绑定在基类的指针或引用上，即转型失败，因为非public子类对基类根本没有实际的访问权限，子类对父类的部分成员更改并不影响绑定特性。
18. C++和Java重写方法时，都可以将返回值是父类引用（指针）换成子类引用（指针）。
19. Java中static（不存在对象） final（显示禁止继承） private（没有办法使用基类的引用访问这方法执行动态绑定，所以用静态绑定可以提高性能，注意访问权限只能是越来越宽松，因此不能基类是public而子类是private的情形）属性的方法和构造器（对象不完整）都是静态绑定的。
20. C++98中能使用虚基类的技巧达到禁止继承，而C++11和Java支持使用final禁止类继承，同时final还能阻止重写函数。

第三日
1. Java的instanceof能识别实例的真正类型，判断能否转换到继承树上的指定类型，在进行基类向子类转换前最好先检查一下。
2. 包含一个或多个抽象方法的类本身必须被声明为抽象的。
3. 重写Object.equals最好重写hashCode
4. C++ vector&lt;T&gt;(int initSize), Java ArrayList&lt;T&gt;(int initialCapacity)
5. 自动打包、拆包是编译器认可的，而不是虚拟机。编译器在生成字节码时，插入必要的方法调用。虚拟机只是执行这些字节码。
6. 自动打包规范要求boolean、byte、小于等于127的char、介于-128和127之间的short、int、long打包到相同的对象中。
7. 自动打包不支持类型转换，即Long a = 100; 这样的语句是错误的。
8. 包装类的parseXXX静态方法返回的是基础类型，而valueOf静态方法返回的是包装类型。
9. 因为包装器是不可变的类型，所以也没有办法修改存储的值，从而不能在值传递中穿透性的修改值，而持有者类型xxxHolder因为有set方法，所以可以在值传递的过程中，穿透性的修改值。
10. 可变参数表（只能作为最后的参数）实际上会转换为某个类型的数组，int... args只能接受多个int或一个int[]，如果要接受任意类型就要使用Object，这样接受多个Object(基本类型被自动打包)或一个Object[]，注意这里int[]只能转换为Object而不能是Object[]，因此传递一个Object[]实际是传递了多个Object，而传递一个int[]实际只传递了一个Object(其他基本类型同理)。
11. C++的枚举只是一些名字的集合，这些集合的元素和整型有着对应关系，而Java中枚举类是一个真正的类和该类的若干个实例，甚至可以有构造器、成员和域。并且所有的枚举类都由Enum派生而来，Enum提供了valueOf静态方法根据类的元信息和字符串可以找到对应的实例，提供了toString可以让实例找到枚举常量名，还提供了ordinal方法让实例找到自己的位置序号。
12. 未检查异常（运行时异常）可不捕获，已检查异常则必须捕获并提供处理，Java所有异常都从这两类异常派生而来。
13. Java启动时要加载所需要的类，这显得非常慢，一个可以让用户看起来快的幻觉，main方法中不要显示的引用其他类，而先显示一个启动界面，然后利用Class.forName手动加载其他类。
14. Class对象实际表示的是一个类型，而这个类型未必是一种类，比如基础类型int也有对应的Class。
15. 反射机制能获取不可访问域的信息，但是不能获取它的值、调用函数等。如果没有受到安全管理器的阻止，可以用setAccessible覆盖访问控制。
*16. Arrays.copyOf实际上也利用了反射机制？为什么不能用System.arraycopy拷贝数据，然后用泛型确定类型。
17. 接口中的抽象方法只能是public，默认是public，可以用public描述，但是不能用其他权限描述。同时public是最高权限，其他类实现接口时，不能分配更低的权限，因此也只能是public，从而保证了接口的有效性。同理常量只能是public static final。
18. 基类决定子类equals或compare的概念，最好将这个方法设为final阻止子类修改其概念。子类自己决定equals或compare的概念则应该使用getClass确定类型一致，而不是直接强制转换（对称性无法保证）。
19. 在Object类中，clone方法被声明为protected，因此无法直接在外部使用，但是它充当一个默认实现，因为所有类都是Object的子类，所有子类都可以访问protected，但是子类要实现Cloneable并重新定义clone为public（无论默认实现能不能满足要求，都必须这么干，只是重新定义clone时实现不同，默认实现能满足要求时，其实现就是直接调用super.clone），这才算完成了java中的克隆机制。
20. 数组默认实现的clone是public的。
21. clone也是一个Native方法。毕竟在基类的方法中创建子类对象，访问子类的作用域并拷贝是比较困难的（或许反射可以做到，但是反射弊端还是很多的）。
22. clone会抛出已检查异常。
23. 将内部类声明为private可以阻止其他类创建内部类的实例，只有内部类能使用private访问权限。
24. C++嵌套类，在较新的标准中内部类是和外部类成员具有相同访问权限的，Java的内部类也与外部类成员具有相同的访问权限。
*25. 内部类也是编译器实现，虚拟机不可见的。编译器将内部类编译成单独的一个类，给构造方法加上到外部类的引用，在外部类中添加静态方法根据实例返回实例的成员变量/或修改变量，从而给内部类提供特殊的访问权限（内部类中访问外部类变量会被翻译为特殊静态方法的调用）。特殊的静态方法中含有特殊的符号，从而无法被程序员使用，但精心修改类文件可以调用这个方法（这个需要hack能力了）。同时内部类的私有权限实际上也是编译器动的手脚，虚拟机一无所知（实现没看明白。。）。
26. final的变量（包括基础变量）只可初始化一次，之后不能改变。这个初始化，可以在构造器中用赋值号初始化，也可以在类域中初始化，而不一定要在声明时初始化（即只要在对象完整构造前初始化一次，这点和C++是一样的，但是C++执行构造函数体时，对象已完整构造，只能初始化列表中初始化，并且在C++11之前非static的const变量不能就地初始化）。
27. 匿名内部类因为没有名字，所以也没有构造器。取而代之的是将构造器参数传递给基类的构造器（若继承的是接口，则不能有任何构造器参数）。
*28. 代理可以在运行时创建全新的类（暂时跳过）。
*29. 跳过GUI、applet

第四日
1. C/C++和Java的十进制科学计数法采用e/E尾数指数均为十进制底数10，十六进制科学计数法采用p/P尾数为十六进制指数为十进制底数2。（注意十六进制中e被解释为一个数位）
2. C的const是定义只读变量，C++才把const当做常量，这使C在需要一个常量表达式的时候const变量不能出现。同时C中const type*类型向type*转换，const会被抛弃，C++则禁止这种转换，如果实在要去除const属性，可以使用(type*)(void*)或者const_cast。
3. "如果出现RuntimeException异常，那么就一定是你的问题"是一条相当有道理的规则。应该通过检测数组下标是否越界来避免ArrayIndexOutOfBoundsException；应该通过在使用变量前检测是否为空来杜绝NullPointerException。同理，其他RuntimeException也通常是可以修改程序来避免的。
4. Java语言规范将Error和RuntimeException称为未检查异常，所有的其他异常称为已检查异常。已检查异常需要提供异常处理器。
5. RuntimeException这个名字很容易让人混淆，实际上所有异常都发生在运行时。
6. C++有两个异常处理类，一个是runtime_error，一个是logic_error。logic_error与Java中RuntimeException一样表示程序本身的问题，应该通过修改程序避免，而runtime_error与Java中其他异常一样，表示不可预测运行时问题。
7. 在进行移位运算时，当向左边移动时，如1 &lt;&lt; 35, 对于int类型，由于其占有4个bytes(32bits)，因此在Java中，大于32的移位将对32取模，即1 &lt;&lt; 35的结果等于1 &lt;&lt; 3，以此类推，long将会对64取模。对于int类型而言，如果确实需要获取32位以上的移位，需要将返回值的类型提升到long即可。
8. Java中支持0长度的数组定义，如int et = new int[0]; 在C/C++中，该写法将会导致编译错误。（GNU支持零长数组）
9. 在switch的case语句中引用枚举常量时不需要再加上枚举的类型名。
10. 为了规避局部类只能访问final局部变量的限制，既一次赋值之后不能再被重新赋值。但是我们可以通过数组的方式进行巧妙的规避，在下例中数组counter对象本身是final的，因此他不可以被重新赋值，然而其引用的数组元素则可以被重新赋值。
11. C++没有给出异常声明，函数可能抛出任何异常，Java没有给出异常声明将不能抛出任何已检查异常。
12. C++和Java在重写一个方法时抛出的异常不能比基类中抛出的异常多。
13. C++可以throw任何类型的值，而Java只能抛出Throwable的子类。
14. C++中宏assert()， Java中assert 条件[:表达式]
*15. 日志跳过

第五日
1. C++泛型方法将类型参数放在函数名后，可能会引入二义性，如g(f&lt;a,b&gt;(c))。Java则将泛型方法的类型参数放在了函数名前。
2. 使用泛型时，即便是本类的方法，如果要强制指定类型参数，也必须要带上类型名。Main.&lt;Integer&gt;getFirst(new Integer[]{1,2,3})。
3. Java和C++中int a[]={1,2,3}中只是一种初始化方式，不要认为{1,2,3}就是一个数组。（其他动态类型的语言，通常更自由，直接认为{}就是创建数组或者列表）
4. Java泛型对原型的处理是将原型的泛型参数擦除，用限定类型替换，如果没有指定限定类型则使用Object替换。
5. 如果对泛型的类型参数做限定，子类必须在最前，接口在后(为了提高效率，避免强制转换，最好将标签接口放在最后)。
6. 虚拟机中没有泛型，只有普通类和方法。所有类型参数都被限定类型或者Object替换。桥方法被合成来保持多态。编译器严格检查限定类型（虽然虚拟机不知道），为了保持类型安全性，必要时插入强制类型装好。
7. 不能用基本类型实例化类型参数，运行时类型查询只是适用于原始类型（类型参数已经被擦除）。
8. 泛型类不能扩展Throwable。
9. 参数化类型的数组不合法。
10. 不能直接实例化类型参数变量（同时也不能得到Class信息），毕竟类型参数都被擦除了。如果实在需要实例化，应该通过方法参数从外部传入Class。
11. 泛型类的静态上下文中类型变量无效。
12. Java语言中，你只能根据签名（函数名和参数）来区分函数，而虚拟机则可以根据函数的全部信息来区分函数（包括返回值）。
13. 子类继承泛型类的某个版本，需要特别注意，详情见反思录。
14. 可以将子类的数组绑定到父类的数组引用上，如果试图将一个父类的对象绑定到数组的某个位置，虚拟机将会抛出ArrayStoryExpection。C++不存在这样的问题，因为C++的数组实际上是指向首元素的指针，如果让父类的指针指向了子类数组的首地址，那么数组中全都是对象实例，实例赋值会自动裁剪对象，所以子类给父类赋值是合法的；如果让指向父类的动态数组（指向指针的指针）A*(*)，试图完全模拟Java的情况，会发现C++的指针无法从B*(*)转到A*(*)，虽然C++允许将子类的指针隐式转换到父类的指针，但是B*和A*并不存在什么关系。如果使用强制转换，显然这就已经属于未定义行为了。

第六日
1. C/C++数组，结构体，类都是作为一个整体（内部总是从低地址向高地址），而和其他变量在一起时，则是根据是堆和栈而定。
2. 通配符运用为&lt;? extends Base&gt;将使得泛型类中的方法无法接受Base类型的参数，而通配符运用为&lt;? super Base&gt;将使得泛型类中的方法无法返回Base类型的参数。
3. 要想支持擦除的转换，就需要强行一个类或类型变量不能同时成为两个接口类型的子类，而这两个接口是同一接口的不同类型参数化。
4. C++的类模板的成员函数仅在被调用时实例化，所以一个类可能因为不满足某些条件，只能使用模板里的部分方法，如std::vector去实例化成一个没有默认构造函数的类。
5. C语言中函数声明中参数的名字没有实际意义，而参数列表起到约束调用参数作用。C方式的符号文件只有名字是有用的。甚至C语言早期存在省略参数列表的写法（只留下一对圆括号），这种写法保留至今（兼容，但不推荐）。而C++不允许，毕竟要根据参数进行重载。
6. C语言调用函数前，可以不声明函数原型（不推荐，返回值默认int，void及int以下的整型也可用），而C++禁止这种做法。

第七日
1. C/C++内置sort是快速排序，C++为list设置特有的sort执行归并排序，而Java集合内置的sort是归并排序。
2. Java线程分为new,runable,blocked,waiting,timed waiting, terminated六种状态。
3. Java中的每一个对象都有一个内部锁，如果一个方法用synchronized声明，那么对象的锁将保护整个方法。内部对象锁只有一个相关条件。同时Object类有几个final方法（wait、notifyAll、notify）可以控制这个条件变量。
4. 将静态方法声明为synchronized也是合法的。如果调用这种方法，该类的class对象将被锁住。因此，没有其他线程可以调用这个类的同步静态方法。
5. 内部锁和条件存在一些局限。不能中断一个正在试图获得锁的线程，试图获得锁时不能设定超时，每个锁仅有一个条件变量。
6. 客户端锁定是非常脆弱的，毕竟它不一定使用内部锁。
7. C++的Lock不能保证编译器的单线程优化会产生什么结果，volatile可以保证编译器不会过度优化。Java的Lock可以保证编译器的单线程优化不会影响多线程的语义，但是volatile也是保证编译器不会过度优化，Java在使用锁机制时，volatile并没有什么作用，因为锁已经保证了不会过度优化。

第八日
1. InputStream和WriteStream底层的read方法和write方法都是阻塞的（在输入数据可用、检测到流末尾或者抛出异常前，方法一直阻塞）。
2. java(JDK1.6)switch语句支持的类型：byte、char、short、int、枚举（小于int的整型实际上是发生了整型提升）。JDK1.7时，又增加了String。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1484</wp:post_id>
		<wp:post_date>2015-05-03 20:11:52</wp:post_date>
		<wp:post_date_gmt>2015-05-03 12:11:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-reader-note</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="%e6%a0%b8%e5%bf%83%e6%8a%80%e6%9c%af"><![CDATA[核心技术]]></category>
		<category domain="category" nicename="jyzt"><![CDATA[经验之谈]]></category>
		<category domain="post_tag" nicename="%e9%98%85%e8%af%bb%e7%ac%94%e8%ae%b0"><![CDATA[阅读笔记]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%8ajava%e6%a0%b8%e5%bf%83%e6%8a%80%e6%9c%af%ef%bc%9a%e5%8d%b71-%e5%9f%ba%e7%a1%80%e7%af%87%e3%80%8b%e4%ba%8c%e6%ac%a1%e9%98%85%e8%af%bb%e7%ac%94%e8%ae%b0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>styles.xml中命名空间的问题&#124;Android日常</title>
		<link>http://www.aemiot.com/android-0.html</link>
		<pubDate>Sat, 09 May 2015 16:04:18 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1502</guid>
		<description></description>
		<content:encoded><![CDATA[[toggle title="背景"]
<p>因为最近决定重构下自己的代码，所以除了拓展基本UI控件的功能外，补充了UI新增属性的xml配置方式。首先是在attrs.xml中配置的属性，在layout.xml中能以命名空间的方式去访问，接着试图给自己的控件添加几种style。但是问题就是在style.xml中想像在layout一样用命名空间访问属性，却在编译时收到了Error。</p>
[/toggle]

<h1>状况描述</h1>
在styles.xml中使用带有自定义命名空间的属性被报告Error.

[code lang="xml"]
&lt;!-- res/values/attrs.xml --&gt;

&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;resources&gt;
    &lt;declare-styleable name=&quot;EditTextPlus&quot;&gt;
        &lt;attr name=&quot;deleteButton&quot; format=&quot;reference&quot; /&gt;
    &lt;/declare-styleable&gt;
&lt;/resources&gt;

[/code]

[code lang="xml"]
&lt;!-- res/layout/main_layout.xml --&gt;

&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;RelativeLayout 
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    android:id=&quot;@+id/RelativeLayout1&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;match_parent&quot;
    android:layout_alignParentLeft=&quot;true&quot; &gt;

    &lt;com.aemiot.test.View.EditTextPlus
        android:id=&quot;@+id/editText1&quot;
        style=&quot;@style/EditTextPlus&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:layout_alignParentTop=&quot;true&quot;
        android:layout_centerHorizontal=&quot;true&quot;
        android:layout_marginTop=&quot;162dp&quot;
        android:ems=&quot;10&quot;
        android:singleLine=&quot;true&quot; /&gt;

	&lt;com.aemiot.test.View.EditTextPlus
	    android:id=&quot;@+id/editText2&quot;
	    style=&quot;@style/EditTextPlusNight&quot;
	    android:layout_width=&quot;wrap_content&quot;
	    android:layout_height=&quot;wrap_content&quot;
	    android:layout_alignLeft=&quot;@+id/editText1&quot;
	    android:layout_centerVertical=&quot;true&quot;
	    android:ems=&quot;10&quot;
	    android:singleLine=&quot;true&quot; /&gt;

&lt;/RelativeLayout&gt;

[/code]

[code lang="xml"]
&lt;!-- res/values/styles.xml --&gt;

&lt;resources 
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    xmlns:aem=&quot;http://schemas.android.com/apk/res/com.aemiot.test&quot; &gt;

    &lt;!-- EditTextPlus --&gt;
    &lt;style name=&quot;EditTextPlus&quot;&gt;
        &lt;!-- 如果这里试图用aem:deleteButton将会报告Error: No resource found that matches the given name: attr 'aem:deleteButton'. --&gt;
        &lt;item name=&quot;deleteButton&quot;&gt;@drawable/editviewplus_deletebutton&lt;/item&gt;
    	&lt;item name=&quot;android:background&quot;&gt;@drawable/editviewplus_background&lt;/item&gt;
    	&lt;item name=&quot;android:textColor&quot;&gt;@android:color/black&lt;/item&gt;
    &lt;/style&gt;
    
    &lt;style name=&quot;EditTextPlusNight&quot;&gt;
        &lt;item name=&quot;deleteButton&quot;&gt;@drawable/editviewplus_deletebutton_night&lt;/item&gt;
    	&lt;item name=&quot;android:background&quot;&gt;@drawable/editviewplus_background_night&lt;/item&gt;    
    	&lt;item name=&quot;android:textColor&quot;&gt;@android:color/white&lt;/item&gt; 
    &lt;/style&gt;
    
&lt;/resources&gt;

[/code]

<h1>解决办法</h1>
这个问题的具体原因不详，从表面现象上看这里是不支持自己定义的命名空间。那就只好不用命名空间，但是这里又不像在layout里一样不带命名空间的任意一个属性名字都可以被传入，它会在指定包中的values/attrs.xml中寻找属性，如果找不到将会报告一个错误。默认是当前程序包，你可以使用com.aemiot.test:deleteButton来显式指定包名。


[note title="参考文章"]
<a href="http://blog.csdn.net/zhufuing/article/details/41395219" title="http://blog.csdn.net/zhufuing/article/details/41395219">如何在android style文件中使用自定义属性</a>
[/note]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1502</wp:post_id>
		<wp:post_date>2015-05-10 00:04:18</wp:post_date>
		<wp:post_date_gmt>2015-05-09 16:04:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>android-0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="qrs"><![CDATA[应用开发]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>[fix]SwipeMenuListView派生Adapter造成滚动显示异常</title>
		<link>http://www.aemiot.com/git-swipemenulistview-0.html</link>
		<pubDate>Thu, 14 May 2015 15:47:39 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1518</guid>
		<description></description>
		<content:encoded><![CDATA[[note title="SwipeMenuListView介绍"]
一个针对ListView item的侧滑菜单。
项目地址：<a href="https://github.com/baoyongzhang/SwipeMenuListView" title="https://github.com/baoyongzhang/SwipeMenuListView" target="_blank">https://github.com/baoyongzhang/SwipeMenuListView</a>
[/note]

因为测试时，暂时没有将Adapter的getView写成最大化利用原View的方式，而直接填充了一个新View，所以发现了项目的一个bug。
该bug表现为在getView时传入旧View，你却返回了新View，新View不能被利用。
现已将bug修复并提交到原仓库。


原始代码（有bug）：
[code lang="java"]
public class SwipeMenuAdapter implements WrapperListAdapter,
		OnSwipeItemClickListener {

	private ListAdapter mAdapter;
	private Context mContext;
	private OnMenuItemClickListener onMenuItemClickListener;

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		SwipeMenuLayout layout = null;
		if (convertView == null) {
			View contentView = mAdapter.getView(position, convertView, parent);
			SwipeMenu menu = new SwipeMenu(mContext);
			menu.setViewType(mAdapter.getItemViewType(position));
			createMenu(menu);
			SwipeMenuView menuView = new SwipeMenuView(menu,
					(SwipeMenuListView) parent);
			menuView.setOnSwipeItemClickListener(this);
			SwipeMenuListView listView = (SwipeMenuListView) parent;
			layout = new SwipeMenuLayout(contentView, menuView,
					listView.getCloseInterpolator(),
					listView.getOpenInterpolator());
			layout.setPosition(position);
		} else {
			layout = (SwipeMenuLayout) convertView;
			layout.closeMenu();
			layout.setPosition(position);
			//这里有问题，可以看到如果新生成view，这个view不能被利用
			View view = mAdapter.getView(position, layout.getContentView(),
					parent);
		}
		return layout;
	}
	//...
}
[/code]

改写逻辑修正：
[code lang="java"]
/**
 * 
 * @author aem3372
 * @date 2015-5-14
 * 
 * fix: Display abnormal, When mAdapter return View different from 
 *      convertView and convertView is not null
 */
@Override
public View getView(int position, View convertView, ViewGroup parent) {
	SwipeMenuLayout layout = null;
	View view = null;
	if (convertView != null) {
		layout = (SwipeMenuLayout) convertView;
		layout.closeMenu();
		layout.setPosition(position);
		view = mAdapter.getView(position, layout.getContentView(),
				parent);
	}

	if (convertView == null || view != layout.getContentView()) {
		if(view == null) {
			view = mAdapter.getView(position, convertView, parent);
		}
		SwipeMenu menu = new SwipeMenu(mContext);
		menu.setViewType(mAdapter.getItemViewType(position));
		createMenu(menu);
		SwipeMenuView menuView = new SwipeMenuView(menu,
				(SwipeMenuListView) parent);
		menuView.setOnSwipeItemClickListener(this);
		SwipeMenuListView listView = (SwipeMenuListView) parent;
		layout = new SwipeMenuLayout(view, menuView,
				listView.getCloseInterpolator(),
				listView.getOpenInterpolator());
		layout.setPosition(position);
	}
	return layout;
}
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1518</wp:post_id>
		<wp:post_date>2015-05-14 23:47:39</wp:post_date>
		<wp:post_date_gmt>2015-05-14 15:47:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git-swipemenulistview-0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="qrs"><![CDATA[应用开发]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[fixswipemenulistview%e4%b8%ad%e6%b4%be%e7%94%9fswipemenuadapter%e9%80%a0%e6%88%90%e6%bb%9a%e5%8a%a8%e6%98%be%e7%a4%ba%e5%bc%82%e5%b8%b8]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TitleBaseActivity组件封装整理笔记&#124;Android日常</title>
		<link>http://www.aemiot.com/android-1.html</link>
		<pubDate>Sun, 17 May 2015 06:03:39 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1530</guid>
		<description></description>
		<content:encoded><![CDATA[[note title="TitleBaseActivity布局的方法一"]

<strong>单独制作title_layout.xml，然后在派生的Activity布局开头include该布局，TitleBaseActivity实现提供对Title的控制方法。</strong>

<h2>注意</h2>
title_layout.xml是被动的，由include该布局的Layout XML决定显示它的位置。
<h2>优点</h2>
预览Layout XML时看到的是完整的布局。
<h2>缺陷</h2>
所有派生Activity的Layout XML都与title_layout.xml有较强的耦合，实现对用户不透明，用户替换基类需要修改Layout XML。

[/note]


[note title="TitleBaseActivity布局的方法二"]

<strong>单独制作title_layout.xml，然后重写TitleBaseActivity的setContentView，在该方法中分别填充title_layout.xml和参数指定的布局，接着将两个布局合并返回。</strong>

<h2>注意</h2>
title_layout.xml可以是主动的，也可以是被动的。
如果想将title_layout.xml设计成主动的，设计title_layout.xml时放置具名布局，而此时合并两个布局的方法是将参数指定的布局作为子视图添加到title_layout的具名布局中。
如果想将title_layout.xml设计成被动的，设计title_layout.xml则只包含title相关内容，而此时合并两个布局的方法是新建一个布局，将两个布局分别作为子视图添加到新建的布局中。
<h2>优点</h2>
title_layout.xml将只与TitleBaseActivity有较弱耦合，实现对用户透明，用户替换基类不需要修改Layout XML。
<h2>缺陷</h2>
预览Layout XML时看到的是部分布局。

[/note]

看起来用方案二解决问题更优雅一些。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1530</wp:post_id>
		<wp:post_date>2015-05-17 14:03:39</wp:post_date>
		<wp:post_date_gmt>2015-05-17 06:03:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>android-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="qrs"><![CDATA[应用开发]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>拓展控件（自定义视图）的方法&#124;Android日常</title>
		<link>http://www.aemiot.com/android-2.html</link>
		<pubDate>Mon, 25 May 2015 16:09:15 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1559</guid>
		<description></description>
		<content:encoded><![CDATA[[note title="方案一"]
<string>从某个控件派生，拓展其功能。使用该类时，在Layout XML中直接使用类名即可。</string>
<h2>优点</h2>
方便替换，在需要父控件的，通常可以换成子控件
方便提供风格控制
<h2>缺点</h2>
继承方式的通病，View往往职责很多，在不了解内部机制的情况下往往难以控制，甚至不能控制。
持续拓展时，随着多次继承，职责将越来越混乱。
<h2>亲身跳坑1</h2>
给EditText添加右侧删除按钮，利用setCompoundDrawables设置右侧删除显示，但是setCompoundDrawables是一个public方法，并且它还有几个同族方法，如果被外部调用将造成显示异常，一种阻止方法是在本类中显式调用父类的setCompoundDrawables，本类中重写setCompoundDrawables，在实现中抛出一个RuntimeException族的异常。但是缺陷也是显然的，你不了解内部调用过程的话（已知构造时可能被调用），你无法保证父类不会调用setCompoundDrawables。如果不幸被父类调用setCompoundDrawables，则抛出异常。
<h2>亲身跳坑2</h2>
还是给EditText添加右侧按钮，重写onTouchEvent实现父类删除功能，我需要额外相应的是ACTION_UP，如果在这里响应完不调用父类中的方法，在不了解内部的情况下似乎是不合理的，可能出现未知问题，而如果不这么做则无法屏蔽在删除按钮上长按导致的弹窗等问题。事实上可以推测出将ACTION_DOWN到ACTION_UP之间的整个动作都一起屏蔽通常是不会有问题的。
[/note]
[note title="方案二"]
<string>从某个布局派生，功能写在派生类中，视图由Layout XML控制，其中类通过ID找文件。Layout XML的根节点就是该类。</string> 
[code lang="java"] 
public class MyClass extends LinearLayout{
    /**
     * Finalize inflating a view from XML.  This is called as the last phase
     * of inflation, after all child views have been added.
     *
     * &lt;p&gt;Even if the subclass overrides onFinishInflate, they should always be
     * sure to call the super method, so that we get called.
     */
    /*子视图被添加后才能获得Layout XML中定义的子视图。跟踪框架源码，可以看到
      该方法在XML中所有子视图被添加完成后调用，因此可以在这个方法中获取子视图。
     */
    @Override
    protected void onFinishInflate() {
        super.onFinishInflate();
            
    }

    // ... 
}
[/code]

[code lang="xml"]
&lt;package.MyClass xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
    &lt;View android:id=&quot;@+id/view1&quot;/&gt;
    &lt;View android:id=&quot;@+id/view2&quot;/&gt;
    &lt;!-- ... --&gt;
&lt;/package.MyClass&gt;
[/code]
<h2>使用时</h2>
[code lang="xml"]
&lt;include 
    android:id=&quot;@+id/layout1&quot;
    layout=&quot;@layout/mylayout&quot; /&gt;
&lt;include 
    android:id=&quot;@+id/layout2&quot;
    layout=&quot;@layout/mylayout&quot; /&gt;
[/code]
<h2>题外话</h2>
因为include导致内部id重复，无法在主布局节点上直接使用id找到特定元素。只能间接查找，例如：
[code lang="java"]
View view11 = findViewById(R.id.layout1).findViewById(R.id.view1);
View view12 = findViewById(R.id.layout1).findViewById(R.id.view1);
[/code]
但是需要知道的是，获取这些子元素应该是不合理的，它很可能会破坏原有逻辑。

<h2>优点</h2>
灵活的定制视图，只需要保持Id一致就可以，接口也可以大幅度重新定制。
优秀的持续拓展能力，只需要继承或集成它，同时修改Layout XML就能加入新功能。
<h2>缺点</h2>
内部布局对用户暴露，用户可以很轻易的获取子视图并控制，打破原有逻辑。
可能要做较多的接口传递。特别是扩展简单功能的时候，仍然需要传递很多控制方法。
如果只是在某个类型视图上追加一些简单功能，也无法在需要某个基础控件的地方直接替换，而需要修改调用方代码。
include标签中无法设置布局参数，布局参数是被包含布局根节点的参数，控制不灵活。可以通过简单的额外嵌套一层布局来相对加强控制，控制力度任然有限，例如wrap_content，依然不能变成match_parent，而且加深了布局深度，即性能损失。也可以通过手工将XML内容展开，但是显然这样处理非常的不好。还可以自定义一个简单的布局专门用来传递布局参数给它的唯一子视图。
[/note]
[note title="方案三"]
在方案二的基础上做了一些修改，主要是为了处理无法灵活控制布局。类定义不变，其他变化如下：
[code lang="xml"]
&lt;marge xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
    &lt;View android:id=&quot;@+id/view1&quot;/&gt;
    &lt;View android:id=&quot;@+id/view2&quot;/&gt;
    &lt;!-- ... --&gt;
&lt;/marge&gt;
[/code]
使用时：
[code lang="xml"]
&lt;package.MyClass
    android:id=&quot;@+id/layout1&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:layout_height=&quot;wrap_content&quot; &gt;
        
    &lt;include 
        layout=&quot;@layout/mylayout&quot; /&gt;

&lt;/package.MyClass&gt;

&lt;package.MyClass
    android:id=&quot;@+id/layout2&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:layout_height=&quot;wrap_content&quot; &gt;
        
    &lt;include 
        layout=&quot;@layout/mylayout&quot; /&gt;

&lt;/package.MyClass&gt;
[/code]

<h2>优点</h2>
同方案二，并解决了布局参数难以调整的缺点。
<h2>缺点</h2>
同方案二缺点，除布局参数问题。
marge作为根节点，Layout XML预览错乱。
[/note]
[note title="方案四"]
在方案二或方案三基础上将响应onFinishInflate改为在OnCreate中使用LayoutInflate填充视图，实际上是将布局主导视图换成了类主导视图。接着定义空间自己的XML属性。
<h2>优点</h2>
使用更像原生控件，子控件被封装在内。
<h2>缺点</h2>
对视图只有有限的控制。
[/note]

<h1>总结</h1>
四种方案都有各自的优缺点，应该根据不同场景来使用。像方案一就很适合做简单扩展，方案四非常适合做逻辑功能扩展。方案二适合在特定项目中使用，方案三适合对视图控制非常灵活时使用。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1559</wp:post_id>
		<wp:post_date>2015-05-26 00:09:15</wp:post_date>
		<wp:post_date_gmt>2015-05-25 16:09:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>android-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Life Recode</title>
		<link>http://www.aemiot.com/life-recode.html</link>
		<pubDate>Fri, 26 Jun 2015 13:15:25 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1571</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Life Recode</h1>

采用一系列词语（记录）来描述每一天，或许记录会有点奇怪，但是关注我的人，应该知道我为什么写下这个吧，嘿嘿。

详情见该页面:<a href="http://www.aemiot.com/life" title="http://www.aemiot.com/life">http://www.aemiot.com/life</a>

管理系统后台采用PHP-CI 3.0框架，管理系统前端基于Bootstarp的管理模板。

[warning]
作者:Aem
本文版权归作者和www.aemiot.com共有，未征得作者本人同意之前，请勿将本文内容用于任何商业用途。 欢迎非商业用途转载，但请在明显位置注明本文作者和出处链接，否则我们保留追究法律责任的权利。
[/warning]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1571</wp:post_id>
		<wp:post_date>2015-06-26 21:15:25</wp:post_date>
		<wp:post_date_gmt>2015-06-26 13:15:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>life-recode</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>1</wp:is_sticky>
		<category domain="category" nicename="zp"><![CDATA[作品]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cocos2dx引擎学习笔记-自带宏及内部实现（持续更新）</title>
		<link>http://www.aemiot.com/cocos2dx-macro.html</link>
		<pubDate>Sat, 04 Jul 2015 08:33:05 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1581</guid>
		<description></description>
		<content:encoded><![CDATA[[note]
本文以Cocos2dx-3.2为探究。
[/note]

<h1>禁止复制</h1>

[code lang="cpp"]
//CCPlatformMacros.h
//...
// A macro to disallow the copy constructor and operator= functions&lt;
// This should be used in the private: declarations for a class
#if defined(__GNUC__) &amp;&amp; ((__GNUC__ &gt;= 5) || ((__GNUG__ == 4) &amp;&amp; (__GNUC_MINOR__ &gt;= 4))) \
	|| (defined(__clang__) &amp;&amp; (__clang_major__ &gt;= 3)) || (_MSC_VER &gt;= 1800)
#define CC_DISALLOW_COPY_AND_ASSIGN(TypeName) \
    TypeName(const TypeName &amp;) = delete; \
    TypeName &amp;operator =(const TypeName &amp;) = delete;
#else
#define CC_DISALLOW_COPY_AND_ASSIGN(TypeName) \
    TypeName(const TypeName &amp;); \
    TypeName &amp;operator =(const TypeName &amp;);
#endif
[/code]

[code lang="cpp"]
//ccMacros.h
//...
#define DISALLOW_COPY_AND_ASSIGN(TypeName) \
            TypeName(const TypeName&amp;);\
            void operator=(const TypeName&amp;)
[/code]

在Cocos2dx中能找到2个关于禁止复制的宏(至于为什么有两个，因为3.0开始大量去除名称前缀CC，不过为什么去CC后的版本为什么不考虑C++11的特性就不知道了，或许只是暂时没有加上)。

禁止复制的原理挺简单的，支持C++11的平台可以使用C++11删除默认函数的特性来将复制构造函数和赋值操作符函数移除，如果不支持则将作为私有函数只声明不定义（C++Primer上提到过），从而引发编译器报错。

在code style文档中写道，如果需要复制的话，尽可能提供一个类似clone()的函数，而不是使用复制构造和赋值操作符函数，事实上引擎已经提供了相关接口。如果不需要复制，就更应该禁止复制。同时推荐在STL容器中存储指针而不是对象。（这么做的很大一部分原因是，cocos2dx引入了垃圾清除机制而大量使用指针）]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1581</wp:post_id>
		<wp:post_date>2015-07-04 16:33:05</wp:post_date>
		<wp:post_date_gmt>2015-07-04 08:33:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cocos2dx-macro</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gamepro"><![CDATA[游戏开发]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Too young Too simple&#124;填坑汇总</title>
		<link>http://www.aemiot.com/too-young-too-simple.html</link>
		<pubDate>Sun, 30 Aug 2015 16:23:11 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1590</guid>
		<description></description>
		<content:encoded><![CDATA[[note]
因为第一次出来实习，瞬间感觉以前对用户体验关注过少的Demo什么的都弱爆了，各种要求一上来，就需要各种奇怪的姿势来处理，接着就挖出了一个个坑，有些已经解决了，有些不明觉厉换方案处理了。不管怎么样，坑还是要先记下来的，一个个来看~
[/note]
<h1>PopupWindow: 硬件加速你快回来，你快回来，猝！</h1>

因为业务需求，使用了PopupWindow，但是开发到一半发现图片切换非常之卡。
打开Android对函数调用监控，发现耗时最多的是drawBitmap！！！
开发人员工具监控gpu，发现gpu无作为，然后意识到drawBitmap是cpu的绘制函数。
可是为什么是cpu绘图！！！为什么是cpu绘图！！！为什么是cpu绘图！！！（已经在window级别开启了硬件加速）修改代码查看PopWindow显示的View的硬件加速是否开启，果不其然硬件加速被关了。
担心是手淘架构的影响，自己又新建了个Demo排除了是手淘的问题，接着在自己的Demo开启全程序硬件加速，发现Activity中其他元素都已经是硬件加速状态，然后去google官网恶补了一下硬件加速和PopupWindow知识，还是没想明白为什么会失效，倒是打消了我给View单独开硬件的想法（目前不支持在View级别开启硬件加速，只支持关闭），打开PopupWindow的源码也没看到有自己关掉硬件加速。
无奈，只好换Activity作为载体，似乎有点重了，不过PopupWindow没法使用硬件加速影响更大。
---------------------------------------------------------------
9.1凌晨更新
再次去了解了下WindowManager机制，似乎发现了什么，这是个系统级服务，即使Token是Activity所在Window的，也不代表View在那个Window里。同时注意到，窗口所使用的动画设置。它必须是一个系统资源而不是应用程序资源，因为窗口管理器不能访问应用程序。这么说直接向WindowManager中添加的View很可能是不属于Application的。大致有了一个方向，具体的之后再看，明天还得早起呢~

<h1>小米等系统的权限确认框导致Touch事件丢失</h1>

实现语音聊天的过程中，按下录音Button，需要开始录音，松开则需要停止。在小米这样系统被深度定制的系统上，第一次进行录音会弹出一个权限确认框，接着ACTION_UP事件就被权限确认框给吃掉了，导致整个流程异常。目前的解决方案是判断权限框阻塞的那行代码的执行事件，期待找到更好的方法。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1590</wp:post_id>
		<wp:post_date>2015-08-31 00:23:11</wp:post_date>
		<wp:post_date_gmt>2015-08-30 16:23:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>too-young-too-simple</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.aemiot.com/1616.html</link>
		<pubDate>Sat, 31 Oct 2015 06:18:37 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1616</guid>
		<description></description>
		<content:encoded><![CDATA[<p><strong>strong text</strong>
<a href="http://www.aemiot.com">enter link description here</a></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1616</wp:post_id>
		<wp:post_date>2015-10-31 14:18:37</wp:post_date>
		<wp:post_date_gmt>2015-10-31 06:18:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>1616</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1446272477]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.aemiot.com/1621.html</link>
		<pubDate>Sat, 31 Oct 2015 06:27:04 +0000</pubDate>
		<dc:creator>Eluckv</dc:creator>
		<guid isPermaLink="false">http://www.aemiot.com/?p=1621</guid>
		<description></description>
		<content:encoded><![CDATA[<pre><code>var x = 4;
x += 1;
</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1621</wp:post_id>
		<wp:post_date>2015-10-31 14:27:04</wp:post_date>
		<wp:post_date_gmt>2015-10-31 06:27:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>1621</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="calc"><![CDATA[算法/数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1448546059]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_comments_status</wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{i:705;s:4:"spam";i:703;s:4:"spam";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>705</wp:comment_id>
			<wp:comment_author><![CDATA[十元换百万]]></wp:comment_author>
			<wp:comment_author_email>273734941@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.cao.eeequn.com/</wp:comment_author_url>
			<wp:comment_author_IP>112.252.215.63</wp:comment_author_IP>
			<wp:comment_date>2015-11-16 13:21:27</wp:comment_date>
			<wp:comment_date_gmt>2015-11-16 05:21:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[【最嚣张逆向网赚，只需投资十元，什么不干，坐收百万】

【逆向发展，五五倍增，自动下滑，终生收钱，十级提成】

【网赚项目，名师讲座，设计素材，百万资源，无限下载】

注册网址：

http://www.cao.eeequn.com/

【项目优势：】

每人限定5个一级VIP下线，多推荐的自动下滑到一级下线名下

从而成为推荐者的二级下线。以此类推，直至十级。

无论这个下线是谁推荐的，你都有钱。

你直接推荐的每个你提成5元，上线或下线推荐的每个你提成0.5元

我每日群发邮件评论十万，做我下线，你什么都不干，照样有钱赚。]]></wp:comment_content>
			<wp:comment_approved>post-trashed</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1447651287.9263041019439697265625;s:7:"message";s:32:"Akismet 认为这是垃圾评论";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:51:{s:15:"comment_post_ID";i:1621;s:14:"comment_author";s:15:"十元换百万";s:20:"comment_author_email";s:16:"273734941@qq.com";s:18:"comment_author_url";s:26:"http://www.cao.eeequn.com/";s:15:"comment_content";s:710:"【最嚣张逆向网赚，只需投资十元，什么不干，坐收百万】

【逆向发展，五五倍增，自动下滑，终生收钱，十级提成】

【网赚项目，名师讲座，设计素材，百万资源，无限下载】

注册网址：

http://www.cao.eeequn.com/

【项目优势：】

每人限定5个一级VIP下线，多推荐的自动下滑到一级下线名下

从而成为推荐者的二级下线。以此类推，直至十级。

无论这个下线是谁推荐的，你都有钱。

你直接推荐的每个你提成5元，上线或下线推荐的每个你提成0.5元

我每日群发邮件评论十万，做我下线，你什么都不干，照样有钱赚。";s:12:"comment_type";s:0:"";s:14:"comment_parent";i:0;s:7:"user_ID";i:0;s:7:"user_ip";s:14:"112.252.215.63";s:10:"user_agent";s:116:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0";s:8:"referrer";s:29:"http://www.aemiot.com/?p=1621";s:4:"blog";s:21:"http://www.aemiot.com";s:9:"blog_lang";s:5:"zh_CN";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:31:"http://www.aemiot.com/1621.html";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:15:"十元换百万";s:10:"POST_email";s:16:"273734941@qq.com";s:8:"POST_url";s:26:"http://www.cao.eeequn.com/";s:12:"POST_comment";s:710:"【最嚣张逆向网赚，只需投资十元，什么不干，坐收百万】

【逆向发展，五五倍增，自动下滑，终生收钱，十级提成】

【网赚项目，名师讲座，设计素材，百万资源，无限下载】

注册网址：

http://www.cao.eeequn.com/

【项目优势：】

每人限定5个一级VIP下线，多推荐的自动下滑到一级下线名下

从而成为推荐者的二级下线。以此类推，直至十级。

无论这个下线是谁推荐的，你都有钱。

你直接推荐的每个你提成5元，上线或下线推荐的每个你提成0.5元

我每日群发邮件评论十万，做我下线，你什么都不干，照样有钱赚。";s:20:"POST_comment_post_ID";s:4:"1621";s:19:"POST_comment_parent";s:1:"0";s:26:"POST_akismet_comment_nonce";s:10:"3616ce7b92";s:15:"SERVER_SOFTWARE";s:9:"LiteSpeed";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:11:"HTTP_ACCEPT";s:3:"*/*";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:14:"CONTENT_LENGTH";s:4:"2264";s:9:"HTTP_HOST";s:14:"www.aemiot.com";s:12:"HTTP_REFERER";s:29:"http://www.aemiot.com/?p=1621";s:15:"HTTP_USER_AGENT";s:116:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0";s:18:"HTTP_CACHE_CONTROL";s:8:"no-cache";s:13:"DOCUMENT_ROOT";s:26:"/home/aemiotc1/public_html";s:11:"REMOTE_ADDR";s:14:"112.252.215.63";s:11:"REMOTE_PORT";s:5:"56046";s:11:"SERVER_ADDR";s:12:"23.234.195.5";s:11:"SERVER_NAME";s:14:"www.aemiot.com";s:12:"SERVER_ADMIN";s:20:"webmaster@aemiot.com";s:11:"SERVER_PORT";s:2:"80";s:15:"SCRIPT_FILENAME";s:47:"/home/aemiotc1/public_html/wp-comments-post.php";s:12:"QUERY_STRING";s:0:"";s:10:"SCRIPT_URI";s:42:"http://www.aemiot.com/wp-comments-post.php";s:10:"SCRIPT_URL";s:21:"/wp-comments-post.php";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1447651287";s:4:"argv";s:0:"";s:4:"argc";s:1:"0";s:25:"comment_post_modified_gmt";s:19:"2015-10-31 06:27:04";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>703</wp:comment_id>
			<wp:comment_author><![CDATA[bateer]]></wp:comment_author>
			<wp:comment_author_email>923728405@qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.bateer.eeequn.com/</wp:comment_author_url>
			<wp:comment_author_IP>27.220.185.108</wp:comment_author_IP>
			<wp:comment_date>2015-11-11 21:35:46</wp:comment_date>
			<wp:comment_date_gmt>2015-11-11 13:35:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[从百度点进来的，支持一下]]></wp:comment_content>
			<wp:comment_approved>post-trashed</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[true]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1447248946.3657910823822021484375;s:7:"message";s:32:"Akismet 认为这是垃圾评论";s:5:"event";s:10:"check-spam";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:51:{s:15:"comment_post_ID";i:1621;s:14:"comment_author";s:6:"bateer";s:20:"comment_author_email";s:16:"923728405@qq.com";s:18:"comment_author_url";s:29:"http://www.bateer.eeequn.com/";s:15:"comment_content";s:36:"从百度点进来的，支持一下";s:12:"comment_type";s:0:"";s:14:"comment_parent";i:0;s:7:"user_ID";i:0;s:7:"user_ip";s:14:"27.220.185.108";s:10:"user_agent";s:116:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0";s:8:"referrer";s:29:"http://www.aemiot.com/?p=1621";s:4:"blog";s:21:"http://www.aemiot.com";s:9:"blog_lang";s:5:"zh_CN";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:31:"http://www.aemiot.com/1621.html";s:21:"akismet_comment_nonce";s:6:"failed";s:11:"POST_author";s:6:"bateer";s:10:"POST_email";s:16:"923728405@qq.com";s:8:"POST_url";s:29:"http://www.bateer.eeequn.com/";s:12:"POST_comment";s:36:"从百度点进来的，支持一下";s:20:"POST_comment_post_ID";s:4:"1621";s:19:"POST_comment_parent";s:1:"0";s:26:"POST_akismet_comment_nonce";s:10:"6c08f8a34a";s:15:"SERVER_SOFTWARE";s:9:"LiteSpeed";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:11:"HTTP_ACCEPT";s:3:"*/*";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:14:"CONTENT_LENGTH";s:3:"266";s:9:"HTTP_HOST";s:14:"www.aemiot.com";s:12:"HTTP_REFERER";s:29:"http://www.aemiot.com/?p=1621";s:15:"HTTP_USER_AGENT";s:116:"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0";s:18:"HTTP_CACHE_CONTROL";s:8:"no-cache";s:13:"DOCUMENT_ROOT";s:26:"/home/aemiotc1/public_html";s:11:"REMOTE_ADDR";s:14:"27.220.185.108";s:11:"REMOTE_PORT";s:5:"19953";s:11:"SERVER_ADDR";s:12:"23.234.195.5";s:11:"SERVER_NAME";s:14:"www.aemiot.com";s:12:"SERVER_ADMIN";s:20:"webmaster@aemiot.com";s:11:"SERVER_PORT";s:2:"80";s:15:"SCRIPT_FILENAME";s:47:"/home/aemiotc1/public_html/wp-comments-post.php";s:12:"QUERY_STRING";s:0:"";s:10:"SCRIPT_URI";s:42:"http://www.aemiot.com/wp-comments-post.php";s:10:"SCRIPT_URL";s:21:"/wp-comments-post.php";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:4:"POST";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1447248945";s:4:"argv";s:0:"";s:4:"argc";s:1:"0";s:25:"comment_post_modified_gmt";s:19:"2015-10-31 06:27:04";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
</channel>
</rss>
